{
  "data": {
    "lesson": {
      "id": 1015416,
      "key": "7583b40b-579b-4932-910d-0ed0cea4a8ac",
      "title": "Sequencing Events - Async/Await",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "This lesson will get you acquainted with the Async/Await syntax introduced in ES8. Let's master the code and principles behind this helpful addition designed to make asynchronous flows easier. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/7583b40b-579b-4932-910d-0ed0cea4a8ac/1015416/1594150465334/Sequencing+Events+-+Async/Await+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/7583b40b-579b-4932-910d-0ed0cea4a8ac/1015416/1594150463647/Sequencing+Events+-+Async/Await+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1015418,
          "key": "d071964a-e046-4d6f-a736-e78b4b93e219",
          "title": "Lesson Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d071964a-e046-4d6f-a736-e78b4b93e219",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1027969,
              "key": "613b06e9-4b4b-4f82-bb10-b227bd39c50d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Sequencing Events with Async/await\n\n### Overview",
              "instructor_notes": ""
            },
            {
              "id": 1027970,
              "key": "fa19f09c-e49a-48e2-8fab-757d328d0a00",
              "title": "ND032 JSND L3 A01 Introduction V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DFUNrtNL3JQ",
                "china_cdn_id": "DFUNrtNL3JQ.mp4"
              }
            },
            {
              "id": 1027971,
              "key": "65f1af24-8ea3-4b15-9796-25018bff9920",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Concepts\nIn this lesson we will cover the following:\n\n- Review of JavaScript Try/Catch blocks\n- Introduction to Async/await\n- Using Async/await with promises\n- Async/await error handling\n- When (and when not) to use Async/await\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1035512,
              "key": "56781810-a6de-4b9d-8e99-f29a3bd2c1ea",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ee24aa4_jsndc3-l3-overview/jsndc3-l3-overview.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/56781810-a6de-4b9d-8e99-f29a3bd2c1ea",
              "caption": "",
              "alt": "Lesson Overview",
              "width": 818,
              "height": 337,
              "instructor_notes": null
            },
            {
              "id": 1035510,
              "key": "46a69554-9d40-4378-ab07-4b16386caaab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Resources\nHere is a list of supporting resources you might find helpful as you start this lesson:\n- A good all-around review from Toptal: [Asynchronous JavaScript: From Callback Hell to Async and Await](https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial)\n- The MDN guide: [Making asynchronous programming easier with async and await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1027972,
          "key": "f3c894c0-a2d7-4133-a203-0371ec8967bb",
          "title": "Getting  Started with Try/Catch",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f3c894c0-a2d7-4133-a203-0371ec8967bb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1027986,
              "key": "5337405f-0837-4ba3-a16d-4becab55b3c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Foundations of Async/Await\n\nBefore we get started with the Async/await syntax, it will be helpful to take a look at some synchronous syntax - the Try/catch block of vanilla JavaScript. In this lesson we will cover custom error handling with Try/catch because it will come in handy later as we learn the Async/await syntax.\n\n## Try/Catch Blocks\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1028046,
              "key": "1f52fd2e-87d4-4897-9b1e-d37610da5122",
              "title": "ND032 JSND L3 A02 Try Catch Blocks",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LyLMYTTkDOw",
                "china_cdn_id": "LyLMYTTkDOw.mp4"
              }
            },
            {
              "id": 1028082,
              "key": "e4d74550-3cd5-475f-bd05-1d4f47c9a371",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Try/Catch Recap\n\nTry/Catch blocks are the vanilla JavaScript syntax for exception handling. **Exception handling** means writing code in such a way as to allow programs to handle errors without crashing or becoming unusable. Try/Catch blocks can be used as often as needed and can be nested inside of each other to achieve the level of detail required for your program. The pieces of a try/catch block include:\n\n#### **Try**\nThe try block is the code you want to run. If the code wrapped in a try block generates an error, it triggers the catch clause. \n```\ntry {\n    // your code here\n}\n```\n\n#### **Catch**\nThe catch clause runs if an error is generated in the try clause. It takes an argument which is the error thrown in the try above. \n```\ncatch(err) {\n    console.log(err)\n}\n```\n\n#### **Finally**\nThe finally clause runs after the try and catch clauses are done, no matter which of them runs or how long. It is a way to ensure an action will take place in either circumstance.\n```\nfinally {\n    // this code runs no matter what\n}\n```\n\nSo all together it might look something like this:\n```\ntry {\n   // undeclared variable being used in an operation causes an error\n   foo/2\n} catch (err) {\n   console.error(err.message);\n} finally {\n   console.log('I run last');\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 1036673,
              "key": "d008d3d9-e55f-4ffe-b9c9-8987ce8470c3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Give Try/Catch A Try!\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1036672,
              "key": "512ec18c-a1e5-4536-b964-d2274e4a15bf",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1027972xGENERICgxaokjhn",
              "pool_id": "webterminal",
              "view_id": "generic-qkawi",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/try-catch-example.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1027976,
          "key": "2b37804d-610b-47d6-a37f-7e01aadc745f",
          "title": "Exercise: Try/Catch Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2b37804d-610b-47d6-a37f-7e01aadc745f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1028083,
              "key": "be5c063e-15ee-4eee-b4d5-058694dfccf1",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1027976xGENERICtcch88au",
              "pool_id": "webterminal",
              "view_id": "generic-rvgtr",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/try-catch-challenge.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1036057,
          "key": "f0d0f0fb-73a3-4019-bf67-f690bd9ce0b4",
          "title": "Solution: Try/Catch Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0d0f0fb-73a3-4019-bf67-f690bd9ce0b4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1036592,
              "key": "ef1f2c66-58b3-48de-9258-acf98c111a5c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution Walkthrough",
              "instructor_notes": ""
            },
            {
              "id": 1036594,
              "key": "fe5f9813-d74f-470c-8328-077f74fefc26",
              "title": "ND032 JSND L3 A03 Solution Try Catch Practice",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hiFBTqk_ItI",
                "china_cdn_id": "hiFBTqk_ItI.mp4"
              }
            },
            {
              "id": 1036596,
              "key": "be2c6178-1529-4d4e-86e5-713834ab33f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution Code\n\n#### Challenge 1\n```\nconst printStatusMessage = (status) => {\n    try {\n        const animalsList = animalsByConservationStatus(status);\n        let names = animalsList.map(animal => animal.common_name);\n        message = `Animals listed as ${status} are: ${names.join(', ')}`;\n        console.log(message);\n    } catch(error) {\n        console.error(error);\n        console.log(`There are no animals with status: ${status}`);\n    };\n};\n\nprintStatusMessage(\"critical\");\nprintStatusMessage(\"extinct\");\n```\n\n#### Challenge 2\n```\nendangeredAnimals = [\"saola\", \"green turtle\", \"amur leopard\", \"deer\"];\n\nconst printAnimalMessage = (animal) => {\n    try {\n        const info = fetchAnimalByName(animal);\n        const message = `The ${info.common_name} is ${info.conservation_status} on the endangered list`;\n        console.log(message);\n    } catch(error) {\n        console.error(`There was a problem fetching: ${animal}`);\n    };\n};\n\nendangeredAnimals.forEach(animal => printAnimalMessage(animal));\n```\n\n#### Challenege 3\n```\nanimal1 = \"vaquita\";\nanimal2 = \"mouse\";\n\nconst printAnimalFacts = (animal) => {\n    try {\n        const info = fetchAnimalByName(animal);\n        const message = `The ${info.common_name} (${info.species}) is an endangered animal with ${info.population !== null ? info.population : \"an unkown number of\"} individuals in the wild in their home region of ${info.region}`;\n        console.log(message);\n    } catch(error) {\n        console.error(error)\n    } finally {\n        console.log(`The ${animal} was searched.`)\n    }\n};\n\nprintAnimalFacts(animal1);\nprintAnimalFacts(animal2);\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1027975,
          "key": "4b346a96-9c24-4aab-93b7-0e390d9bbf34",
          "title": "Why Async/Await is Important",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4b346a96-9c24-4aab-93b7-0e390d9bbf34",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1027977,
              "key": "ab59f260-5467-4c37-9920-aa9f6d60d07b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Purpose of Async/Await\n\n### Why Do We Need More Syntax?\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1027987,
              "key": "f62d084e-bd83-41c5-899a-203c151bd4fe",
              "title": "ND032 JSND L3 A04 Why Do We Need More Syntax",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sETd0nUIDaA",
                "china_cdn_id": "sETd0nUIDaA.mp4"
              }
            },
            {
              "id": 1027988,
              "key": "4abaa776-4d93-461b-935b-9a346a7074cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Video Recap\n\nWhen you need to do operations that involve the results of more than one Promise, it is difficult to make that operation wait to run until all the Promises have resolved and the values are ready. Async/await helps us get around this difficulty by giving us the power to turn Promises into **blocking** operations when we want to. \n\nExperiment with this code example from the video to see why doing operations with the results of asynchronous Promises can be difficult:",
              "instructor_notes": ""
            },
            {
              "id": 1036604,
              "key": "e88a02fb-58b0-4b39-85dc-95d1455a9fe5",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1027975xGENERIC8lhc7ucs",
              "pool_id": "webterminal",
              "view_id": "generic-0mpn8",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/problematic_promises.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1027973,
          "key": "5a00f1b3-9f32-4b4a-93cf-21859a8df133",
          "title": "Introduction to Async/Await",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5a00f1b3-9f32-4b4a-93cf-21859a8df133",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1027974,
              "key": "f05f4895-240e-4712-932a-0dea1004d937",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Introduction to Async/Await \n\n### The Syntax\n\nHere is an example of the Async/Await syntax. ",
              "instructor_notes": ""
            },
            {
              "id": 1037475,
              "key": "288172bc-8a0e-4faa-87c2-48a859255b3e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1027973xGENERICwlms53l5",
              "pool_id": "webterminal",
              "view_id": "generic-d8jy9",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/asyncAwaitSyntax.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 1037474,
              "key": "ef8b648c-b3bb-4f96-84f7-ff571112e204",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Some things I want you to notice here are that:\n- we are still using Promises\n- the `async` word before the function declaration\n- the `await` word before the function call that returns a Promise\n\nDon't worry if this example doesn't totally make sense yet, we'll go over all of this and more in the next video.\n\n### Introduction",
              "instructor_notes": ""
            },
            {
              "id": 1028290,
              "key": "c823bf0e-f285-4beb-8d16-47cf23dd2f00",
              "title": "ND032 JSND L3 A05 Intro To Async Await",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rb_g1wETpPE",
                "china_cdn_id": "rb_g1wETpPE.mp4"
              }
            },
            {
              "id": 1028291,
              "key": "07e2f471-c82b-4fcd-880f-be717e6bbed2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Async/Await Intro Recap\n\nSo we now have two new keywords: `async` and `await`.\n- `async` goes before a function declaration and allows us to use the `await` keyword in that scope. It also forces that function to return a promise.\n- `await` can be put before a Promise call to make the program treat it as a blocking operation. \n\nAsync/Await gives us the ability to make our program wait for certain values we need so that they are available in the next step. This can make timing much easier. \n\n## Compare and Contrast Async/Await \n\nWe've learned about nested callbacks, Promise chains, and now Async/Await, here is a familiar example to let you compare and contrast all the patterns we've learned up to this point. \n\n### Nested Callbacks\n```\nconst mockAPI = (returnValue) => (arg, cb) => {\n    setTimeout(() => cb(returnValue), 2000);\n};\n\nconst fetchSession = mockAPI({ id: \"123765\" });\nconst fetchUser = mockAPI({ firstname: \"Bob\" });\nconst fetchUserFavorites = mockAPI([ \"lions\", \"tigers\", \"bears\" ]);\n\nconst runCallbacks = () => {\n    fetchSession(\"session-id\", (session) => {\n        fetchUser(session, (user) => {\n            fetchUserFavorites(user, (favorites) => {\n                console.log(favorites);\n            });\n        });\n    });\n};\n```\n\n### Flat Callbacks\n```\nconst mockAPI = (returnValue) => (arg, cb) => {\n    setTimeout(() => cb(returnValue), 2000);\n};\n\nconst fetchSession = mockAPI({ id: \"123765\" });\nconst fetchUser = mockAPI({ firstname: \"Bob\" });\nconst fetchUserFavorites = mockAPI([ \"lions\", \"tigers\", \"bears\" ]);\n\nconst runCallbacksFlat = () => {\n    const handleFavorites = (favorites) => {\n        console.log(favorites);\n    };\n    \n    const handleUser = (user) => {\n        fetchUserFavorites(user, handleFavorites);\n    };\n\n    const handleSession = (session) => {\n        fetchUser(session, handleUser);\n    };\n\n    fetchSession(\"session-id\", handleSession);\n};\n```\n\n### Promises\n```\nconst mockAPI = (returnValue) => (arg, cb) => {\n    setTimeout(() => cb(returnValue), 2000);\n};\n\nconst fetchSession = mockAPI({ id: \"123765\" });\nconst fetchUser = mockAPI({ firstname: \"Bob\" });\nconst fetchUserFavorites = mockAPI([ \"lions\", \"tigers\", \"bears\" ]);\n\nconst runPromises = () => {\n    return fetchSession(\"session-id\")\n        .then(session => fetchUser(session))\n        .then(user => fetchUserFavorites(user))\n        .then(favorites => console.log(favorites))\n        .catch(error => console.log(\"oops!\"));\n};\n```\n\n### Async/Await\n```\nconst mockAPI = (returnValue) => (arg, cb) => {\n    setTimeout(() => cb(returnValue), 2000);\n};\n\nconst fetchSession = mockAPI({ id: \"123765\" });\nconst fetchUser = mockAPI({ firstname: \"Bob\" });\nconst fetchUserFavorites = mockAPI([ \"lions\", \"tigers\", \"bears\" ]);\n\nconst runAsync = async () => {\n    try {\n        const session = await fetchSession(\"session-id\");\n        const user = await fetchUser(session);\n        const favorites = await fetchUserFavorites(user);\n        console.log(favorites);\n    } catch (error) {\n        console.log(\"oops!\");\n    }\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1027978,
          "key": "c79158b7-b22e-4452-b3ad-fce537b1fa43",
          "title": "Exercise: Async/Await I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c79158b7-b22e-4452-b3ad-fce537b1fa43",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1028092,
              "key": "832745e2-aba5-4cd6-a0c2-4275b148bf3a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1027978xGENERICdo9q4p67",
              "pool_id": "webterminal",
              "view_id": "generic-bh6yx",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/asyncAwaitPractice.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1036058,
          "key": "43867c9a-646b-4f66-a69d-b54a5dad3db6",
          "title": "Solution: Async/Await I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "43867c9a-646b-4f66-a69d-b54a5dad3db6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1037191,
              "key": "7467761e-3b63-4272-a02c-98d580f1522f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Challenge Solutions\n\n### Challenge 1\nIn the first example you were tasked with using Promise syntax to perform an operation that required the results of two Promises to be present. There are many ways you could have done this , but here is one example:\n```\npromise1().then(num1 => {\n    promise2().then(num2 => {\n        console.log(`The answer to life, the universe, and everything is: ${num1 + num2}`);\n    })\n    .catch(error => {\n        console.log(error)\n    });\n})\n.catch(error => {\n    console.log(error)\n});\n```\nThis example achieves the goal of making sure both Promises are resolved at the time the console message is created by nesting the Promise chains. This is a good example of how you would achieve this effect with Promises. \nIf you achieved this same effect by wrapping a `setTimeout` around the entire operation, consider that in real life, you wouldn't know how long each Promise would take to resolve. In fact each Promise might resolve in a different amount of time each time it was run. So you are then forced to make the `setTimeout` wait the **maximum** amount of time either Promise might take to resolve. And if you do that, the program must wait for the `setTimeout ` to complete, even if both Promises have already resolved, so you are tying yourself to the slowest allowable time, which is not ideal. This is why you might want to consider the syntax above as a better alternative. ",
              "instructor_notes": ""
            },
            {
              "id": 1037192,
              "key": "105d7395-a9ca-481e-bdb4-1252651f5e48",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Challenge 2\nThe second challenge was the same as the the first, except this time  you wrote your solution using Async/Await. This was mostly so that you would get the opportunity to compare and contrast this syntax first hand. Here is an example of a solution using Async/Await.\n```\nconst theQuestion = async () => {\n    const num1 = await promise1();\n    const num2 = await promise2();\n    console.log(`The answer to life, the universe, and everything is: ${num1 + num2}`)\n};\n\ntheQuestion();\n```\n\nThe big thing to notice here is that we don't have to nest anything. The two values we want are stored in variables in the same way we have always stored values in variables.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1027985,
          "key": "9c2b4add-c13e-4749-a8c3-d479bff6eaf0",
          "title": "Error Handling with Async/Await",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c2b4add-c13e-4749-a8c3-d479bff6eaf0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1028093,
              "key": "dd01a124-fda3-45fb-a187-3a77d3abda7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Error Handling with Async/Await\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1035529,
              "key": "1d5b2c9f-7dbe-4841-a41a-cafdd7bb05d6",
              "title": "ND032 JSND L3 A06 Error Handling With Async Await",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iiqXWk15WSs",
                "china_cdn_id": "iiqXWk15WSs.mp4"
              }
            },
            {
              "id": 1036579,
              "key": "3005e94b-83e0-45d6-a1b5-f67dcfd4f2f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Code Example\n\nHere are the code examples from the video.\n\n### Try/Catch Version\n```\nconst promise1 = () => new Promise((resolve, reject) => {\n    setTimeout(resolve, 3000, 5);\n});\n\nconst promise2 = () => new Promise((resolve, reject) => {\n    setTimeout(reject, 3000, \"Could not get value\");\n});\n\nasync function handleManyThings() {\n    try {\n        const value1 = await promise1();\n        console.log(\"waiting on first promise\", value1);\n\n        const value2 = await promise2();\n        console.log(\"waiting on second promise\", value2);\n\n        console.log(\"Solution:\", value1 + value2);\n        return value1 + value2;\n    } catch(error) {\n        console.log(error)\n    }\n}\n\nhandleManyThings();\n\n```\n\n### Promise Catch Version\n```\nconst promise1 = () => new Promise((resolve, reject) => {\n    setTimeout(resolve, 3000, 5);\n});\n\nconst promise2 = () => new Promise((resolve, reject) => {\n    setTimeout(reject, 3000, \"Could not get value\");\n});\n\nasync function handleManyThings() {\n    const value1 = await promise1();\n    console.log(\"waiting on first promise\", value1);\n\n    const value2 = await promise2();\n    console.log(\"waiting on second promise\", value2);\n\n    console.log(\"Solution:\", value1 + value2);\n    return value1 + value2;\n}\n\nhandleManyThings().catch(err => console.log(err));\n```",
              "instructor_notes": ""
            },
            {
              "id": 1036578,
              "key": "b2e8f767-d3f4-4fd6-8767-27a728e00c3f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Error Handling in Async/await Recap\n\nAnother benefit of the synchronous behavior we get when using Async/await, is that it allows us to use the `try`/`catch` exception handling syntax we learned at the beginning of this lesson. You can also handle `async` functions with the `.catch` style error handling we saw with Promises, but it is more common to see the `try`/`catch` syntax used with Async/await. This means that all of the principles we learned about custom error handling with synchronous JavaScript can now apply to our asynchronous flows as well!",
              "instructor_notes": ""
            },
            {
              "id": 1037393,
              "key": "faa18f7a-4282-481e-8798-86227c9a1f43",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Try It Out\n\nYou can run the code from the video in the Workspace below.  Which type of error handling do you prefer?",
              "instructor_notes": ""
            },
            {
              "id": 1037394,
              "key": "dc48ef4b-def6-43b8-8472-1496d0a29f4c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1027985xGENERICvp4xgboe",
              "pool_id": "webterminal",
              "view_id": "generic-n6kek",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/try_catch.js",
                      "/home/workspace/promise_catch.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1027979,
          "key": "6c2c73be-4faa-40a2-84fd-5dba33fb858f",
          "title": "When (and When Not) to Use Async/Await",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6c2c73be-4faa-40a2-84fd-5dba33fb858f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1028094,
              "key": "500276a1-0be7-4069-8fb7-e5f4386ebab5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##  When (and When Not) to Use Async/Await",
              "instructor_notes": ""
            },
            {
              "id": 1035530,
              "key": "f54629de-5282-4e67-bede-5d9c423eadd0",
              "title": "ND032 JSND L3 A07 When And When Not To Use Async Await V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ZbcRCqJ-Yas",
                "china_cdn_id": "ZbcRCqJ-Yas.mp4"
              }
            },
            {
              "id": 1036559,
              "key": "89b08f2c-9807-4991-8ec4-5d315c7549c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Video Recap\n\n#### You should use Async/Await when:\n- The results from multiple Promises will  be used together.\n- You need perform a lot of logic after one or multiple Promises resolve\n- Logic in a synchronous-style function would be cleaner than in a `.then` chain (this is mostly personal preference)\n\n#### You shouldn't use Async/Await if:\n- You don't need to use the `await` word in the function\n- You just want the function to return a promise (instead use Promise.new from the promises lesson)\n\n#### Think carefully about using Async/Await because:\n- It will change the output of the function. If other parts of the program rely on the output of that function, changing it to `async` will have unexpected consequences",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1027981,
          "key": "76d7ccc8-9ebc-4be8-88ea-3c7a6d0aa118",
          "title": "Exercise: Async/Await II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "76d7ccc8-9ebc-4be8-88ea-3c7a6d0aa118",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1028096,
              "key": "5db2318c-aa72-43cd-a5db-404e8486cae9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1027981xGENERIC4swaf3yo",
              "pool_id": "webterminal",
              "view_id": "generic-an8rn",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/async-and-try-catch.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1036059,
          "key": "91642919-9f23-4d28-a1a2-260d0899d780",
          "title": "Solution: Async/Await II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "91642919-9f23-4d28-a1a2-260d0899d780",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1036640,
              "key": "2740b4a4-157a-4726-a6e6-b854c9dca189",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Solutions\n\nHere are the solutions for each challenge.\n\n#### Challenge 1\n```\nconst printStatusMessage = async (status) => {\n    try {\n        const animalsList = await animalsByConservationStatus(status);\n        console.log(animalsList)\n        message = `Animals listed as ${status} are: ${animalsList.join(', ')}`;\n        console.log(message);\n    } catch(error) {\n        console.error(error);\n        console.log(`There are no animals with status: ${status}`)\n    }\n}\n\nprintStatusMessage(\"critical\");\nprintStatusMessage(\"extinct\");\n```\n\nNotice where the `async` word is added. When you save a function to a variable name with arrow function syntax, you need to make sure `async` goes **before the function definition** instead of before the variable name. It can be tempting to want to write this instead:\n```\nconst async printStatusMessage = (status) => {...\n```\nBut this would not be correct because when this runs, printStatusMessage is not a function, just a variable name. That is why this syntax is correct to save an `async` function to a variable:\n```\nconst printStatusMessage = async (status) => {...\n```\n\n\n#### Challenge 2\n```\nendangeredAnimals = [\"saola\", \"green turtle\", \"amur leopard\", \"deer\"];\n\nconst printAnimalMessage = async (animal) => {\n    try {\n        const info = await fetchAnimalByName(animal);\n        const message = `The ${info.common_name} is ${info.conservation_status} on the endangered list`;\n        console.log(message);\n    } catch(error) {\n        console.error(`There was a problem fetching: ${animal}`)\n    };\n};\n\nendangeredAnimals.forEach(animal => printAnimalMessage(animal));\n```\n\n#### Challenge 3\n```\nanimal1 = \"vaquita\";\nanimal2 = \"mouse\";\n\nconst printAnimalFacts = async (animal) => {\n    try {\n        const data = await fetchAnimalByName(animal);\n        const message = `The ${data.common_name} (${data.species}) is an endangered animal with ${data.population !== null ? data.population : \"an unkown number of\"} individuals in the wild in their home region of ${data.region}`;\n        console.log(message);\n    } catch(error) {\n        console.error(error)\n    } finally {\n        console.log(`The ${animal} was searched.`)\n    }\n};\n\nprintAnimalFacts(animal1);\nprintAnimalFacts(animal2);\n```\n\n`Finally` statements work with Async/await too!",
              "instructor_notes": ""
            },
            {
              "id": 1036664,
              "key": "4396e67d-0c50-4f55-b3a0-04a4f0e72c88",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Bonus Round - Challenge 4\n\nThis code challenge was much harder than the others and forces you to use everything you've learned in the course so far. To be very clear, you are not expected to have solved this correctly the first time, I would put this as an advanced JavaScript challenge. But even if you didn't get the code working in the challenge, take a look at this code example because it has many things to teach us about Async/await and Promises.\n\n#### Challenge 4\n```\nconst printAnimalRegions = async (status) => {\n    try {\n        const animalsList = await animalsByConservationStatus(status);\n        const getAnimals = animalsList.map((animal) => {\n            return fetchAnimalByName(animal).catch(err => console.log(err));\n        });\n    \n        const regions = await Promise.allSettled(getAnimals)\n        .then(results => {\n            const regions = results.map(result => result.value.region);\n            return regions;\n        })\n        .catch(error => console.log(error));\n    \n        const message = `Animals with an endangered status of ${status} can be found in the following regions: ${regions.join(', ')}`;\n        \n        console.log(message);\n    } catch(error) {\n        console.log(error);\n    } finally {\n        console.log(`Search complete for regions with animals of status: ${status}`);\n    };\n};\n\nprintAnimalRegions(\"critical\");\nprintAnimalRegions(\"threatened\");\n```\n\nThere is a lot going on here, so I'm going to break down the most important lines. First off, notice that this is a situation where we need one Promise to resolve before we have the information we need to start the second. In this case, we need to have the list of animals with the requested endangered status back from the API (animalsByConservationStatus), because our second action is to request the specific information for each animal by name (fetchAnimalByName).\n\nSo we await the result of animalsByConservationStatus so that animalsList is an array of animal names. Now, we need to request the information for each animal  in that list. To do this, we have to map over the list of names, and for each animal we make a request to get its information. So take a look at the variable `getAnimals`, it is the result of a map function, therefore it is an array. But an array of what? Promises!\n\nAnd here is where this example takes the difficulty to a new level, we now have one Promise per animal in `animalsList` stored in an array (`getAnimals`)!  That might trigger your memory from the Promises lesson - there are Promise methods specifically for handling multiple Promises. In this case, `Promise.allSettled` is the one we want and we are going to pass it the array of the Promises `getAnimals`.  \n\nBut lets take it a little further. Promise.allSettled itself returns a what? A Promise. A single Promise. That means that we can `await` the result of Promise.allSettled. Take a look at the `.then` clause of the Promise.allSettled and notice that we are returning only the `region` value of each result. So, Promise.allSettled waits for each `getAnimal` Promise to resolve, then takes the data and pulls out the region. The resulting array is stored in the constant `regions`. \n\n## Second Try\nTo get a better feel for everything happening in this example, use the workspace below and add console logs at the steps I outline above to make sure you understand what is happening. And if you are particularly ambitious, you could try implementing this with just Promises, as the attempt will help you get a feel for why the Async/await syntax is so helpful.\n",
              "instructor_notes": ""
            },
            {
              "id": 1036665,
              "key": "c5a50c2a-6df4-4157-8a44-e935399dd197",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1036059xGENERICrsl92772",
              "pool_id": "webterminal",
              "view_id": "generic-i9qnl",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "\n",
                    "openFiles": [
                      "/home/workspace/hard_challenge.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1027982,
          "key": "49d051e6-5fb8-4eaa-9b36-e98d17f2eae8",
          "title": "Quizzes: Async/Await ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "49d051e6-5fb8-4eaa-9b36-e98d17f2eae8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1036667,
              "key": "d2059477-e65b-4918-8a63-20cbf67e1498",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Async/Await Quizzes",
              "instructor_notes": ""
            },
            {
              "id": 1036694,
              "key": "4f237bb3-d7f7-400f-b3a0-3011f88afa12",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4f237bb3-d7f7-400f-b3a0-3011f88afa12",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Try/Catch is the traditional way to handle errors, Promise chains also handle errors too and uses slightly different syntax to cover the same situations. Match the Try/Catch syntax with the Promise syntax that performs the same function"
                },
                "concepts_label": "Try/Catch",
                "answers_label": "Promise",
                "concepts": [
                  {
                    "text": "`try`",
                    "correct_answer": {
                      "id": "a1592345128000",
                      "text": "`.then`"
                    }
                  },
                  {
                    "text": "`catch`",
                    "correct_answer": {
                      "id": "a1592345244813",
                      "text": "`.catch`"
                    }
                  },
                  {
                    "text": "`finally`",
                    "correct_answer": {
                      "id": "a1592345252079",
                      "text": "`.finally`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1592345252079",
                    "text": "`.finally`"
                  },
                  {
                    "id": "a1592345128000",
                    "text": "`.then`"
                  },
                  {
                    "id": "a1592345290644",
                    "text": "`.catch().then()`"
                  },
                  {
                    "id": "a1592345244813",
                    "text": "`.catch`"
                  },
                  {
                    "id": "a1592345301989",
                    "text": "`.after`"
                  },
                  {
                    "id": "a1592345315594",
                    "text": "`.race`"
                  }
                ]
              }
            },
            {
              "id": 1037227,
              "key": "1c07ac60-63de-4d0d-b601-d09c6dfb6982",
              "title": "Async and Try/Catch",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1c07ac60-63de-4d0d-b601-d09c6dfb6982",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When the logic of an `async` function is wrapped in Try/catch blocks and one of the awaited Promises rejects, Try/catch treats the rejected Promise:",
                "answers": [
                  {
                    "id": "a1592540789684",
                    "text": "In the same way `Promise.allSettled` does, by marking that Promise as rejected in the resulting array",
                    "is_correct": false
                  },
                  {
                    "id": "a1592541378406",
                    "text": "In the same way as `Promise.race` does, by passing along any data that came with the rejected Promise",
                    "is_correct": false
                  },
                  {
                    "id": "a1592541434726",
                    "text": "In the same way as Try/Catch blocks treat errors thrown by JavaScript, meaning the `catch` statement will run",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1037228,
              "key": "a3ff516a-1f9f-403a-9409-cbe41283e6e5",
              "title": "async",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a3ff516a-1f9f-403a-9409-cbe41283e6e5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will the following code output?\n```\ntry {\n  console.log(\"A\");\n  try {\n    console.log(\"B\");\n    throw new Error(\"C\");\n    console.log(\"D\");\n  } catch(error) {\n    console.log(\"E\");\n  } finally {\n    console.log(\"F\");\n  };\n} catch(error){\n  console.log(\"G\");\n};\n```",
                "answers": [
                  {
                    "id": "a1592542904424",
                    "text": "A, B, C, E, F, G",
                    "is_correct": false
                  },
                  {
                    "id": "a1592543038146",
                    "text": "A, B, E, G",
                    "is_correct": false
                  },
                  {
                    "id": "a1592543062645",
                    "text": "A, B, C, E, G",
                    "is_correct": false
                  },
                  {
                    "id": "a1592543088278",
                    "text": "A, B, E, F",
                    "is_correct": true
                  },
                  {
                    "id": "a1592543164155",
                    "text": "A, B, E, F, G",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1037196,
              "key": "c69a5567-d899-4dfb-a280-67de3b5bc901",
              "title": "Async Await",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c69a5567-d899-4dfb-a280-67de3b5bc901",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select the benefits of using Async/await syntax from the list below.",
                "answers": [
                  {
                    "id": "a1592522784043",
                    "text": "Allows us to not use Promises anymore",
                    "is_correct": false
                  },
                  {
                    "id": "a1592522824816",
                    "text": "Allows us to select Promises to be treated as blocking actions with the async word",
                    "is_correct": false
                  },
                  {
                    "id": "a1592522879302",
                    "text": "Allows us to select Promises to be treated as blocking actions with the await word",
                    "is_correct": true
                  },
                  {
                    "id": "a1592522890575",
                    "text": "Allows the developer to write all their asynchronous functionality with callbacks",
                    "is_correct": false
                  },
                  {
                    "id": "a1592522973428",
                    "text": "Allows the developer to use the results of many Promises and be confident that the Promises have resolved",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1037395,
              "key": "2506c8d0-db45-493a-931b-30e38a4a3909",
              "title": "Practice Interview Question",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2506c8d0-db45-493a-931b-30e38a4a3909",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Explain when you would use Async/await in JavaScript.",
                "matchers": [
                  {
                    "expression": "[^/s]+"
                  }
                ]
              }
            },
            {
              "id": 1037224,
              "key": "82ede455-6d8e-40b2-91f9-09facaeb1c0d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "82ede455-6d8e-40b2-91f9-09facaeb1c0d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will the following code output?\n```\nconst p1 = new Promise((resolve, reject) => {\n    console.log('A');\n    resolve(['B', 'C']);\n})\nconst p2 = new Promise((resolve, reject) => {\n    resolve(['D']);\n})\nconst test = async () => {\n  try {\n    const d = await p1;\n    const d2 = await p2;\n    console.log(d.join(\" \"), d2.join(\" \"));\n  } catch(err) {\n    console.log(err)\n  };\n};\n\ntest();\n```",
                "answers": [
                  {
                    "id": "a1592532358804",
                    "text": "A, B, C, D",
                    "is_correct": true
                  },
                  {
                    "id": "a1592532436833",
                    "text": "A, C, B, D",
                    "is_correct": false
                  },
                  {
                    "id": "a1592532446929",
                    "text": "D, A, B, C",
                    "is_correct": false
                  },
                  {
                    "id": "a1592532461932",
                    "text": "B, C, D",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1037225,
              "key": "ecb044c2-d1e3-4ccc-b4fd-d81188e01861",
              "title": "async/await",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ecb044c2-d1e3-4ccc-b4fd-d81188e01861",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the following code output?\n```\nconst p1 = new Promise((resolve, reject) => {\n    console.log('A');\n    resolve('B');\n})\nconst p2 = new Promise((resolve, reject) => {\n    resolve(['D']);\n});\nconst test = async () => {\n  try {\n    const d = await p1.then(data => console.log(data));\n    const d2 = await p2;\n    console.log(d, d2.join(\"\"));\n  } catch(err) {\n    console.log(err);\n  };\n};\n```",
                "answers": [
                  {
                    "id": "a1592533329813",
                    "text": "A, B, C, D",
                    "is_correct": false
                  },
                  {
                    "id": "a1592533399137",
                    "text": "A, B, D",
                    "is_correct": false
                  },
                  {
                    "id": "a1592533443529",
                    "text": "A, D, B",
                    "is_correct": false
                  },
                  {
                    "id": "a1592533457681",
                    "text": "A, B, Undefined,  D",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1027983,
          "key": "9663b171-2958-4e13-a9d3-0a02d79e2b78",
          "title": "Lesson Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9663b171-2958-4e13-a9d3-0a02d79e2b78",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1028097,
              "key": "9f1c52ec-444f-4012-9139-a3ea978e40f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Async/Await Conclusion\n\nCongratulations! You finished the Async/await lesson and the last of the course content. ",
              "instructor_notes": ""
            },
            {
              "id": 1028098,
              "key": "4af04f0d-78cb-4da3-a968-99e574eb4e89",
              "title": "ND032 JSND L3 A08 Lesson Conclusion V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Cxr-95s9_rk",
                "china_cdn_id": "Cxr-95s9_rk.mp4"
              }
            },
            {
              "id": 1028099,
              "key": "dc26c787-b718-4fbb-aa1c-bf2aaa394089",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Lesson Concepts Recap\n\nCongratulations on wrapping up the last lesson in this course! Here's a look back at all we've done. \n- Try/Catch syntax and exception handling \n-  Async/Await syntax\n-  Async/Await uses and concepts\n-  Async/Await use cases\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1035525,
              "key": "86885617-43ed-4712-8880-c6608fa7b2a3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ee24aa4_jsndc3-l3-overview/jsndc3-l3-overview.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/86885617-43ed-4712-8880-c6608fa7b2a3",
              "caption": "",
              "alt": "",
              "width": 818,
              "height": 337,
              "instructor_notes": null
            },
            {
              "id": 1035524,
              "key": "eef882b9-fa1b-431f-be6d-388fe61b8f7e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Resources for Further Research\n- For another look at Try/Catch and exception handling, here is a good resource: [JavaScript try…catch Statement](https://www.javascripttutorial.net/javascript-try-catch/)\n- The MDN Async/Await resource: [Making asynchronous programming easier with async and await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1027984,
          "key": "0001b86f-a797-44cc-9bdb-85d66e57185a",
          "title": "Lesson Glossary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0001b86f-a797-44cc-9bdb-85d66e57185a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1028102,
              "key": "8da0d3f5-d075-4111-b051-3fd654fce277",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Glossary\n\n## Terms\n\n#### **Exception Handling**\nException handling means writing code that expects errors to occur and handles them gracefully. Programs with good exception handling can handle errors without crashing or becoming unusable, and instead give their users and developers helpful insight into what went wrong.\n\n## Code Examples\n\n#### **Try/Catch**\n```\ntry {\n   // undeclared variable being used in an operation causes an error\n   foo/2\n} catch (err) {\n   console.error(err.message);\n} finally {\n   console.log('I run last');\n};\n```\n\n#### **Async**\n```\n// arrow function example\nconst myAsyncFunction = async ( ) => {\n  // ...\n};\n\n// named function example\nasync function myAsyncFunction() {\n  // ...\n};\n```\nThe async keyword before a function means two things:\n\n- The function must return a promise\n- The `await` keyword can be used in the function\n\n#### **Await**\n```\nconst myAsyncFunction = async ( ) => {\n    const myVal = await promise1();\n};\n```\nThe `await` keyword forces the program to block until promise1 has fulfilled and the value returned has been saved to `myVal`.\n\n\n#### Try/catch in Async/await\nHere is an example of using Try/catch for error handling inside an async function.\n```\nconst myAsyncFunction = async ( ) => {\n    try {\n         const myVal = await promise1();\n    } catch(error) {\n         console.log(error);\n    }\n};\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1031777,
          "key": "f1d6f30c-8250-486a-86cb-cbd093531de7",
          "title": "Course Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f1d6f30c-8250-486a-86cb-cbd093531de7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1037213,
              "key": "7429c3e4-0634-40a7-a359-7102510ed9c7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Course Recap\n\nYou have completed the course work for Asynchronous Programming with JavaScript! We have come a long way and learned so many new terms and concepts from synchronous code all the way to Async/await. You have accomplished a lot - take a moment to celebrate! Here is a look at all the lessons we covered in this course:",
              "instructor_notes": ""
            },
            {
              "id": 1037223,
              "key": "54ed65c7-9a13-4732-81ea-c1ad0c895bf6",
              "title": "ND032 JSND L3 A09 Course Recap V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AgBiItSIp7g",
                "china_cdn_id": "AgBiItSIp7g.mp4"
              }
            },
            {
              "id": 1035526,
              "key": "e9def9c5-7e42-4cd7-9924-941449ab307c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ee26392_jsndc3-l0-course-outline/jsndc3-l0-course-outline.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e9def9c5-7e42-4cd7-9924-941449ab307c",
              "caption": "",
              "alt": "Course Overview",
              "width": 549,
              "height": 323,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 1035527,
          "key": "55a22284-9d52-4cc2-b32d-e95afd9c9045",
          "title": "Congratulations!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "55a22284-9d52-4cc2-b32d-e95afd9c9045",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1037215,
              "key": "a7fb5817-8fc4-4a62-ad99-5155bd2fce08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Congratulations!\n\nCompleting this course is a big accomplishment and you've taken a huge step forward in your skills as a developer. I have enjoyed developing this course and I hope that the material was both challenging and helpful for you, and that you find the skills and concepts you learned these lessons to be beneficial in your day to day work. Like I said at the very beginning of the course, the concepts we learned are incredibly important for moving forward in your career as a developer and they will take practice to truly master. So I will leave you now with your first opportunity to practice these concepts on your own in the project. Happy racing and good luck!",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}