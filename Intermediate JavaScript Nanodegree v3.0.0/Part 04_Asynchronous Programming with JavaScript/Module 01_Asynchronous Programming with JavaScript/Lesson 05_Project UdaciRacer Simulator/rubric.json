{
  "id": 2829,
  "project_id": 728,
  "upload_types": [
    "repo",
    "zip"
  ],
  "file_filter_regex": "\\A(?!(((.*/)?(__MACOSX|\\.git|node_modules|bower_components|jspm_packages|\\.idea|build|.ipynb_checkpoints|\\.Trash-0|logs)(\\Z|/))))((.*\\.(js|css|py|html|htm|txt|md|markdown|sql|swift|java|ts|gradle|xml|rst|yml|yaml|rmd|pdf|docx|h|H|hh|hxx|h\\+\\+|c|C|cc|cpp|cxx|c\\+\\+)\\Z)|((.*/)?(README|Readme|readme|Makefile)\\Z))",
  "nomination_eligible": false,
  "stand_out": "- If you like this game, wouldn’t it be so much fun with more people? As an extra challenge, refactor this project to use WebSockets to allow for multiplayer functionality.\n- Want to know when to throw in that final burst of speed? Show a race completion percentage while the race runs.\n- The leaderboard as a table is a little boring. Create a more entertaining way to display the information! You could try animating some little cars.\n- This is a game, it should be testable! Try adding tests to cover the basic functionality.\n",
  "hide_criteria": false,
  "created_at": "2020-04-20T20:32:55.139Z",
  "updated_at": "2020-07-27T08:54:59.430Z",
  "hashtag": "",
  "max_upload_size_mb": 500,
  "estimated_sla": null,
  "project_assistant_enabled": false,
  "available_for_cert_project": false,
  "language": "en-us",
  "ndkeys": [
    "nd032-beta",
    "nd032",
    "nd032-ent",
    "nd-instructor"
  ],
  "coursekeys": [],
  "is_career": false,
  "sections": [
    {
      "id": 6069,
      "name": "Game Functionality",
      "created_at": "2020-04-20T21:46:17.302Z",
      "updated_at": "2020-04-20T21:47:58.865Z",
      "deleted_at": null,
      "position": 0,
      "rubric_id": 2829,
      "rubric_items": [
        {
          "id": 17409,
          "section_id": 6069,
          "passed_description": "The node application runs successfully without any errors when running ‘npm install & npm start’.",
          "exceeded_description": null,
          "created_at": "2020-04-20T21:52:50.672Z",
          "updated_at": "2020-04-20T21:53:51.343Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "It successfully starts without errors",
          "exceedable": false
        },
        {
          "id": 17410,
          "section_id": 6069,
          "passed_description": "We should be able to see the racer and track information from the API. Racer options should show the handling, acceleration, and top speed of the pod racer, as these are the metrics by which you win the game.",
          "exceeded_description": null,
          "created_at": "2020-04-20T21:53:51.566Z",
          "updated_at": "2020-04-20T21:56:05.456Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Create a race by selecting the racer and track they desire",
          "exceedable": false
        },
        {
          "id": 17411,
          "section_id": 6069,
          "passed_description": "The user will press a button quickly in order to “race” their car. The button press must correctly be sent to the API.",
          "exceeded_description": null,
          "created_at": "2020-04-20T21:56:05.713Z",
          "updated_at": "2020-04-20T21:57:54.042Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "The racer is able to “accelerate” their car by clicking the accelerate button",
          "exceedable": false
        },
        {
          "id": 17412,
          "section_id": 6069,
          "passed_description": "The user will be able to see a live-updated leaderboard as the race takes place. UI elements for this board will be provided, the student must write the logic to enable the live updates.",
          "exceeded_description": null,
          "created_at": "2020-04-20T21:57:54.378Z",
          "updated_at": "2020-04-20T21:58:25.758Z",
          "deleted_at": null,
          "optional": false,
          "position": 3,
          "criteria": "Track race progress in real-time (live updates)",
          "exceedable": false
        },
        {
          "id": 17413,
          "section_id": 6069,
          "passed_description": "The results page only needs to show the final race positions and should not be editable.",
          "exceeded_description": null,
          "created_at": "2020-04-20T21:58:26.150Z",
          "updated_at": "2020-04-20T21:58:48.889Z",
          "deleted_at": null,
          "optional": false,
          "position": 4,
          "criteria": "Show race results once the race is finished",
          "exceedable": false
        }
      ]
    },
    {
      "id": 6070,
      "name": "Code Quality",
      "created_at": "2020-04-20T21:46:18.966Z",
      "updated_at": "2020-04-20T21:47:58.870Z",
      "deleted_at": null,
      "position": 1,
      "rubric_id": 2829,
      "rubric_items": [
        {
          "id": 17415,
          "section_id": 6070,
          "passed_description": "The project uses the provided examples to start a race with players.  There will be tips in the form of comments to help students structure their project well, in addition to examples where necessary.",
          "exceeded_description": null,
          "created_at": "2020-04-20T21:58:59.594Z",
          "updated_at": "2020-04-20T22:01:44.916Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Cleanly written JavaScript, using best practices",
          "exceedable": false
        },
        {
          "id": 17416,
          "section_id": 6070,
          "passed_description": "Their code should minimize code repetition, be easy to read, and easy to maintain. It should name variables descriptively, and optionally use comments as needed to document code functionality.",
          "exceeded_description": null,
          "created_at": "2020-04-20T21:59:00.535Z",
          "updated_at": "2020-04-20T22:01:44.921Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Code is readable and DRY",
          "exceedable": false
        }
      ]
    },
    {
      "id": 6071,
      "name": "Asynchronous Programming Constructs",
      "created_at": "2020-04-20T21:46:19.861Z",
      "updated_at": "2020-04-20T21:47:58.878Z",
      "deleted_at": null,
      "position": 2,
      "rubric_id": 2829,
      "rubric_items": [
        {
          "id": 17417,
          "section_id": 6071,
          "passed_description": "Callbacks will be tested within the front end logic for rendering UI elements. The student will work with prebuilt components that require a level of familiarity with callbacks.",
          "exceeded_description": null,
          "created_at": "2020-04-20T22:03:16.051Z",
          "updated_at": "2020-04-20T22:05:11.422Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Handle front end logic of rendering UI elements using callbacks",
          "exceedable": false
        },
        {
          "id": 17418,
          "section_id": 6071,
          "passed_description": "Promises will be the primary method for dealing with API responses. The student will show their level of knowledge by chaining on existing promises, correctly handling failing States of promises, and creating new promises.",
          "exceeded_description": null,
          "created_at": "2020-04-20T22:03:16.371Z",
          "updated_at": "2020-04-20T22:05:11.427Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Handle API responses using JavaScript Promises",
          "exceedable": false
        },
        {
          "id": 17419,
          "section_id": 6071,
          "passed_description": "Async Await will be used with certain API calls and internal logic to handle game processes. Some async functions will be provided, which students will need to be familiar enough with to correctly await these asynchronous calls. Students are also expected to add error handling logic in the form of `try`/`catch` or`.catch` to all async functions.",
          "exceeded_description": "",
          "created_at": "2020-04-20T22:03:17.548Z",
          "updated_at": "2020-06-25T17:20:24.206Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Handle API calls using async/await",
          "exceedable": false
        }
      ]
    }
  ],
  "project": {
    "id": 728,
    "name": "UdaciRacer Simulator",
    "nanodegree_key": "nd032",
    "is_cert_project": false,
    "audit_project_id": null,
    "hashtag": null,
    "audit_rubric_id": 2899,
    "entitlement_required": false,
    "is_career": false,
    "recruitment_family_id": 12,
    "created_at": "2020-05-04T22:55:40.592Z",
    "updated_at": "2021-04-03T02:52:01.567Z",
    "price": "7.5",
    "ungradeable_price": "3.0",
    "audit_price": "0.0"
  }
}