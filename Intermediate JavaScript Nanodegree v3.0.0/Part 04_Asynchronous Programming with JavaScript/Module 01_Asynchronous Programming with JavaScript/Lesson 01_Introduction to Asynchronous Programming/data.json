{
  "data": {
    "lesson": {
      "id": 1014051,
      "key": "f188a03b-c274-42e8-b585-2aec4e62e667",
      "title": "Introduction to Asynchronous Programming",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Introduction to the course and concepts to be covered in this course.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/f188a03b-c274-42e8-b585-2aec4e62e667/1014051/1594152660044/Introduction+to+Asynchronous+Programming+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/f188a03b-c274-42e8-b585-2aec4e62e667/1014051/1594152658037/Introduction+to+Asynchronous+Programming+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1014052,
          "key": "eeee407a-a402-475a-86f1-3cebc7425351",
          "title": "Meet your Instructor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eeee407a-a402-475a-86f1-3cebc7425351",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1014053,
              "key": "7436bee9-0c18-429e-9d8e-2b678a3f9c31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Meet your Instructor",
              "instructor_notes": ""
            },
            {
              "id": 1014067,
              "key": "8587cb3b-4201-46aa-8092-ea36d2a3d3e9",
              "title": "ND032 JSND L0 A01 Meet Your Instructor V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KV1Bn4Gxz_k",
                "china_cdn_id": "KV1Bn4Gxz_k.mp4"
              }
            },
            {
              "id": 1014068,
              "key": "456c8961-0175-4996-9fc0-2e1f9646893f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Welcome to Asynchronous JavaScript!\n\nWelcome to Asynchronous Programming in JavaScript! I'm thrilled you're here and hope you find the course as enjoyable as it is challenging. My main goal for this course is to be a practical guide to the principles and syntax behind asynchronous programming so that you can write even more sophisticated programs. Feeling comfortable with asynchronous events and concepts will allow you to solve complex problems and take your coding to a whole new level. This course won't be long, but there's a lot to learn, so stick with me, and before you know it, you'll be writing your asynchronous code in the project.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1014054,
          "key": "fabd7df6-4a2f-4cb8-940d-93d3d3208eb0",
          "title": "Course Goals and Outline",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fabd7df6-4a2f-4cb8-940d-93d3d3208eb0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1014527,
              "key": "aaf5a74a-5e7e-49d0-a49c-44c3733d0460",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Course Goals \n\n\nThe focus of this course is to get you comfortable reading, writing, and thinking in asynchronous patterns. To get you the necessary practice in reading and writing asynchronous code, you can expect lots of hands-on practice in the form of coding challenges. There will also be lots of articles, written questions, and thought experiments to challenge how you think about solving asynchronous problems. \n\nAnother effort of the course will be interview question preparation. Asynchronous interview questions are a fairly common part of mid-level JavaScript interviews. To make sure you’re ready, I will be placing interview questions throughout the course that give you the chance to practice your response! Combining all these challenges, I hope to have you writing idiomatic asynchronous programs in short order.",
              "instructor_notes": ""
            },
            {
              "id": 1014532,
              "key": "2fdc3d48-1985-4ce0-b34b-c7158a9d6c70",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Course Outline\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1014531,
              "key": "b6e60d0e-0be6-41fb-9232-bc295a8275f3",
              "title": "ND032 JSND L0 A02 Course Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LqM5IOtf-h0",
                "china_cdn_id": "LqM5IOtf-h0.mp4"
              }
            },
            {
              "id": 1033511,
              "key": "7496a59b-0db9-47d7-aa6f-80ecb8688a5a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Learning Objectives\n\nBy the end of this course you should be able to: \n\n- Understand asynchronous programs and their logic flows\n- Write asynchronous programs with modern, idiomatic JavaScript Syntax\n- Be aware of potential issues with asynchronous flows\n- Give good answers to asynchronous interview questions \n",
              "instructor_notes": ""
            },
            {
              "id": 1033509,
              "key": "43e0672f-0974-4527-ba21-e79464766970",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5eebb7ba_jsndc3-lo-course-outline/jsndc3-lo-course-outline.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/43e0672f-0974-4527-ba21-e79464766970",
              "caption": "Course Overview",
              "alt": "Course Overview",
              "width": 761,
              "height": 338,
              "instructor_notes": null
            },
            {
              "id": 1016019,
              "key": "6a76983c-5e09-48c7-ad68-d62ecac0b645",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Summaries\n\n### Synchronous Concepts and Asynchronous Callbacks\n\nFirst off, we’ll spend some time with the basics. We’ll start talking about synchronous programs and some of the most common terms that often get mixed up. At the end of the lesson, we’ll do a recap of callbacks that will leave you in a great place to get started with **Promises**.\n\n### Sequencing Events - Promises\n\nLesson 2 will be an introduction to **Promises** and how they solved some of the issues with callbacks in asynchronous programs. We'll cover the general syntax with lots of hands-on practice. Promises are where we’ll spend the bulk of this course since they are the most common form of handling asynchronicity in modern JavaScript. We will also cover many practical applications of Promises. First with ```Fetch```, the modern promise-based syntax for XHTTP requests, and then with promise chaining methods to handle more advanced asynchronous actions. Once you have these under your belt, you’ll have a firm understanding of Promises and be ready for the next layer on top of that syntax - **Async/Await**.\n\n### Sequencing Events - Async/Await\n\nThe final lesson of this course will be an introduction to the **Async/Await** syntax introduced in ES6. In reality, this is just some convenient syntax packed around **Promises** that can help us reason about asynchronous functions in a synchronous way.\n\n### Project: Racing Simulation Game\nAt the end of the course you'll demonstrate your mastery of Asynchronous JavaScript  by creating a racing game called **UdaciRacer Sim**, which allows a user to race a simulated racer!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1014055,
          "key": "7f71cb82-809c-4f93-9330-1af109fac3a0",
          "title": "Prerequisites",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7f71cb82-809c-4f93-9330-1af109fac3a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1016018,
              "key": "db5b712c-13ce-4337-95b7-532c25b3df60",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Prerequisites\n\nTo be ready for this course, you need knowledge of the following topics:\n\n- General beginner level JavaScript\n- General ES6 syntax\n- Understanding of callbacks\n- Basic understanding of JavaScript event handling\n\n## Resources\n\nHere are some resources that will put you in a good place for starting this course:\n- If you need to brush up on your JavaScript skills you can take this free Udacity course: [Intro to JavaScript](https://www.udacity.com/course/intro-to-javascript--ud803)\n- For a refresher on callbacks, here's a good article: [Async JavaScript: From Callbacks, to Promises, to Async/Await](https://tylermcginnis.com/async-javascript-from-callbacks-to-promises-to-async-await/).\n- For a refresher on JavaScript events, AJAX requests, and the Browser API - read chapters 13 - 15 of [Eloquent JavaScript](https://eloquentjavascript.net/).\n- To get a glimpse of where we're going, take a look at MDN's [Introduction to Asynchronous Programming](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1016020,
          "key": "3b8c7375-b1f0-4967-8521-b5369d87265a",
          "title": "Introduction to Asynchronous Programming",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3b8c7375-b1f0-4967-8521-b5369d87265a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1016021,
              "key": "d088706c-3eb6-4618-8ef2-9d0f87c67d78",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Introduction to Asynchronous Programming\n\nLets jump right into some introductions. I'll give you a quick tour of Asynchronous Programming and what you'll gain by having a better understanding of these concepts.\n",
              "instructor_notes": ""
            },
            {
              "id": 1016022,
              "key": "747838aa-33fb-4a8b-92d5-197bd7374034",
              "title": "ND032 JSND L0 A03 Introduction To Asynchronous Programming",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-Xl9_CWBrBY",
                "china_cdn_id": "-Xl9_CWBrBY.mp4"
              }
            },
            {
              "id": 1016023,
              "key": "a308f7fd-a9c6-4bb8-9095-ccec10c69fa9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\nThe JavaScript programs we’ve written so far run one function at a time and each function runs to completion before calling the next function in the chain. Programming in this synchronous way is fairly easy to reason about—write the logic for one task at a time and then run the tasks in order.\n\nThings get more complicated though when tasks don't just run sequentially. Either for efficiency reasons or to handle work done on another machine, we have to learn to manage when each step of our programs happen in a much more intentional way. This is the crux of asynchronous programming—it's all about “whenever [x] finishes, do [y]” or “while [x] is waiting, proceed with [y]”—and this scenario happens all the time in real life. Some of the places asynchronous code is necessary are:\n\n- APIs (Asynchronous Programming Interfaces)\n- Any external processes\n- Long-running processes (reading files, uploading files, etc…)\n- Writing more efficient programs that better utilize CPU\n\nThe ability to write asynchronous programs is becoming commonplace in all modern languages, and the concepts you learn in this course will translate well to any language you end up using.\n",
              "instructor_notes": ""
            },
            {
              "id": 1033514,
              "key": "d10fea86-f04c-44ed-a321-cc500adf42c2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5edbd6ec_synchronous-vs.-asynchronous/synchronous-vs.-asynchronous.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d10fea86-f04c-44ed-a321-cc500adf42c2",
              "caption": "Synchronous Vs. Asynchronous",
              "alt": "Synchronous Vs. Asynchronous",
              "width": 1286,
              "height": 594,
              "instructor_notes": null
            },
            {
              "id": 1036840,
              "key": "5bd5adc9-1a6f-4ce8-9937-cacfc8ad855a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Introduction to Asynchronous Programming Quiz",
              "instructor_notes": ""
            },
            {
              "id": 1036841,
              "key": "8dbf3c58-7d35-4b92-8a5d-1cb8701d99f8",
              "title": "Asynchronous Programming",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8dbf3c58-7d35-4b92-8a5d-1cb8701d99f8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "From what we learned in this course, which of the following actions require asynchronous programming?",
                "answers": [
                  {
                    "id": "a1592412832670",
                    "text": "Reading/Writing to files",
                    "is_correct": true
                  },
                  {
                    "id": "a1592412887546",
                    "text": "Writing better CSS",
                    "is_correct": false
                  },
                  {
                    "id": "a1592412904015",
                    "text": "Compiled languages",
                    "is_correct": false
                  },
                  {
                    "id": "a1592412964608",
                    "text": "Requests to Application Programming Interfaces",
                    "is_correct": true
                  },
                  {
                    "id": "a1592412996120",
                    "text": "Long running processes that happen on another server",
                    "is_correct": true
                  },
                  {
                    "id": "a1592413020907",
                    "text": "Writing more efficient HTML",
                    "is_correct": false
                  },
                  {
                    "id": "a1592413058390",
                    "text": "Writing programs that make better use of time and CPU",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1036844,
              "key": "bf52b15f-95c7-4e1c-b18f-33a9b4597444",
              "title": "Asynchronous Programming",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bf52b15f-95c7-4e1c-b18f-33a9b4597444",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Have you written any asynchronous programs before taking this course? Reflect on what your experience has been with asynchronous events up to now. Maybe it was confusing or frustrating, or perhaps you got the code to work but couldn't visualize what was going on. If you've never written an asynchronous program, what are your preconceptions about how easy or difficult it is?"
              },
              "answer": {
                "text": "This answer is just for you, being aware of where you are starting might help you make faster progress in the course! It might also be fun to look back at this answer once you've completed the course material!",
                "video": null
              }
            }
          ]
        },
        {
          "id": 1014056,
          "key": "ee778443-794c-4a27-9e30-b01f8ec3337b",
          "title": "Exercise: Asynchronous Programming",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ee778443-794c-4a27-9e30-b01f8ec3337b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1032912,
              "key": "7fb2c7d0-9bfe-4755-9e00-556bf0da34bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Asynchronous JavaScript Practice. \nThis is a quick peek ahead into some of the syntax we'll be going over in the next lesson.\n\n\n### Challenge 1\nMove the setTimeout after the console log, does that change the outcome? \n\n### Challenge 2\nEdit the time elapsed between \"Hello\" and \"World\" appearing on the screen\n\n### Challenge  3 \nEdit the message being sent to have three parts:\n- Part 1: \"I'm \" - shows up immediately\n- Part 2: \"async\" - shows up 2 seconds after \"I'm\"\n- Part 3: \"...hronous!\" - shows up 4 seconds after \"async\"\n\n### Extra Challenge \nWrite a function to make each dot appear one second after the other.\n\n\n## Reminder \nTo run a JavaScript file in the Workspaces use `node`\n\n```bash\nnode asynchronous_hello_world.js\n```",
              "instructor_notes": ""
            },
            {
              "id": 1014070,
              "key": "a56c14bf-b895-4156-bebd-207d218129f4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1014056xGENERICqcrth68r",
              "pool_id": "webterminal",
              "view_id": "generic-sbpph",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/asynchronous_hello_world.js"
                    ],
                    "showFiles": true,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1029488,
          "key": "005e7663-c256-4610-9d43-e5ce3a549112",
          "title": "Solution: Asynchronous Programming",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "005e7663-c256-4610-9d43-e5ce3a549112",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029489,
              "key": "e7e3fdc3-26f8-4e29-a9fa-309b373eaeff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Asynchronous Introduction Exercise Solution\n\n### CHALLENGE 1\n\nMove the `setTimeout` after the console log, Does that change the outcome? \n\n```\nconst printHelloWorld = () => {\n  console.log(\"Hello \");\n  setTimeout(console.log, 2000, \"World\");\n}\n\nprintHelloWorld();\n```\n\nTypically, changing the order of lines of code changes the outcome -- did you expect it to in this case? It doesn't change the outcome because asynchronous actions actually change the order in which our code runs, so that it might not go line by line anymore. The `setTimeout` method call has changed the way our code runs. We will cover the specifics of how in the next lesson.\n\n### CHALLENGE 2\nEdit the time elapsed between \"Hello\" and \"World\" appearing on the screen \n\n```\nconst printHelloWorld = () => {\n  setTimeout(console.log, 5000, \"World\");\n  console.log(\"Hello \");\n}\n\nprintHelloWorld();\n```\n\nDid you figure out how? And perhaps more importantly, did you figure out how time is represented? The `setTimeout` method takes three arguments, and the middle one looks like it could be a time. But it can't be in seconds or minutes or epoch time, those don't fit. When using JavaScript timer methods, the time is always given in milliseconds. So this program waits 2 seconds (2000 milliseconds) and here I've edited it to wait 5 seconds (5000 milliseconds).\n\n### CHALLENGE 3\n\nEdit the message being sent to have three parts:\n\n```\nconst printMessage = (message) => {\n    setTimeout(console.log, 4000, \"...hronous!\")\n}\n\nconst printHelloWorld = () => {\n  console.log(\"I'm \");\n  setTimeout(printMessage, 2000, \"Async\");\n}\n\nprintHelloWorld();\n```\n\nThere are lots of directions you could go with this of course, in this case I added a `console.log()` before and after the asynchronous call to print out the string \"Hello there, World\"",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1014057,
          "key": "acc933e7-4b9b-492d-8505-cf1863fb1640",
          "title": "Why Asynchronous Programming Is Important",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "acc933e7-4b9b-492d-8505-cf1863fb1640",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1016024,
              "key": "e86cdb25-e000-4c66-a5df-5a266955d1ef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Why Learn Asynchronous Programming?",
              "instructor_notes": ""
            },
            {
              "id": 1016025,
              "key": "9916ee4c-aeac-4083-ad6f-5016d6176b7f",
              "title": "ND032 JSND L0 A04 Why Asynchronous Programming Is Important",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kxPgTLmYqD8",
                "china_cdn_id": "kxPgTLmYqD8.mp4"
              }
            },
            {
              "id": 1016026,
              "key": "4b771d6b-56b5-4003-901c-85860d532f3d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\nManaging asynchronous code is a vital skill for intermediate level developers to begin, and one that even advanced developers will have to continue practicing to master. The most immediately relevant and practical use will probably be in dealing with API responses. Still, the possibilities are truly endless, and if applied well, asynchronous code will allow you to write more sophisticated, efficient, and large-scale programs.",
              "instructor_notes": ""
            },
            {
              "id": 1036845,
              "key": "474d3886-7278-47dc-935a-d029edbea6d7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz",
              "instructor_notes": ""
            },
            {
              "id": 1036846,
              "key": "be3b2c67-c269-4e5c-984a-a4814e60f692",
              "title": "Why Asynchronous Programming is Important",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "be3b2c67-c269-4e5c-984a-a4814e60f692",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these are reasons why learning asynchronous programming will help you?  Select all that apply \n",
                "answers": [
                  {
                    "id": "a1592413673867",
                    "text": "Asynchronous programming is a skill required of a professional developer",
                    "is_correct": true
                  },
                  {
                    "id": "a1592413828082",
                    "text": "Asynchronous programming is a general concept that will be useful no matter what language you work with",
                    "is_correct": true
                  },
                  {
                    "id": "a1592413888774",
                    "text": "Asynchronous programming is a skill that will increase your ability to get a job by increasing your UI design chops",
                    "is_correct": false
                  },
                  {
                    "id": "a1592413932471",
                    "text": "Asynchronous programming is only going to become more common and important",
                    "is_correct": true
                  },
                  {
                    "id": "a1592413949378",
                    "text": "Asynchronous programming is a necessary part of the structure of a programming language and a base concept in computer science",
                    "is_correct": false
                  },
                  {
                    "id": "a1592413998771",
                    "text": "Asynchronous programming is built into JavaScript so it is especially important for JavaScript developers to understand it",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1036847,
              "key": "171a8ec2-8a0c-4c66-8c71-a6c126359786",
              "title": "Benefits of Asynchronous Programming",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "171a8ec2-8a0c-4c66-8c71-a6c126359786",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Of the benefits we discussed in the video above - which one are you most hoping to get out of this course? Or, is there a reason we didn't discuss that makes you interested in Asynchronous programming?"
              },
              "answer": {
                "text": "Thanks for answering that! Whichever benefit you hope to achieve, I hope that the course material and resources provided will help you reach your goal!",
                "video": null
              }
            }
          ]
        },
        {
          "id": 1021300,
          "key": "fbb61384-eac5-46ec-b940-c51c3a10876b",
          "title": "Tools, Environment & Dependencies",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fbb61384-eac5-46ec-b940-c51c3a10876b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1021301,
              "key": "c361c59e-aac9-4352-9c4a-494860aab973",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Tools, Environment & Dependencies\n\nThis course focuses 100% on vanilla JavaScript, so there aren't many dependencies! Below you will find some options that might come in handy for running the code you see here in the course. \n\n#1 - You can run code in the Udacity workspaces. \n#2 - You can run code locally on your machine. \n#3 - You can run code in an online code editor like [ES6Console](https://es6console.com/). \n\n#### Running Code Locally\nFor these examples it will be helpful to have a fairly up to date version of Node. To see the latest stable version, go to [NodeJS.org/downloads](https://nodejs.org/en/download/)\n\nTo check if you have Node installed and see what version you are running, open a terminal and run \n```bash\nnode --version\n```\n\nOr, if you are using the node version manager [NVM](https://github.com/nvm-sh/nvm), run \n```bash\nnvm current\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1014059,
          "key": "73c748b5-964e-4079-a2b4-5993d595d08d",
          "title": "Project: UdaciRacer Simulator",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "73c748b5-964e-4079-a2b4-5993d595d08d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1016028,
              "key": "87d4e70d-1cd3-41be-9ced-2c1d6fdb9c58",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## UdaciRacer Project\n\nLets take a look at a finished example of the project and what you will be building. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1016303,
              "key": "b22eb2ee-87b8-4c41-8a71-47d4608e593a",
              "title": "ND032 JSND L0 A05 Project UdaciRacer Simulator V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "PvST-nJPZ6g",
                "china_cdn_id": "PvST-nJPZ6g.mp4"
              }
            },
            {
              "id": 1036836,
              "key": "2974e53e-71d3-4e83-9053-c57b0c8d913a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Project Walkthrough\n\nThe project for this course is to complete an interactive racing simulation game in which a user will select options for their race course and racer. The user has control over the acceleration of their racer by clicking a button, pretty much the name of the game is madly click the button as fast as you can and you should see your racer rise to the top of the leader board. Completing the functionality will involve all the skills you learn in this course, but the result will be a fun game that you can actually play and show your friends. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1014060,
          "key": "8a02c55b-0605-491e-bac9-c106b3aa2f6a",
          "title": "Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8a02c55b-0605-491e-bac9-c106b3aa2f6a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1021321,
              "key": "b978f47d-c506-4c2a-81d6-e81d971d5e4f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap\n\nHere is an overview of what we went over in this lesson. At the end of every lesson, you will find one of these sections as a quick guide to the concepts covered.",
              "instructor_notes": ""
            },
            {
              "id": 1021320,
              "key": "858dd2b5-87d2-44d9-8f8e-eb46a318bf54",
              "title": "ND032 JSND L0 A06 Lesson Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jCPgHZUCqOM",
                "china_cdn_id": "jCPgHZUCqOM.mp4"
              }
            },
            {
              "id": 1033518,
              "key": "c1ff09bd-acbc-44d8-9653-21b4d12836fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### What We Covered In This Lesson",
              "instructor_notes": ""
            },
            {
              "id": 1033516,
              "key": "ceaaef03-9956-49f4-942b-e101ae53b2b6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5edbe59b_jsndc3-l0-lesson-outro/jsndc3-l0-lesson-outro.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ceaaef03-9956-49f4-942b-e101ae53b2b6",
              "caption": "",
              "alt": "Lesson Summary",
              "width": 674,
              "height": 334,
              "instructor_notes": null
            },
            {
              "id": 1016304,
              "key": "a13ae818-7bea-40cc-8900-94e02ae59b50",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points To Remember About Asynchronous Programming\n\n- Asynchronous patterns are used for tasks like API requests, file reading and writing, and in general for requests to external processes\n- Asynchronous programming will help us write code that runs faster by being more efficient with the computing power available\n- Writing asynchronous programs is a necessary skill for intermediate level programming jobs \n- Asynchronous syntax is now available in every modern programming language, so these concepts translate well to any language you may find yourself working with",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1014061,
          "key": "8d50040b-baf9-4b2c-b793-833078046165",
          "title": "Good Luck!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8d50040b-baf9-4b2c-b793-833078046165",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1016029,
              "key": "a1673533-0357-4316-b931-cbdfffc20bb3",
              "title": "ND032 JSND L0 A07 Good Luck V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RZ8BG8sRcJw",
                "china_cdn_id": "RZ8BG8sRcJw.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}