{
  "data": {
    "lesson": {
      "id": 1015415,
      "key": "ef1c28b0-bcf6-40f8-8aa1-0b830c2a78d8",
      "title": "Sequencing Events - Promises",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "This lesson goes from basic Promise syntax all the way to implementing Promises, Fetch, and Promise methods. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/ef1c28b0-bcf6-40f8-8aa1-0b830c2a78d8/1015415/1594150388977/Sequencing+Events+-+Promises+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/ef1c28b0-bcf6-40f8-8aa1-0b830c2a78d8/1015415/1594150385184/Sequencing+Events+-+Promises+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1015417,
          "key": "a5e8df04-d932-47a1-b8aa-52e3b773239c",
          "title": "Lesson Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5e8df04-d932-47a1-b8aa-52e3b773239c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1019903,
              "key": "158da6b9-1cd0-4135-9879-69255001b651",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Sequencing Events with Promises\n\n\n### Overview",
              "instructor_notes": ""
            },
            {
              "id": 1019904,
              "key": "79d94a67-d4e7-4911-b2f4-bb675bc2b903",
              "title": "ND032 JSND L2 A01 Introduction V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LQe-y839ySI",
                "china_cdn_id": "LQe-y839ySI.mp4"
              }
            },
            {
              "id": 1019905,
              "key": "a0315272-6ca2-4333-8af8-3829fc38bfeb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Concepts\nIn this lesson we will cover the following:\n\n- Introduction to Promises\n- Promise chaining\n- Promises best practices and error handling\n- Promise implementations with Fetch\n- Advanced Promise syntax\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1035348,
              "key": "89d2af70-1391-41b7-959c-ec916574c0b0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ee246c1_jsndc3-l2-overview/jsndc3-l2-overview.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/89d2af70-1391-41b7-959c-ec916574c0b0",
              "caption": "",
              "alt": "",
              "width": 830,
              "height": 352,
              "instructor_notes": null
            },
            {
              "id": 1035347,
              "key": "fd20c46c-b0e2-41d6-ad3b-9ce97ae6b0b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Resources\nHere is a list of supporting resources you might find helpful as you start this lesson:\n- The MDN introduction to promises: [Graceful asynchronous programming with Promises\n](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises)\n- If you're a pictures person, this site creates visuals for promises: [Promisees](http://bevacqua.github.io/promisees/)\n- This article tries to get the basics of Promises into a 5 min read: [JavaScript: Learn Promises](https://codeburst.io/javascript-learn-promises-f1eaa00c5461)\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1019906,
          "key": "dee028a4-d648-4899-8f01-6a7ff97b5302",
          "title": "Introduction to Promises",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dee028a4-d648-4899-8f01-6a7ff97b5302",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1019907,
              "key": "71871d0c-6b7b-4ccf-aa7d-61bc5c9bf996",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction to Promises\n\nLet's kick off this lesson with a good look at Promise syntax, particularly the basic requirements and new keywords. Don't worry if it looks foreign to you right now - by the end of this lesson promises will look as familiar as For loops. \n\n## Basic Syntax\n\nThis is the syntax for a basic promise. Try commenting in the resolve and reject methods in the code below to see the different outcomes when you run the program.\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1035419,
              "key": "ef7c1694-d5e1-4df4-80a7-6b5b3b3dae82",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1019906xGENERICr4ezlwvj",
              "pool_id": "webterminal",
              "view_id": "generic-58e5j",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/example_promise.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 1036752,
              "key": "d8416cf5-7dc0-4483-9e62-2d69597d215f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There are a few things I want you to get out of seeing this code right now: \n1. You can run this code and see that A always happens, this base functionality always runs. \n2. B or C display based on whether you comment in the resolve or reject cases - interesting right?\n3. There are some new words here, the ones to pay attention to are: **resolve**, **reject**, **then**, and **catch**\n\nIf the rest of the syntax looks overwhelming or there are lots of question marks going off in your brain - that's ok! This is just step one and I'll explain the concepts above in the next video.\n",
              "instructor_notes": ""
            },
            {
              "id": 1035417,
              "key": "359974f4-5946-4829-a929-8162548a1861",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\n## States of a Promise",
              "instructor_notes": ""
            },
            {
              "id": 1019908,
              "key": "5f5efbbf-1ca6-489e-b792-4e7e89aa9cac",
              "title": "ND032 JSND L2 A02 States Of A Promise",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lHnT25nvvo8",
                "china_cdn_id": "lHnT25nvvo8.mp4"
              }
            },
            {
              "id": 1019909,
              "key": "579402d5-a06d-4417-81ca-b05d842a8700",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promise States Recap\n\nA promise starts off with an initial request for something - data, a webpage, or any action that will take place off the main thread. Once we make the request, the promise is in a state called **Pending**. In other words, whether the request will be successful or fail is unknown and the program is waiting for a response. **Promises are asynchronous**, so during the pending state, the program will continue on from the promise to complete the rest of the program. \n\nWhen a response comes back from the request, it will either have succeeded or failed. If it failed, (for example an API response came back with a 500 error) the promise moves into a state called **Rejected** and the logic held in the `.catch()` clause will run. If the request succeeds, the promise state is called **Resolved** or fulfilled, and the logic held in the `.then()` statement is run. When a promise is no longer pending, whether it is rejected or resolved, it is **settled**. \n\nThese three **states of a promise** describe the life cycle of a promise and allow us to sequence events in our programs and handle the potential responses from a request. ",
              "instructor_notes": ""
            },
            {
              "id": 1035434,
              "key": "cfc71a5a-01df-4ae9-8a03-325a65c89681",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ee15686_jsndc3-l2-promise-states/jsndc3-l2-promise-states.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cfc71a5a-01df-4ae9-8a03-325a65c89681",
              "caption": "Promise States",
              "alt": "Promise States",
              "width": 658,
              "height": 403,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 1019910,
          "key": "bc38c63c-826b-42a6-b1ed-7061530ab92a",
          "title": "Promise Chaining",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bc38c63c-826b-42a6-b1ed-7061530ab92a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1019911,
              "key": "986bd36c-5c1a-42a7-92e1-e3e879e0dba8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Promise Chaining\n",
              "instructor_notes": ""
            },
            {
              "id": 1019912,
              "key": "db2bb232-30dd-4179-8006-4e78da0befdb",
              "title": "ND032 JSND L2 A03 Promise Chaining",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "w1Wui7PVOWw",
                "china_cdn_id": "w1Wui7PVOWw.mp4"
              }
            },
            {
              "id": 1019913,
              "key": "e10e7a01-1103-4a52-b9a7-ff72afb69383",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promise Chaining Recap",
              "instructor_notes": ""
            },
            {
              "id": 1020185,
              "key": "1de0c198-ff04-4497-ae6a-5e56152b2650",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this lesson we learned that promise **chaining** refers to building then clauses off of a resolved promise. Here are some of the main points: \n- We can create as many `then` clauses as we need \n- Then clauses run in the order they are chained\n- If data is returned from the promise resolution, it is passed as an argument to the first `then` clause\n- If any of the `then` clauses return data, whatever they return is passed as an argument to the next `then` clause in the chain\n- If there is an error anywhere in the chain, the chain stops and the `catch` clause runs. \n",
              "instructor_notes": ""
            },
            {
              "id": 1020872,
              "key": "4c3ffd20-7bf7-4ddd-8196-a3d21f6019e1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Code Examples\n\nHere are copies of the code examples from the video in case you want to play with them locally. \n\n```\n// ---------------- PROMISE CHAINING WITH DATA & ERRORS \n\nnew Promise((resolve, reject) => {\n    alert('A')\n    resolve(['B', 'C', 'D']);\n    // reject();\n})\n.then((data) => {\n    // throw new Error('Error at B');\n    alert(data.shift());\n    return data;\n})\n.then((data) => {\n    throw new Error('Error at C');\n    alert(data.shift());\n    return data\n})\n.then((data) => {\n    // throw new Error('Error at D');\n    alert(data.shift());\n    return data\n})\n.catch((error) => {\n    console.log(error)\n    alert(error);\n})\n```",
              "instructor_notes": ""
            },
            {
              "id": 1037346,
              "key": "073a5b30-6bbf-46cc-bd39-0e2ed4a2d8de",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Try It Out\n\nYou can try out Promise chaining in the Workspace below.",
              "instructor_notes": ""
            },
            {
              "id": 1037347,
              "key": "a15fb5e7-9768-402a-bc51-ee630e3c3dcb",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1019910xGENERICdjx6edtw",
              "pool_id": "webterminal",
              "view_id": "generic-5isqr",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/chaining_example.js"
                    ],
                    "showFiles": true,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1019914,
          "key": "1e96969e-6ffd-48a1-bb07-8ad80650d987",
          "title": "Promises as the Answer to Callbacks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1e96969e-6ffd-48a1-bb07-8ad80650d987",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1019915,
              "key": "500e4e40-ce45-4b04-b5ce-c2f0c3f4d9a1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Promises as the Answer to Callbacks\n\nNow that we have a good idea of what Promises look like and have a feel for how they work, lets consider how they solve the pain points of Callback Hell we discussed in the last lesson.\n\n## Benefits of Promises\n\nCallbacks start to get difficult with more complex asynchronous flows. Heavily nested callbacks lead to callback hell, but with promises we have a much cleaner syntax - promise chaining! \n\nWhat makes promise chaining so appealing? It might not be obvious at first just how big of an advantage it can be. Promise chaining drastically cleans up the syntax of complex asynchronous flows. But rather than explaining, lets show an example. Here is the callback example code you saw in the previous lesson, re-written here with a promises version so you can compare.\n\n### Nested Callback Chain\n```\nconst mockAPI = (returnValue) => (arg, cb) => {\n    setTimeout(() => cb(returnValue), 2000);\n};\n\nconst fetchSession = mockAPI({ id: \"123765\" });\nconst fetchUser = mockAPI({ firstname: \"Bob\" });\nconst fetchUserFavorites = mockAPI([ \"lions\", \"tigers\", \"bears\" ]);\n\nconst runCallbacks = () => {\n    fetchSession(\"session-id\", (session) => {\n        fetchUser(session, (user) => {\n            fetchUserFavorites(user, (favorites) => {\n                console.log(favorites);\n            });\n        });\n    });\n};\n```\n\n### Promise Chain\n```\nconst mockAPI = (returnValue) => (arg, cb) => {\n    setTimeout(() => cb(returnValue), 2000);\n};\n\nconst fetchSession = mockAPI({ id: \"123765\" });\nconst fetchUser = mockAPI({ firstname: \"Bob\" });\nconst fetchUserFavorites = mockAPI([ \"lions\", \"tigers\", \"bears\" ]);\n\nconst runPromises = () => {\n    return fetchSession(\"session-id\")\n        .then(session => fetchUser(session))\n        .then(user => fetchUserFavorites(user))\n        .then(favorites => console.log(favorites))\n        .catch(error => console.log(\"oops!\"));\n};\n```\n \n",
              "instructor_notes": ""
            },
            {
              "id": 1023094,
              "key": "c9f61a26-30ee-4a6a-b740-5e8f090ed466",
              "title": "Benefits of Promise Chaining",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c9f61a26-30ee-4a6a-b740-5e8f090ed466",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Compare the promise and callback versions of the program above. From the list below, which items do you think are benefits of using promises?",
                "answers": [
                  {
                    "id": "a1589857103832",
                    "text": "Less Code",
                    "is_correct": true
                  },
                  {
                    "id": "a1589857130087",
                    "text": "Faster runtime",
                    "is_correct": false
                  },
                  {
                    "id": "a1589857135474",
                    "text": "Fewer variables",
                    "is_correct": false
                  },
                  {
                    "id": "a1589857158646",
                    "text": "Better readability",
                    "is_correct": true
                  },
                  {
                    "id": "a1589857169657",
                    "text": "Works on old browsers and legacy code",
                    "is_correct": false
                  },
                  {
                    "id": "a1591219610454",
                    "text": "More explicit error handling",
                    "is_correct": true
                  },
                  {
                    "id": "a1591219617749",
                    "text": "Tighter flow control because of promise states",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1023095,
              "key": "2c34f937-74f0-408c-8c41-ed49446fdc20",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Do I Still Need Callbacks?\n\nWith all this discussion of how Promises solve the pain points of callbacks, you might begin to wonder if we need callbacks anymore. But we absolutely do! Remember that callbacks are a primary way to chain functionality in JavaScript, so you will still see callbacks around all the time. Like the ES6 Array Methods we discussed in depth in the Functional JavaScript course, or to make use of ```setTimeout``` and other built in JavaScript methods, callbacks are an essential part of the language and are not going anywhere. Promises are simply **syntactic sugar** - meaning that they are just a convenient set of key words that do not add anything fundamentally new to the language. So, where we used to reach for callbacks for *everything*, we now have another option for longer asynchronous flows. \n\n**But are callbacks still a good option for asynchronous code?** This comes down mostly to personal taste, but I would say yes. For short and simple asynchronous logic, I think callbacks are still an option. But I think it is safe to say that callbacks should no longer be used for long, complex, or multi-step asynchronous logic chains. That is what Promises were made for, so to not use them would be missing out on the perfect opportunity for cleaner syntax. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1019916,
          "key": "d005deca-a0a6-42f1-a75e-c7e068ac6835",
          "title": "Exercise: Promises I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d005deca-a0a6-42f1-a75e-c7e068ac6835",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020885,
              "key": "95d088b6-0656-4578-a442-f98d2989652d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1019916xGENERICdzittrb3",
              "pool_id": "webterminal",
              "view_id": "generic-3lqdn",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/PromiseChallenge2.js",
                      "/home/workspace/PromiseChallenge1.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1031971,
          "key": "eed7df7e-e48c-4545-836b-1b0d2082a620",
          "title": "Solution: Promises I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eed7df7e-e48c-4545-836b-1b0d2082a620",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1031972,
              "key": "c466bef4-7f40-4608-b352-8b92341b3b1e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## Challenge 1 Solution\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1031973,
              "key": "a40a78a7-f3e9-4a59-b2b1-b70afb2b81b4",
              "title": "ND032 JSND L2 A04 Solution Promises Practice I Challenge 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RphwTDwxqUI",
                "china_cdn_id": "RphwTDwxqUI.mp4"
              }
            },
            {
              "id": 1031976,
              "key": "8216e3cd-f636-41c5-9758-76724d805e29",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Code Solution:\n\n```\nnew Promise((resolve, reject) => {\n    resolve(alerts)\n})\n.then(data => {\n    const unread = data.filter(d => d.readStatus === false);\n   \n    if (unread.length === 0) {\n        throw new Error('There are no unread alerts');\n    }\n    return unread;\n})\n// you can name this whatever you want, so make it descriptive!\n.then(unreadAlerts => {\n    // might be tempted to save this into a variable, but you don't have to\n    return unreadAlerts.filter(alert => {\n        if(alert.type === \"system\") {\n            printSystemAlert(alert)\n        } else {\n            return true\n        }\n    })\n})\n.then(filteredAlerts => filteredAlerts.map(alert => {\n    if(alert.severity === \"critical\") {\n        console.error(alert.message)\n    } else {\n        console.log(`${alert.severity} ${alert.type} alert: ${alert.message}`)\n    }\n}))\n```",
              "instructor_notes": ""
            },
            {
              "id": 1031974,
              "key": "75841a07-0d62-4fd8-ad02-2aa760eeb4d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Challenge 2 Solution",
              "instructor_notes": ""
            },
            {
              "id": 1031975,
              "key": "d78bcca5-fd62-48ae-8c27-8170b04042fc",
              "title": "ND032 JSND L2 A04 Solution Promises Practice II Challenge 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xHztqwvSiCo",
                "china_cdn_id": "xHztqwvSiCo.mp4"
              }
            },
            {
              "id": 1031977,
              "key": "1cf71423-b0f2-4d2a-b884-80b12c23a15b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Code Solution:\n\n```\nnew Promise((resolve, reject) => {\n    resolve(data)\n})\n.then(data => {\n    // Spelling matters! \n    // But just as an extra, watch out for this other potential problem in JavaScript\n    // if (data.soucreId !== null) {\n    if (data.soucreId && data.soucreId !== null) {\n        return data;\n    }\n    // when the if statement returns something, there is no need for an else statement\n    throw new Error('No source was defined');\n})\n.then(data => {\n    const { intVal } = data\n    if (intVal > 0 && intVal !== null) {\n        const category = data.intVal.toString().split()[0];\n        setCategory(category, data.id);\n        return data;\n    } else {\n        throw new Error('No integer value was provided');\n    }\n})\n.then(data => console.log(data.id, data.message))\n.catch((error) => {\n    console.log(error)\n})\n```\n#### Error Locations\nBlock 1: Spelling error causes error to be thrown\nBlock 2: We were so busy setting the category we forgot to return the data, which causes an error in the following then chain when `data` does not exist",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1019919,
          "key": "2e66eda8-f064-4e63-8a31-e1628bab1eae",
          "title": "Quizzes: Promises  I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2e66eda8-f064-4e63-8a31-e1628bab1eae",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1023097,
              "key": "06841d68-ff38-4bd2-92b8-152747b4f3aa",
              "title": "What's wrong with this?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "06841d68-ff38-4bd2-92b8-152747b4f3aa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Look at this promise chain -- what is wrong?\n```\nnew Promise((resolve, reject) => {\n    resolve([255, 254, 256, 257]);\n})\n.then((data) => {\n    data.push(253)\n    return data;\n})\n.then((data) => {\n    data.push(252)\n    return data\n})\n.then((data) => {\n    console.log(data)\n})\n```",
                "answers": [
                  {
                    "id": "a1589859017208",
                    "text": "Missing a return statement in one of the then chains",
                    "is_correct": false
                  },
                  {
                    "id": "a1589859075150",
                    "text": "One then chain will trigger a type error",
                    "is_correct": false
                  },
                  {
                    "id": "a1589859078959",
                    "text": "Missing a `catch` clause",
                    "is_correct": true
                  },
                  {
                    "id": "a1589859082264",
                    "text": " Missing a `finally` clause",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1032068,
              "key": "412813bc-7f7b-4e53-aded-189e6af0fb3f",
              "title": "States of a Promise",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "412813bc-7f7b-4e53-aded-189e6af0fb3f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the promise state to its description"
                },
                "concepts_label": "State",
                "answers_label": "Description",
                "concepts": [
                  {
                    "text": "I/O task was initiated, but no response has been received back yet",
                    "correct_answer": {
                      "id": "a1591216016918",
                      "text": "PENDING"
                    }
                  },
                  {
                    "text": "I/O task was initiated, received a success response ",
                    "correct_answer": {
                      "id": "a1591216045276",
                      "text": "RESOLVED"
                    }
                  },
                  {
                    "text": "I/O task was initiated, received a failure response ",
                    "correct_answer": {
                      "id": "a1591216048050",
                      "text": "REJECTED"
                    }
                  },
                  {
                    "text": "I/O task was initiated, received a response ",
                    "correct_answer": {
                      "id": "a1591216051177",
                      "text": "FULFILLED"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1591216170736",
                    "text": "RESOLVED"
                  },
                  {
                    "id": "a1591216048050",
                    "text": "REJECTED"
                  },
                  {
                    "id": "a1592425152245",
                    "text": "REJECTED"
                  },
                  {
                    "id": "a1591216141313",
                    "text": "PENDING"
                  },
                  {
                    "id": "a1591216016918",
                    "text": "PENDING"
                  },
                  {
                    "id": "a1592425156196",
                    "text": "FULFILLED"
                  },
                  {
                    "id": "a1591216045276",
                    "text": "RESOLVED"
                  },
                  {
                    "id": "a1591216051177",
                    "text": "FULFILLED"
                  }
                ]
              }
            },
            {
              "id": 1032166,
              "key": "69bf8c04-3972-4ae9-b98c-c4c9aec37dcf",
              "title": "Promise Chaining",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "69bf8c04-3972-4ae9-b98c-c4c9aec37dcf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are true about Promise chaining?",
                "answers": [
                  {
                    "id": "a1591216539143",
                    "text": "You can chain as many `catch` statements as you want",
                    "is_correct": false
                  },
                  {
                    "id": "a1591217722577",
                    "text": "You can chain as many `then` statements as you want",
                    "is_correct": true
                  },
                  {
                    "id": "a1591217734391",
                    "text": "You can add `catch` statements between any `then` statements",
                    "is_correct": true
                  },
                  {
                    "id": "a1591217778507",
                    "text": "The `finally` statement runs only after all `then` statements have finished",
                    "is_correct": false
                  },
                  {
                    "id": "a1591217820237",
                    "text": "The `finally` statement runs after all other statements have finished",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1037350,
              "key": "dd827cae-184d-472d-8be4-41ce47a62f11",
              "title": "Practice Interview Question",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dd827cae-184d-472d-8be4-41ce47a62f11",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are the advantages of using Promises over Callbacks?\n\n",
                "matchers": [
                  {
                    "expression": "[^/s]+"
                  }
                ]
              }
            },
            {
              "id": 1032168,
              "key": "22e3cd71-1109-44ca-8a07-f6c4cac215e0",
              "title": "What's Wrong with this Code?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "22e3cd71-1109-44ca-8a07-f6c4cac215e0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "There is something wrong with this promise chain - can you find it?\n\n```\n.then(data => {\n    const reformattedData = data.map(d => d.reformat());\n})\n.then(data => {\n    alert(data.shift());\n    return data\n})\n...\n```",
                "answers": [
                  {
                    "id": "a1591218863931",
                    "text": "A `then` statement should not call an external function",
                    "is_correct": false
                  },
                  {
                    "id": "a1591219379970",
                    "text": "The first statement would result in an error thrown and never reach the second statement",
                    "is_correct": false
                  },
                  {
                    "id": "a1591219404714",
                    "text": "The second statement would error out because it did not receive any data",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1036899,
              "key": "14d14696-ae45-4d2f-a19b-5df78f1480b6",
              "title": "Promise Chaining",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "14d14696-ae45-4d2f-a19b-5df78f1480b6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will be logged from this Promise chain?\n```\nnew Promise((resolve, reject) => {\n    resolve(\"This is what success looks like\");\n})\n.then(data => {\n     const dataArr = data.split(\"\");\n     return dataArr.reverse()\n})\n.then(data => data.join(\"\"))\n.then(data => console.log(data))\n.catch(error => {\n    console.log(\"There was an error\")\n})\n```",
                "answers": [
                  {
                    "id": "a1592423101841",
                    "text": "\"There was an error\"",
                    "is_correct": false
                  },
                  {
                    "id": "a1592423545538",
                    "text": "\"This is what success looks like\"",
                    "is_correct": false
                  },
                  {
                    "id": "a1592423558117",
                    "text": "There will be no console logs",
                    "is_correct": false
                  },
                  {
                    "id": "a1592423588830",
                    "text": "\"ekil skool sseccus tahw si sihT\"",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1036900,
              "key": "d4bffe6e-ce72-41bb-8957-ba37d6843c2c",
              "title": "Promise Chaining",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d4bffe6e-ce72-41bb-8957-ba37d6843c2c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will be the output of the code below?\n```\nnew Promise((resolve, reject) => {\n    reject(\"something went wrong!\");\n})\n.then(data => {\n     const dataArr = data.split(\"\");\n     return dataArr.reverse()\n})\n.then(data => data.join(\"\"))\n.then(data => console.log(data))\n.catch(error => {\n    console.log(\"There was an error\")\n})\n```",
                "answers": [
                  {
                    "id": "a1592423848523",
                    "text": "Nothing will console log",
                    "is_correct": false
                  },
                  {
                    "id": "a1592423919805",
                    "text": "There was an error",
                    "is_correct": true
                  },
                  {
                    "id": "a1592423947706",
                    "text": "Something went wrong!",
                    "is_correct": false
                  },
                  {
                    "id": "a1592423966736",
                    "text": "!gnorw tnew gnihtemos",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1036901,
              "key": "20750840-d50f-42d5-a564-50ec1c49b633",
              "title": "Promise Chaining",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "20750840-d50f-42d5-a564-50ec1c49b633",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would this code output?\n```\nnew Promise((resolve, reject) => {\n  resolve(\"This is a new message\");\n})\n.then(data => {\n  const dataArr = data.split(\"\");\n  throw new Error(\"Uh-oh!\");\n  return dataArr.reverse();\n})\n.then(data => data.join(\"\"))\n.then(data => console.log(data))\n.catch(error => {\n    console.log(\"There was an error\");\n    console.log(error.message);\n});\n```",
                "answers": [
                  {
                    "id": "a1592424385346",
                    "text": "egassem wen a si sihT",
                    "is_correct": false
                  },
                  {
                    "id": "a1592424436575",
                    "text": "egassem wen a si sihT, Uh-oh!",
                    "is_correct": false
                  },
                  {
                    "id": "a1592424465562",
                    "text": "There was an error",
                    "is_correct": false
                  },
                  {
                    "id": "a1592424478609",
                    "text": "There was an error, Uh-oh!",
                    "is_correct": true
                  },
                  {
                    "id": "a1592424490611",
                    "text": "egassem wen a si sihT, There was an error, Uh-oh!",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1019920,
          "key": "0554a7c2-8ebf-4025-8443-6f3fd6ab1c9f",
          "title": "Using Promises with Fetch",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0554a7c2-8ebf-4025-8443-6f3fd6ab1c9f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1019921,
              "key": "e3546025-eead-455f-8c05-276509c82b0c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Fetch API\n\nJavaScript had an old syntax for making asynchronous XHTTP requests, but you've probably seen the more modern Fetch syntax for making calls to external resources. Being comfortable with Fetch is a singularly helpful skill and absolutely essential for expanding your abilities as a JavaScript developer. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1019923,
              "key": "f889443c-f4b4-4bdf-ae29-22bf3d7b5207",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Introduction to Fetch",
              "instructor_notes": ""
            },
            {
              "id": 1019922,
              "key": "01bfe532-6535-4147-897a-24864cda3e54",
              "title": "ND032 JSND L2 A05 Intro To Fetch V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7IONfY7o9R4",
                "china_cdn_id": "7IONfY7o9R4.mp4"
              }
            },
            {
              "id": 1019924,
              "key": "80346b44-5939-4dfc-b56f-dffadd383ee0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Video Recap",
              "instructor_notes": ""
            },
            {
              "id": 1019925,
              "key": "149ec82c-5a9a-448a-9182-292d6e71a673",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Fetch Request Code Examples\n\nSometimes its nice to have a reference to important syntax. I am going to walk through an example of a Fetch request performing each of the CRUD actions.\n\n## GET \n```\nfetch('https://url-with-desired-data')\n.then(response => response.json())\n.catch(error => console.log(error))\n```\nGet type requests are the simplest, the only argument you need to provide to the fetch request is the URL where the data is found. Fetch always defaults to this GET request, but there are other options we can supply  to create the other types of requests we might need. \n\n## POST / PUT / PATCH / DELETE\n```\nfetch('https://url-with-desired-data', {\n    method: 'POST', // Other options: PUT, PATCH, DELETE\n    mode: 'cors', // Other options are: 'no-cors', 'same-origin', and the default: 'cors'\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\"data\": \"This is json\"} // body data type must match \"Content-Type\" header\n  })\n.then(response => response.json())\n.catch(error => console.log(error))\n```\nIf you haven't learned about CORS yet don't worry about that part, you will come across it another time, but for now, know that there are more options we could specify here - what I have shown you in this example are just the basic ones that are most common to use and see. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1037357,
              "key": "2c7b7b6f-dc2e-4c5a-ba42-ca4bc797f85f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5eed34ec_jsndc3-l2-fetch/jsndc3-l2-fetch.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2c7b7b6f-dc2e-4c5a-ba42-ca4bc797f85f",
              "caption": "",
              "alt": "Promises with Fetch",
              "width": 634,
              "height": 389,
              "instructor_notes": null
            },
            {
              "id": 1037359,
              "key": "8530bc17-b21d-4637-9754-37538bbd3aac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Try It Out\n\nYou can run the code from the video in the Workspace below.  This code  requires that you use a mock server. To start up the server run:\n```bash\nnode mockserver/index.js\n```\nThen open a **new** terminal window to run the JavaScript code.",
              "instructor_notes": ""
            },
            {
              "id": 1037360,
              "key": "779b7170-3448-475d-ac6a-220b31df8058",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1019920xGENERIC6z8ugofv",
              "pool_id": "webterminal",
              "view_id": "generic-4jrh2",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/fetchExamples.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "SERVER",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1019927,
          "key": "4a1ad82c-1cfd-40a5-ac57-804b1233dfa8",
          "title": "Exercise: Fetch Request Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4a1ad82c-1cfd-40a5-ac57-804b1233dfa8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1036931,
              "key": "329e183b-2a86-48c4-9019-769016fe0711",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Getting Started\n\nThis exercise requires that you use a mock server.  To start up the server run:\n```bash\nnode mockserver/index.js\n```\n\nThen open a **new** terminal window to run the JavaScript code and run your program:\n```bash\nnode fetchChallenge.js\n```",
              "instructor_notes": ""
            },
            {
              "id": 1019928,
              "key": "6a279fe9-37a5-41ec-bc9e-fd0a777cc55a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1019927xGENERICbmhrkhp1",
              "pool_id": "webterminal",
              "view_id": "generic-mcxhv",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [
                      3000
                    ],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/fetchChallenge.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "SERVER",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 1037358,
              "key": "5ae5ba9f-1cbb-4089-ae4b-cd7b5797d8f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Try It Out\n\nYou can run the code from the video in the Workspace below.  This code  requires that you use a mock server. To start up the server run:\n```bash\nnode mockserver/index.js\n```\nThen open a **new** terminal window to run the JavaScript code.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1032760,
          "key": "12fc0691-b79f-4815-bed5-233f8f5895b6",
          "title": "Solution: Fetch Practice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "12fc0691-b79f-4815-bed5-233f8f5895b6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1032761,
              "key": "6cc350a9-ccbe-495d-bd54-8a6de3b1fcbb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Fetch Practice Solution\n\n```\n// Create a GET request to http://localhost:3000\n\nfetch('http://localhost:3000')\n.then(response => response.json())\n.then(response => console.log(response))\n.catch(error => console.log(error))\n\n\n// Create a POST request to http://localhost:3000\nconst postData = { name: \"Alyssa\" }\nfetch('http://localhost:3000', {\n    method: 'POST', \n    mode: 'cors', \n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(postData)\n})\n.then(response => response.json())\n.then(response => console.log(response))\n.catch(error => console.log(error))\n\n\n// Create a PUT request to http://localhost:3000\nconst putData = { name: \"Alyssa\" }\nfetch('http://localhost:3000', {\n    method: 'PUT',\n    mode: 'cors',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(putData)\n})\n.then(response => response.json())\n.then(response => console.log(response))\n.catch(error => console.log(error))\n\n\n// Create a DELETE request to http://localhost:3000\n\nconst deleteData = { name: \"Alyssa\" }\nfetch('http://localhost:3000', {\n    method: 'DELETE',\n    mode: 'cors',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(deleteData)\n})\n.then(response => response.json())\n.then(response => console.log(response))\n.catch(error => console.log(error))\n```\n\nThese examples all have the `mode` and `headers` options included - they were not strictly necessary for the code to work, I just threw them in so that you would get used to seeing them.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1019929,
          "key": "7bbbf603-7d3c-4944-aaf4-233d449f55ef",
          "title": "Promises Best Practices and Error Handling",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7bbbf603-7d3c-4944-aaf4-233d449f55ef",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1019930,
              "key": "12436488-e163-44f6-973a-c4fd4954ede9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Promises Best Practices and Error Handling\n\nOne of the benefits of using Promises is that by constraining us to a small set of syntax, its easier to keep code simple and readable. The simplicity of the promises syntax means that there aren't a lot of best practice rules you have to remember, but there are still a few things we can do to keep our code clean, and a few examples we can learn from of what not to do. \n\n## Functions in Promise Clauses\n\nResolve and reject clauses have the ability to clean up code drastically, but you can still make them messy if you aren't careful. Avoid the temptation to do too much work in a single clause. For instance, if you find yourself declaring a function inside a clause - you might want to move the declaration outside the promise. If you can identify two distinct things happening in a clause, break it into two clauses. There is no limit to the number of then clauses you can write, so don't feel a need to cram too much logic into one.\n\nHere is code from an earlier example, re-written to have too much logic in a `then` statement\n```\nconst categories = [];\nconst currentItem = {};\n\nconst data = {\n    id: \"KDF8D903N\",\n    intVal: 855,\n    message: \"This is a message\",\n    sourceId: \"NotNull\"\n}\n\nnew Promise((resolve, reject) => {\n    resolve(data)\n})\n.then(data => {\n    if (data.soucreId && data.soucreId !== null) {\n        return data;\n    }\n    // when the if statement returns something, there is no need for an else statement\n    throw new Error('No source was defined');\n})\n.then(data => {\n    const { intVal, id } = data\n    if (intVal > 0 && intVal !== null) {\n        const category = data.intVal.toString().split()[0];\n\n        currentItem.id = id;\n        category.toString();\n        if (!categories.find(category => category.value === id)) {\n            categories.push({ value: category, count: 0 })\n        } else {\n            const index = categories.findIndex(category => category.value === id)\n            categories[index].count++\n        }\n        currentItem.category = category.toString();\n        console.log(\"Category assigned!\")\n    } else {\n        throw new Error('No integer value was provided');\n    }\n})\n.catch((error) => {\n    console.log(error)\n})\n```\n\n## You Need a Catch Clause\n\nOne of the biggest ways you can mess up a promise chain is by not creating a catch clause. You haven't seen a single promise without a catch clause in this course yet, because you shouldn't write a promise without one. The problem is that a promise *will still try to run* without a catch clause, but if an error occurs, you'll get an un-handled rejection error - or worse - you might never see it. Promise chains - depending on where they are run - have the potential to \"swallow\" errors, meaning that if an error happens and there is no `catch` to handle it, you might not ever see it. The promise chain will hit the problem, throw an error, but if no one is listening, the program will just move on.\n\nHere is what happens when you don't catch a promise and it encounters an error. Comment in and out the `catch` statement and experiment with the two different types of errors in the `then` clause. Depending on where you run this code you might see a red type error appear, when there is no `catch` clause, this might or might not appear depending on where you run the code. But, if you have the `catch` commented in, you will always get a gray console log statement, because the `catch` is explicitly handling the error.\n\n```\nlet num = null;\n\nnew Promise((resolve, reject) => {\n    resolve(['B', 'C', 'D']);\n    // reject();\n})\n.then(data => {\n    foo\n    // throw new Error('Error at B');\n    console.log(data.shift());\n  \tnum = 5;\n    return data;\n})\n.catch(error => console.log(error))\n.finally(() => console.log(\"I'm running!\"))\n\nsetTimeout(() => {\n  console.log(\"And I'm still running!\", num)\n}, 5000)\n// notice that despite an error in the promise, the code continues running and simply prints the old value of num\n```\n\n## Mixing Promise Chain Methods\nTake a look at this example:\n```\nnew Promise((resolve, reject) => {\n  resolve(\"message\");\n})\n.then(() => {\n    throw new Error(\"Something went wrong\");\n})\n.catch(error => {\n    return \"this is another message\";\n})\n.then(data => {\n    throw Error(\"Now throw another error\");\n})\n.catch(error => console.log(error.message));\n```\n\nThough I don't think this would be considered best practice, it is valid Promise syntax and you might see it around from time to time. To trace what is happening here, an error in a .then statement will cause the **nearest** catch statement to run. Any .then statement after a catch, is considered further logic on that catch. \nSo in this example, we follow these logic steps:\n1. Resolve the Promise and run the first then statement.\n2. First then statement throws an error which triggers the first catch clause\n3. The first catch clause doesn't throw a new error, it just passes a string to the next then. At this point, by returning a string from a catch clause, we have buried the error that caused the catch to run.\n4. The final then clause runs, and itself throws a new error. This error causes the next catch clause to run\n5. The last catch clause runs and console logs the error message\n",
              "instructor_notes": ""
            },
            {
              "id": 1026734,
              "key": "858fead6-319c-403f-b861-f4098619ed67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Better Catch Clauses\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1026733,
              "key": "ea18f896-027e-4780-8be4-56dc486a6160",
              "title": "ND032 JSND L2 A06 Better Catch Clauses V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "S9CdPzyZogo",
                "china_cdn_id": "S9CdPzyZogo.mp4"
              }
            },
            {
              "id": 1026735,
              "key": "b1b7a2c6-77b6-41c2-8ea3-8660d995aafe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Better Catch Clauses Recap\nIn the video we learned that we can handle errors in greater detail while still keeping things neat by writing then clauses off of the catch clause. We also discussed how error handling is important to any app and that we can handle errors better for our users by re-phrasing or creating custom functionality around specific errors JavaScript gives back to us. \n\n## Other Resources\n- Error handling with promises gone wrong: [Error handling in long Promise chains](https://medium.com/@arthurxavier/error-handling-in-long-promise-chains-155f610b5bc6)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1019917,
          "key": "093b7419-e833-4736-8bc6-a1cf299520a1",
          "title": "Promises Helpful Tips",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "093b7419-e833-4736-8bc6-a1cf299520a1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1019918,
              "key": "54f33c74-a89f-4524-8a71-2695d5407a74",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Helpful Tips\n\nWhen working with Promises there are quite a few things that get people confused, even after taking a tutorial - or even if they've been using Promises for a while. Lets take a look at some of these gotchas:\n\n## Promise chaining across function calls\n\nWe've gone through a number of examples now where our then statements were all neatly in a row under the promise. But that is not always how they will be arranged. Often, then clauses will call other functions in our app, or chained then clauses might be separated across many lines or even files. Sometimes beginners get the idea that promise chaining works because the chains are in line with each other, and it can be confusing at first when the chain is broken up throughout the program. So lets see an example and get used to following a promise chain even if its scattered across many functions. \n\n```\nconst genericAPIrequest = () => {\n   return new Promise((resolve, reject) => {\n        resolve({body: \"My test data\"})\n    })\n}\n\ngenericAPIrequest().then(data => {\n    console.log(data);\n}).catch(error => console.log(error));\n\n```\n\nSo in the code above, see how the function `genericAPIrequest` **returns a Promise**. Any function that returns a Promise, whether its one we make, or that comes as part of a library, or is otherwise abstracted away like with `fetch`, we have to build our then and catch statements off of the *result* of that function. \n\nPut another way, the function itself is not a Promise, so we can't do this:\n```\ngenericAPIrequest.then(data => {\n    console.log(data);\n}).catch(error => console.log(error));\n```\nBut rather, we have to call genericAPIrequest and build our then statement off of the result. In your mind, you can replace the genericAPIrequest call with the thing it returns, if we do that, it looks like this:\n```\nnew Promise((resolve, reject) => {\n    resolve({body: \"My test data\"})\n}).then(data => {\n    console.log(data);\n}).catch(error => console.log(error));\n```\n\nAnd that looks exactly like what we've been doing all along. This is how it works to chain off of Promises that are returned from other functions, how we dealt with `fetch` is a good example here.\n\n\n## Remember the Return\n\nIt might sound silly, but this mistake gets everyone eventually, especially if you are using automatic returns in arrow functions. I myself have fallen into this trap many times, so I'm going to say it here to be very clear: a then statement passes information to the next then in the chain by returning a value. If you don't return anything, your next then statement will try to run without data, which will most likely cause an error and the catch clause will be called. \n\nHere is where this mistake often gets me. I start off with a Promise chain that is using the automatic return rule.\n```\nnew Promise((resolve, reject) => {\n    resolve(\"This is a message\");\n})\n.then(data => data.split(\" \"))\n.then(data => data[0])\n.then(data => console.log(data))\n.catch(err => console.error(err));\n```\nBut then, I need to go back and make a quick edit - maybe even just add a console log to see what is going on in the middle of the chain:\n```\nnew Promise((resolve, reject) => {\n    resolve(\"This is a message\");\n})\n.then(data => {\n  // do some more logic\n  data.split(\" \")\n})\n.then(data => data[0])\n.then(data => console.log(data))\n.catch(err => console.error(err));\n```\n\nAnd I forget to add the extra return, now this Promise gives me the following error:\n```\nerror: TypeError: can't access property 0, data is undefined\n```\n\nAny error like this is a good indication that data, or at least not the data you wanted, is being passed all the way through the chain.\n\nSo here is the code with the fix:\n```\nnew Promise((resolve, reject) => {\n    resolve(\"This is a message\");\n})\n.then(data => {\n  // do some more logic\n  return data.split(\" \")\n})\n.then(data => data[0])\n.then(data => console.log(data))\n.catch(err => console.error(err));\n```\nAt least its a quick fix! This mistake is easy to make and easy to skip over when you've been looking at the same code for a while, but now you know what kind of error to watch out for.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1019931,
          "key": "de76c3af-4b69-4f92-aaf8-4f5048373585",
          "title": "Exercise: Promises II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "de76c3af-4b69-4f92-aaf8-4f5048373585",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1032773,
              "key": "15570f46-4295-46d4-bbe3-1e0599f84122",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1019931xGENERIC8h88udtu",
              "pool_id": "webterminal",
              "view_id": "generic-ry2ms",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/ErrorHandlingExample.js",
                      "/home/workspace/promiseChainExample.js",
                      "/home/workspace/promisePractice2Challenge.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1036932,
          "key": "5da7d297-183c-4841-9d9e-810d74c35816",
          "title": "Solution: Promises II ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5da7d297-183c-4841-9d9e-810d74c35816",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1036935,
              "key": "e4c34cfe-76c6-4ba0-8cca-71c0cb8a7b49",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promise Practice Solution\n\nHere is one solution for the challenge:\n```\n\nconst eventMessage = JSON.stringify({body: \"Your account has been updated!\"});\nconst currentUser = JSON.stringify({\n    name: \"Ralph S. Mouse\",\n    id: \"238jflK3\"\n});\n\nconst getUserInformation = () => {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, 2000, currentUser);\n    }).then(data => JSON.parse(data))\n};\n\nconst getEventMesssage = () => {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, 2000, eventMessage);\n    }).then(data => JSON.parse(data))\n};\n\ngetUserInformation().then(userInfo => {\n    getEventMesssage()\n    .then(message => message.body)\n    .then(message => {\n        const greeting = `Thank you, ${userInfo.name}.`\n        console.log(`${greeting} ${message}`)\n    })\n}).catch(err => console.log(err));\n```\n\nThere are a few things you can note here. First, if you are making an API request, it is smart to change the response into the format you need it as soon as possible. So in this case we are receiving JSON and we want a JavaScript object, so I decided to make that conversion as soon as I got the response back. It will work either way, but its easier to remember when you do those things immediately. \n\nAnother thing that might have stumped you on this exercise is that this is the first time we are dealing with nested Promises. Here, we can't print the message until both the user information and message are available, that's why we had to make the second request in the then statement of the first Promise. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1019932,
          "key": "aef66581-acf4-4459-a8ef-49675c875f5d",
          "title": "Advanced Promise Syntax",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "aef66581-acf4-4459-a8ef-49675c875f5d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1019933,
              "key": "805e19f7-ce06-4599-944b-009466bd8e6e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Advanced Promise Syntax\n\nWe've covered a lot of ground with promises already - but there's still more to learn! In this lesson we will cover some additional syntax that will streamline our promise flows and open up a whole other level of control when handling events. Let's get started!\n",
              "instructor_notes": ""
            },
            {
              "id": 1021981,
              "key": "c307140f-5077-4ee4-9800-3062c56d14f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promise Methods Part 1",
              "instructor_notes": ""
            },
            {
              "id": 1021788,
              "key": "91968109-5cfc-40c8-bcb4-40c6841bb8c5",
              "title": "ND032 JSND L2 A07 Prmoise Methods I",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "q6sHlkKdZxM",
                "china_cdn_id": "q6sHlkKdZxM.mp4"
              }
            },
            {
              "id": 1022230,
              "key": "be77c28c-0dfd-43a0-856c-989510afc92d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promise Methods Part 1 Recap\n\nHere are the methods we went over in the video.\n\n\n#### New Promise\n```\nnew Promise((resolve, reject) => {\n// can do logic here\n// resolve() or reject()\n}\n```\nPromise new initiates a new project. From here you can resolve or reject the new Promise you have made.\n\n#### Promise.reject\nCalled in a Promise, will cause the `.catch` clause to run in the same way an error does. \n\n#### Promise.resolve\nCalled in a Promise, will cause the `.then` clause to run. Can optionally be passed an argument that will go to the next statement.\n\n#### Promise.finally\nLike `.then` or `.catch`, `finally` is another clause that runs after the other clauses. It runs in both a reject or resolve case. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1038469,
          "key": "fba15fdb-d281-4646-a051-18f30d27c016",
          "title": "Promise.allSettled",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fba15fdb-d281-4646-a051-18f30d27c016",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1038498,
              "key": "ad850483-c2f6-437c-81ed-d1b0710bc752",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promise.allSettled",
              "instructor_notes": ""
            },
            {
              "id": 1038499,
              "key": "6c6c41fa-d158-4db0-bcb5-e1b9e4462116",
              "title": "ND032 JSND L2 A08 Prmoise Methods II Part 1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "45tsvF0AIdI",
                "china_cdn_id": "45tsvF0AIdI.mp4"
              }
            },
            {
              "id": 1038523,
              "key": "5b20a5d3-d5bf-4405-bfec-b2bcbc11698f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Promise.allSettled takes an argument that is an array of Promises. It waits for all those Promises to resolve and collects the results of each one into a new array of results. The resulting array contains one object per Promise, saying whether that Promise resolved or rejected, along with the value (if it resolved) or the reason for failure (if it rejected). Promise.all itself returns a Promise, so the resulting array is available in the following `.then` statement.",
              "instructor_notes": ""
            },
            {
              "id": 1038526,
              "key": "1d244f7a-38af-4985-95be-99824cb19df2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ef3c92b_jsndc3-l2-promise-allsettled/jsndc3-l2-promise-allsettled.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1d244f7a-38af-4985-95be-99824cb19df2",
              "caption": "Promise.allSettled",
              "alt": "Promise.allSettled Diagram",
              "width": 467,
              "height": 396,
              "instructor_notes": null
            },
            {
              "id": 1038524,
              "key": "00882c2b-9941-48b9-8c14-8de57da00eca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is the example code from the video:\n```\nconst book1 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 3000, \"Enders Game\");\n});\n\nconst book2 = new Promise((resolve, reject) => {\n    setTimeout(reject, 4000, \"Sorry, not available!\");\n});\n\nconst book3 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 2000, \"Harry Potter and The Prisoner of Azkaban\");\n});\n\nconst book4 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000, \"Stranger in a Strange Land\");\n});\n\nPromise.allSettled([book1, book2, book3, book4])\n.then(results => {\n    console.log(results)\n    results.forEach(result => console.log(result.value))\n})\n.catch(error => console.log(error));\n```\n\n### Try It Out\n\nThis one is a little trickier.  `Promise.allSettled` is not supported in all browsers and is only supported in Node.js > 12.9.0. so we'll need to update the Workspace before we run the code.  I've included a script to do that.  In the BASH window run: \n\n```bash\nsource  update_node.sh\n```\nOnce the script finishes running you can run the  `allSettled.js` script.  \n\nAfter you run the code, make some changes and see what happens!",
              "instructor_notes": ""
            },
            {
              "id": 1038525,
              "key": "53ae9a45-d6e7-43c2-b534-e24e66fff132",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1038469xGENERICk25yg2l5",
              "pool_id": "webterminal",
              "view_id": "generic-eh0kf",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/allsettled.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1038470,
          "key": "a1476c99-a8ad-4273-be38-31ecc8d18a3a",
          "title": "Promise.all",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a1476c99-a8ad-4273-be38-31ecc8d18a3a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1038484,
              "key": "bfb0b4a8-dce9-45f1-81af-764bc0c2dbd6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promise.all",
              "instructor_notes": ""
            },
            {
              "id": 1038482,
              "key": "fa6276b1-a26c-414b-8b15-e13d965a461f",
              "title": "ND032 JSND L2 A08 Prmoise Methods II Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "S7h-b4MPBQM",
                "china_cdn_id": "S7h-b4MPBQM.mp4"
              }
            },
            {
              "id": 1038486,
              "key": "325a80de-349b-4b58-9b91-1db2f3f86f18",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This method is almost exactly the same time as Promise.allSettled except for what it returns and how it handles rejected Promises. It takes in an array of Promises and waits for them to resolve, but the first time it encounters a rejected Promise, it stops waiting for any further Promises and runs its catch clause. If no Promises reject, it returns an array of the values returned by them. Again like Promise.allSettled, Promise.all returns a Promise, so the resulting array is available in the following then.",
              "instructor_notes": ""
            },
            {
              "id": 1038487,
              "key": "5f333dd2-b177-4278-9cd3-9ecc349e9899",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ef3bbbe_jsndc3-l2-promise-all/jsndc3-l2-promise-all.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5f333dd2-b177-4278-9cd3-9ecc349e9899",
              "caption": "Promise.all",
              "alt": "Promise.all diagram",
              "width": 426,
              "height": 402,
              "instructor_notes": null
            },
            {
              "id": 1038483,
              "key": "887fbedd-a3dd-4d29-bc93-4c2a7c20a917",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```javascript\nconst book1 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 3000, \"Enders Game\");\n});\n\nconst book2 = new Promise((resolve, reject) => {\n    setTimeout(reject, 4000, \"Sorry, not available!\");\n});\n\nconst book3 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 2000, \"Harry Potter and The Prisoner of Azkaban\");\n});\n\nconst book4 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000, \"Stranger in a Strange Land\");\n});\n\nPromise.all([book1, book2, book3, book4])\n.then(results => {\n    console.log(results);\n    results.forEach(result => console.log(result.value));\n})\n.catch(error => console.log(error));\n```",
              "instructor_notes": ""
            },
            {
              "id": 1038497,
              "key": "55c9cf3b-9a6f-48b6-bc71-100c4aa951f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Try It Out\nTry `Promise.all` in the Workspace below. Try changing the setTimeout values to see how things change.",
              "instructor_notes": ""
            },
            {
              "id": 1038488,
              "key": "e61aece4-6a31-4900-b539-7434958a132a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1038470xGENERIC9begflei",
              "pool_id": "webterminal",
              "view_id": "generic-okz7a",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/promiseall.js"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1038471,
          "key": "a48b86a9-58b7-4956-88d6-6c22f0e09d06",
          "title": "Promise.race",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a48b86a9-58b7-4956-88d6-6c22f0e09d06",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1038474,
              "key": "5f9b1850-16db-4659-ba8d-17766996a7b4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promise.race\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1038473,
              "key": "4731ba67-58f2-4004-be88-a739dc3fb728",
              "title": "ND032 JSND L2 A08 Prmoise Methods II Part 3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F0YqaoCHZxM",
                "china_cdn_id": "F0YqaoCHZxM.mp4"
              }
            },
            {
              "id": 1038479,
              "key": "e1775217-79ec-4661-a06d-d0df666de191",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`Promise.race` also takes an argument of an array of Promises, but instead of waiting for them all to resolve, it only waits for the fastest one. Whatever Promise fulfills first, whether is resolves or rejects. It will pass the value from the resolution or the error from the rejection to its then statement.",
              "instructor_notes": ""
            },
            {
              "id": 1038478,
              "key": "2828be0f-98e8-412e-b8cb-803d1f58ab1e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ef3b7a7_jsndc3-promise-race-catch/jsndc3-promise-race-catch.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2828be0f-98e8-412e-b8cb-803d1f58ab1e",
              "caption": "",
              "alt": "",
              "width": 670,
              "height": 379,
              "instructor_notes": null
            },
            {
              "id": 1038475,
              "key": "7ce0d4ed-e4e0-4c54-9c44-0c44462bb16f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\nconst book1 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 3000, \"Enders Game\");\n});\n\nconst book2 = new Promise((resolve, reject) => {\n    setTimeout(reject, 4000, \"Sorry, not available!\");\n});\n\nconst book3 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 2000, \"Harry Potter and The Prisoner of Azkaban\");\n});\n\nconst book4 = new Promise((resolve, reject) => {\n    setTimeout(reject, 1000, \"Sorry, not available!\");\n});\n\nPromise.race([book1, book2, book3, book4])\n.then(result => {\n    console.log(result);\n})\n.catch(error => console.log(\"Error!\", error));\n```",
              "instructor_notes": ""
            },
            {
              "id": 1038481,
              "key": "c47e37b0-65ab-4426-a4a4-21dbe0d4302a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ### Try It Out\n\nTry `Promise.race` in the Workspace below.  Try changing the `setTimeout` values to see how things change.",
              "instructor_notes": ""
            },
            {
              "id": 1038480,
              "key": "71a4400e-0137-41fa-8d9d-217316244d8e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1038471xGENERIC639aont8",
              "pool_id": "webterminal",
              "view_id": "generic-yvw51",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/promise_race.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1019934,
          "key": "c03f8a28-9cea-4002-8a7e-83f856548685",
          "title": "Exercise:  Promises III",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c03f8a28-9cea-4002-8a7e-83f856548685",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1038581,
              "key": "e6500864-fec7-42f1-aed2-14093775a5f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Challenge 1\nImplement the method to get a list of results of all the promises and console log how many failed and how many rejected\n\n## Challenge 2\nImplement the method to get a list of results from all the Promises unless one fails. Log the list of successful results or the error message if one fails.\n\n\n## Challenge 3\nImplement the method to figure out which Promise fulfilled first, print the message it fulfills with.\n\n\n\n#### Remember\n`Promise.allSettled` only works in Node.js > 12.9.0.   If you want to use `Promise.allSettled`  you will need to update the Workspace before you run the code.\n```\nsource  update_node.sh\n```",
              "instructor_notes": ""
            },
            {
              "id": 1036946,
              "key": "c809eea6-fa1f-4592-aebd-db16558f92a4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c1019934xGENERICsmlgst4i",
              "pool_id": "webterminal",
              "view_id": "generic-d7u3e",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/methodsChallenge.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 1036948,
          "key": "a63f496c-8123-435a-8c05-0282e21a9fa8",
          "title": "Solution: Promises III ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a63f496c-8123-435a-8c05-0282e21a9fa8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1036950,
              "key": "5fb91e0e-a0d1-4582-abfd-1aebaaed5050",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere is an example of a solution for each challenge.\n\n### Challenge 1\n```\nPromise.allSettled([p1, p2, p3, p4])\n.then(results => {\n    console.log(results);\n    const failed = results.filter(result => result.status === \"fulfilled\");\n    console.log(`Failed: ${failed.length} ::: Fulfilled: ${results.length - failed.length}`);\n})\n.catch(error => console.log(error));\n```\nNotice how we are able to filter the results to get the ratio of failed to succeeded.\n\n### Challenge 2\n```\nPromise.all([p1, p2, p3, p4])\n.then(results => {\n    console.log(results);\n})\n.catch(error => console.log(error));\n```\n\n### Challenge 3\n```\nPromise.race([p1, p2, p3, p4])\n.then(result => {\n    console.log(result);\n})\n.catch(error => console.log(\"Error!\", error));\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1019935,
          "key": "ee028efe-beac-4307-9618-5ac8334bc7d5",
          "title": "Quizzes: Promises II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ee028efe-beac-4307-9618-5ac8334bc7d5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1036958,
              "key": "de6fa2ee-9ccb-403f-8da2-c0131b12e39f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promises Quiz II \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1036972,
              "key": "938d12d9-2a1f-4788-82a0-0dfac2a3ef4a",
              "title": "Fetch",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "938d12d9-2a1f-4788-82a0-0dfac2a3ef4a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are true statements about the Fetch syntax?",
                "answers": [
                  {
                    "id": "a1592448221737",
                    "text": "Fetch is the pre es6 way to make AJAX requests",
                    "is_correct": false
                  },
                  {
                    "id": "a1592455025364",
                    "text": "Fetch is the post es6 way to make AJAX requests",
                    "is_correct": true
                  },
                  {
                    "id": "a1592455032559",
                    "text": "Fetch is a syntax similar to Promises in modern JavaScript but unrelated",
                    "is_correct": false
                  },
                  {
                    "id": "a1592455084297",
                    "text": "Fetch is a syntax is built on Promises",
                    "is_correct": true
                  },
                  {
                    "id": "a1592456422045",
                    "text": "HTTP errors cause the catch clause of the returned Promise to run ",
                    "is_correct": true
                  },
                  {
                    "id": "a1592456755169",
                    "text": "HTTP errors cause the special Fetch denied clause to run",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1036974,
              "key": "53c4902a-8b65-45b0-9831-7578c6638d39",
              "title": "Practice Interview Question",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "53c4902a-8b65-45b0-9831-7578c6638d39",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Explain the purpose of the finally clause in Promises."
              },
              "answer": {
                "text": "Your answer should contain the following:\n- Finally runs after either the final .then or .catch\n- Finally is for logic that you want to run in either the resolve or reject case\n- It is optional and should only be added if you have a reason to use it",
                "video": null
              }
            },
            {
              "id": 1036975,
              "key": "16b454fb-3e16-4680-8d06-f6185915ae5b",
              "title": "Promise Methods",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "16b454fb-3e16-4680-8d06-f6185915ae5b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the method to its description."
                },
                "concepts_label": "Term",
                "answers_label": "Description ",
                "concepts": [
                  {
                    "text": "Causes a Promise to resolve. Optionally takes an argument for data to pass to the then statement. ",
                    "correct_answer": {
                      "id": "a1592459446236",
                      "text": "Resolve"
                    }
                  },
                  {
                    "text": "Causes a Promise to reject and the catch clause to run",
                    "correct_answer": {
                      "id": "a1592459794957",
                      "text": "Reject"
                    }
                  },
                  {
                    "text": "Runs after the final catch or then in the Promise chain, used for logic you want to run whether the Promise rejects or resolves. ",
                    "correct_answer": {
                      "id": "a1592459798447",
                      "text": " Finally"
                    }
                  },
                  {
                    "text": "A Promise method for handling multiple Promises, takes an array of Promises and collects the results. Exits the chain and runs the catch the first time it encounters a rejected Promise. ",
                    "correct_answer": {
                      "id": "a1592459803601",
                      "text": "All"
                    }
                  },
                  {
                    "text": "A Promise method for handling multiple Promises, takes an array of Promises and collects the results. The results array lists each Promise and whether it resolved or rejected, along the data returned.",
                    "correct_answer": {
                      "id": "a1592459812046",
                      "text": "AllSettled"
                    }
                  },
                  {
                    "text": "A Promise method for handling multiple Promises, takes an array of Promises and returns the information for the one that fulfills first and says whether it resolved or rejected.",
                    "correct_answer": {
                      "id": "a1592459817110",
                      "text": "Race"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1592459817110",
                    "text": "Race"
                  },
                  {
                    "id": "a1592459798447",
                    "text": " Finally"
                  },
                  {
                    "id": "a1592459803601",
                    "text": "All"
                  },
                  {
                    "id": "a1592459446236",
                    "text": "Resolve"
                  },
                  {
                    "id": "a1592459794957",
                    "text": "Reject"
                  },
                  {
                    "id": "a1592459812046",
                    "text": "AllSettled"
                  }
                ]
              }
            },
            {
              "id": 1036978,
              "key": "28c35af8-7f6a-4aea-966b-3be75deaa7db",
              "title": "Interview Question Practice ",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "28c35af8-7f6a-4aea-966b-3be75deaa7db",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Name one Promise method for handling multiple Promises and give one use case for when you might need it."
              },
              "answer": {
                "text": "Here are some potential answers:\n\nPromise.All\nYou need information from multiple sources and you expect them all to resolve. You can use this in any case where it would be considered an error for any of the Promises to reject.\n\nPromise.AllSettled\nYou need to make many requests and get an overview of which requests failed or succeeded, for instance if you need to poll multiple resources to which are available.\n\nPromise.Race\nYou only care about the fastest of a set of Promises. If you are building a timeout or a request that is time sensitive and not important after a certain amount of time, this would be the method to use.",
                "video": null
              }
            },
            {
              "id": 1036959,
              "key": "9ce0440c-c1eb-4800-9522-5223c10c2298",
              "title": "Advanced Promises",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9ce0440c-c1eb-4800-9522-5223c10c2298",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would this output?\n```\nnew Promise((resolve, reject) => {\n  resolve(\"New message\");\n})\n.then(data => {\n  const arr = data.split(\"\");\n  throw new Error(\"Uh-oh!\");\n  return arr.reverse();\n})\n.catch(err => {\n  console.log(err.message);\n})\n.then(data => data.join(\"\"))\n.then(data => console.log(data))\n.catch(error => {\n  console.log(\"There was an error\");\n  console.log(error.message);\n });\n```",
                "answers": [
                  {
                    "id": "a1592447712335",
                    "text": "Uh-oh!",
                    "is_correct": false
                  },
                  {
                    "id": "a1592518241050",
                    "text": "Uh-oh!, egassem wen a si sihT",
                    "is_correct": false
                  },
                  {
                    "id": "a1592518287638",
                    "text": "egassem wen a si sihT, There was an error",
                    "is_correct": false
                  },
                  {
                    "id": "a1592518302506",
                    "text": "There was an error, can't access property \"join\" data is undefined",
                    "is_correct": false
                  },
                  {
                    "id": "a1592518308005",
                    "text": "Uh-oh!, There was an error, can't access property \"join\" data is undefined",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1037181,
              "key": "045f176b-e53d-481e-aded-1195b5a037cd",
              "title": "Promise Chaining",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "045f176b-e53d-481e-aded-1195b5a037cd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would this output?\n```\nnew Promise((resolve, reject) => {\n  resolve(\"New message\");\n})\n.then(data => {\n  const dataArr = data.split(\"\");\n  throw new Error(\"Uh-oh!\");\n  return dataArr.reverse();\n})\n.then(data => data.join(\"\"))\n.then(data => console.log(data))\n.catch(error => {\n  console.log(\"Encountered a problem!\");\n  return error\n})\n.then(error => {\n  console.log(error.message);\n}); \n```",
                "answers": [
                  {
                    "id": "a1592518863700",
                    "text": "New message",
                    "is_correct": false
                  },
                  {
                    "id": "a1592519109783",
                    "text": "egassem meN",
                    "is_correct": false
                  },
                  {
                    "id": "a1592519122249",
                    "text": "Uh-oh!",
                    "is_correct": false
                  },
                  {
                    "id": "a1592519131734",
                    "text": "Uh-oh!, egassem meN",
                    "is_correct": false
                  },
                  {
                    "id": "a1592519138483",
                    "text": "Encountered a problem!",
                    "is_correct": false
                  },
                  {
                    "id": "a1592519147865",
                    "text": "Uh-oh!, Encountered a problem!",
                    "is_correct": false
                  },
                  {
                    "id": "a1592519160128",
                    "text": "Encountered a problem!, Uh-oh!",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1019936,
          "key": "0dde1aa9-b726-4132-a401-568c3f236b75",
          "title": "Lesson Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0dde1aa9-b726-4132-a401-568c3f236b75",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020855,
              "key": "90244011-7579-468c-b3dc-bed08c3fe846",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Promises Conclusion",
              "instructor_notes": ""
            },
            {
              "id": 1020856,
              "key": "15798fd3-45ee-45d5-9619-d5e8aa9c67f8",
              "title": "ND032 JSND L2 A09 Lesson Conclusion V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mYQxo5VLpHQ",
                "china_cdn_id": "mYQxo5VLpHQ.mp4"
              }
            },
            {
              "id": 1020858,
              "key": "6e41a5ad-d2fb-460c-a296-ea1e2d699ae4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Lesson Concepts Recap\n\nWe've accomplished a lot! Here are the topics we covered in this lesson:\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1035504,
              "key": "8987f0dc-eae2-437a-8f09-dda44ab9f1e8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5ee246c1_jsndc3-l2-overview/jsndc3-l2-overview.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8987f0dc-eae2-437a-8f09-dda44ab9f1e8",
              "caption": "",
              "alt": "Lesson Overview",
              "width": 830,
              "height": 352,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 1019937,
          "key": "2c3d8bb6-9be5-4511-9aa0-002d380e803d",
          "title": "Lesson Glossary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2c3d8bb6-9be5-4511-9aa0-002d380e803d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020569,
              "key": "b6f99f95-bed5-4d85-9584-98ac6ad4fbc5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terms\n\n##### **Promise** \n\nA JavaScript Promise object is essentially a placeholder for a value that is not available immediately. A promise is asynchronous and represents the result of a request or operation that may succeed or fail. \n\n##### **Promise States**\n\nJavaScript Promises have four states. When a promise has been initiated but the result has not yet come back, the promise is PENDING. A promise that succeeded is RESOLVED and a promise that failed is REJECTED. When a promise is either rejected or resolved, its state is SETTLED, which simply means that it is no longer pending, regardless of the result. \n\n##### **Fetch**\nFetch is the syntax for a modern promise based HTTP request in JavaScript. \n\n## Quick Syntax Reference\n\n\n##### ** New Promise **\n```javascript\nnew Promise((reject, resolve) => {\n  // Make your initial request\n  // Promise is now PENDING \n})\n```\n##### **Resolved Promise Logic**\n```javascript\n.then(data => {\n  // Promise is now SETTLED and RESOLVED\n  // Your logic here\n  // Return a value you want to pass to the next then statement\n})\n```\n##### **Rejected Promise Logic**\n```javascript\n.catch(error => {\n  // Promise is now SETTLED and REJECTED\n  // handle the error\n})\n```\n##### **Fetch**\n```javascript\nfetch(url, options)\n.then(data)\n.catch(error)\n```\n\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}