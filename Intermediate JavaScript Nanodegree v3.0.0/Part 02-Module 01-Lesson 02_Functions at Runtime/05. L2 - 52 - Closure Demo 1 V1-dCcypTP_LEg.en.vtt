WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.794
Here, we have a couple of things.

00:00:01.794 --> 00:00:05.195
First, we have a global variable called number which just points to

00:00:05.195 --> 00:00:09.539
the number three and we also have a higher order function called myFunction.

00:00:09.539 --> 00:00:12.029
Inside myFunction, we have a local variable

00:00:12.029 --> 00:00:14.894
called otherNumber which just points to the number one,

00:00:14.894 --> 00:00:17.189
as well as a function called logger.

00:00:17.190 --> 00:00:20.780
And all loggers does is just log otherNumber right to the console.

00:00:20.780 --> 00:00:24.300
At the very end, myFunction returns logger.

00:00:24.300 --> 00:00:32.855
Let's invoke myFunction and then store that result into a variable called result.

00:00:32.854 --> 00:00:35.729
So, as you can see, the return value of my function being

00:00:35.729 --> 00:00:39.182
called is going to be stored in a variable called result.

00:00:39.182 --> 00:00:42.670
And now if we invoke it,

00:00:42.810 --> 00:00:47.737
we see that it outputs one to the console.

00:00:47.737 --> 00:00:49.685
So, how is this possible?

00:00:49.685 --> 00:00:51.875
Well, because of closure,

00:00:51.875 --> 00:00:58.149
logger captures the otherNumber variable which is declared locally inside myFunction.

00:00:58.149 --> 00:01:01.489
In other words, the nested logger function is still able to

00:01:01.490 --> 00:01:05.585
access the otherNumber variable in its parent function scope,

00:01:05.584 --> 00:01:08.979
even after the parent function returned.

00:01:08.980 --> 00:01:10.969
Let's check out this one a little bit more closely.

00:01:10.969 --> 00:01:14.534
What I'm going to do is refresh the console and do everything I just did,

00:01:14.534 --> 00:01:17.280
but there with debugger in there.

00:01:17.280 --> 00:01:22.346
And now if we invoke it again,

00:01:22.346 --> 00:01:27.390
we've now paused execution and we're on this line of code, line seven.

00:01:27.390 --> 00:01:30.980
But if you check out what's going on on the right side of the screen,

00:01:30.980 --> 00:01:33.439
we see closure over here.

00:01:33.439 --> 00:01:36.045
Let's open it up. Pretty interesting.

00:01:36.045 --> 00:01:38.489
We see the otherNumber variable which is

00:01:38.489 --> 00:01:42.170
the variable that the logger function closed over.

00:01:42.170 --> 00:01:47.430
So, to recap, functions like logger maintain a reference to its parent function scope,

00:01:47.430 --> 00:01:52.000
which is myFunction, even after the parent function has returned.

