WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.120
这是一个叫做 Hero 的构造函数

00:00:03.120 --> 00:00:06.075
它会创建具有几个属性的对象

00:00:06.075 --> 00:00:09.505
当我们使用关键字 new 调用该函数时

00:00:09.505 --> 00:00:14.804
我们传入的名字将为新对象的 name 属性的值

00:00:14.804 --> 00:00:19.905
同样 我们传入的角色将为 role 属性的值

00:00:19.905 --> 00:00:23.730
新建的对象还将有一个叫做 introduce 的方法

00:00:23.730 --> 00:00:27.015
该方法会使用对象的 name 和 role 属性

00:00:27.015 --> 00:00:29.414
向控制台中输出一条消息

00:00:29.414 --> 00:00:31.394
我们调用 Hero

00:00:31.394 --> 00:00:40.487
并初始化几个新的对象

00:00:40.487 --> 00:00:47.590
我们使用关键字 new 调用了 Hero 构造函数

00:00:47.590 --> 00:00:49.090
传入几个参数

00:00:49.090 --> 00:00:51.740
传入字符串“Taylor” 表示名字

00:00:51.740 --> 00:00:55.210
并传入字符串“mother” 表示角色

00:00:55.210 --> 00:00:58.645
使用关键字 new 调用该函数初始化了新的对象

00:00:58.645 --> 00:01:01.315
由这里的变量“Taylor”来引用

00:01:01.314 --> 00:01:05.140
同样 我们使用 new 调用相同的构造函数

00:01:05.140 --> 00:01:09.890
并传入字符串“Riley”和“coach”新建一个对象

00:01:09.890 --> 00:01:11.484
我们看看几个属性

00:01:11.484 --> 00:01:13.200
然后让对象自我介绍一下

00:01:13.200 --> 00:01:17.037
通过“Taylor”对象的 name 属性

00:01:17.037 --> 00:01:19.480
进行访问返回了“Taylor”

00:01:19.480 --> 00:01:22.630
它是在这里传入构造函数中的字符串

00:01:22.629 --> 00:01:25.030
我们看看“Riley”对象的属性

00:01:25.030 --> 00:01:28.849
好

00:01:28.849 --> 00:01:30.859
访问“Riley”对象的 role 属性

00:01:30.859 --> 00:01:33.439
获得了字符串“coach”

00:01:33.439 --> 00:01:36.715
正是我们在这里传入构造函数中的字符串

00:01:36.715 --> 00:01:41.469
我们针对每个对象调用 introduce 方法

00:01:44.260 --> 00:01:48.990
注意 因为我们

00:01:48.989 --> 00:01:52.034
在“Taylor”对象上调用了方法 introduce

00:01:52.034 --> 00:01:54.524
this 的值设为了对象本身

00:01:54.525 --> 00:01:57.945
表示我们可以从 this.name 中获取 Taylor

00:01:57.944 --> 00:02:01.859
并且可以从 this.role 获取 mother

00:02:01.859 --> 00:02:05.484
“Riley”对象也一样 当我们对“Riley”对象调用 introduce 时

00:02:05.484 --> 00:02:08.939
我们获取了 Riley 的 name 属性 即字符串“Riley”

00:02:08.939 --> 00:02:12.655
我们还获取了 Riley 的 role 属性 即“coach”

00:02:12.655 --> 00:02:14.205
构造函数的好处是

00:02:14.205 --> 00:02:16.800
我们可以调用相同的构造函数

00:02:16.800 --> 00:02:20.000
创建无数个实例或对象

