WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:07.006
我们创建一个数组并向该数组分配一个变量

00:00:07.006 --> 00:00:12.029
对该数组调用 join

00:00:12.029 --> 00:00:19.399
很明显 myArray 可以访问这里的 join 方法

00:00:19.399 --> 00:00:26.412
我们看看 myArray 的一些属性

00:00:26.413 --> 00:00:31.493
打开它

00:00:31.493 --> 00:00:37.969
全都存储在这个 _proto_ 属性中

00:00:37.969 --> 00:00:39.744
暂时不用担心这个属性是什么

00:00:39.744 --> 00:00:42.989
只需记住 这个属性使我们能够访问

00:00:42.990 --> 00:00:48.560
这个数组或对象的原型 我们来看看

00:00:48.820 --> 00:00:52.554
很有趣

00:00:52.554 --> 00:00:55.560
我们肯定在这门课程中使用过其中一些项

00:00:55.560 --> 00:00:57.435
我们刚刚肯定见过 join

00:00:57.435 --> 00:01:00.925
见过 keys 之前使用过 forEach

00:01:00.924 --> 00:01:02.729
肯定使用过 push

00:01:02.729 --> 00:01:04.075
很实用

00:01:04.075 --> 00:01:08.500
有很多可以对此数组调用的方法

00:01:08.500 --> 00:01:11.325
要记住的是 这个数组 myArray

00:01:11.325 --> 00:01:15.420
不能直接访问 join 方法

00:01:15.420 --> 00:01:20.510
它转到原型链并直接从数组中获取方法

00:01:20.510 --> 00:01:24.560
我有点好奇 看看 Array 在 MDN 上的定义

00:01:24.560 --> 00:01:28.390
向下滚动 可以看到单个数组“myArray”

00:01:28.390 --> 00:01:32.765
可以访问的相同方法

00:01:32.765 --> 00:01:34.930
有很多相同的方法

00:01:34.930 --> 00:01:37.390
例如 forEach keys push

00:01:37.390 --> 00:01:41.290
之前肯定使用过 join

00:01:41.290 --> 00:01:42.670
实际上

00:01:42.670 --> 00:01:45.625
你一直都在使用原型方法

00:01:45.625 --> 00:01:49.579
这些是直接在数组或对象中定义的方法

00:01:49.579 --> 00:01:53.109
单个数组可以访问的这些方法

00:01:53.109 --> 00:01:58.000
继承自数组原型 很有趣

