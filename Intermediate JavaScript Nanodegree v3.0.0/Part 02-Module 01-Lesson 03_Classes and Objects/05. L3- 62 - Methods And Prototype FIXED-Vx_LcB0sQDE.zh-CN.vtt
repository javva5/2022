WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.610
这是 Dog 构造函数

00:00:02.610 --> 00:00:07.845
我们可以调用它来创建一个具有以下四种属性的对象

00:00:07.845 --> 00:00:10.185
age weight name 和 bark

00:00:10.185 --> 00:00:14.410
可以在构造器中定义 bark 方法 

00:00:14.410 --> 00:00:17.490
我们将 bark 方法移到 dog 的原型中

00:00:17.490 --> 00:00:21.400
先拿出 bark 方法

00:00:21.400 --> 00:00:25.820
然后在 dog 的原型中定义 bark

00:00:25.820 --> 00:00:27.290
没有什么特殊技巧

00:00:27.290 --> 00:00:34.830
直接使用点记法来定义 bark

00:00:34.830 --> 00:00:39.980
我们现在将调用 dog 的构造函数来创建一个新的对象。

00:00:39.980 --> 00:00:46.660
最后 让我们调用这个新 dog 的 bark 方法

00:00:47.840 --> 00:00:50.895
这是显示的消息

00:00:50.895 --> 00:00:54.575
"Java says woof!" 让我们回顾一下发生了什么

00:00:54.575 --> 00:00:57.155
当我们在 Dog 中叫 bark 方法时

00:00:57.155 --> 00:00:59.900
JavaScript 引擎会查看自己的属性

00:00:59.900 --> 00:01:02.735
尝试找到与 bark 方法相匹配的名称

00:01:02.735 --> 00:01:05.895
由于 bark 没有直接定义在这个 dog 上

00:01:05.895 --> 00:01:09.020
它会看看 bark 方法的原型

00:01:09.020 --> 00:01:14.065
最后 我们不需要调用 dog.prototype.bark,

00:01:14.065 --> 00:01:15.480
我们只需要调用

00:01:15.480 --> 00:01:21.980
dog.bark 起作用了

00:01:21.980 --> 00:01:27.000
因为这个 dog 对象已经通过它的原型与 bark 方法联系起来了

