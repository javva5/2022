WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.700
这里有一个叫做 cat 的对象以及一个叫做 sayHello 的函数

00:00:04.700 --> 00:00:09.449
sayHello 的作用是传入单个参数并向控制台中输出一条消息

00:00:09.449 --> 00:00:11.309
看起来可能有点奇怪

00:00:11.310 --> 00:00:15.359
因为 sayHello 实际上引用的是关键字

00:00:15.359 --> 00:00:17.699
如果我们将 sayHello 当做函数来调用它

00:00:17.699 --> 00:00:19.814
this 会设成什么？

00:00:19.815 --> 00:00:23.429
它会设成一个窗口或全局对象

00:00:23.429 --> 00:00:26.766
如果你希望 this 引用的是 cat

00:00:26.766 --> 00:00:31.649
我们可以使用特殊的 call 或 apply 方法手动地进行设置

00:00:31.649 --> 00:00:33.734
我们看看如何设置 先从 call 开始

00:00:33.734 --> 00:00:39.564
call 是可以直接在函数中调用的方法 我们来调用它

00:00:39.564 --> 00:00:44.849
现在可以向 call 方法中传入两个参数

00:00:44.850 --> 00:00:50.045
首先 是 this 绑定到的对象 即 cat

00:00:50.045 --> 00:00:55.820
接着 是向调用 call 所在的函数传入的一组参数

00:00:55.820 --> 00:00:57.020
这里是 sayHello 函数

00:00:57.020 --> 00:00:59.782
我们知道它有一个参数 即一条消息

00:00:59.781 --> 00:01:03.539
传入该消息

00:01:03.640 --> 00:01:09.332
运行代码 看看结果如何

00:01:09.332 --> 00:01:12.640
消息显示出来了 Nice to see you, Bailey

00:01:12.640 --> 00:01:16.575
我们可以使用 apply 方法获得相同的结果

00:01:16.575 --> 00:01:18.954
但是传入的参数稍微不同

00:01:18.954 --> 00:01:20.429
我们来看看

00:01:20.430 --> 00:01:23.885
我将切换到另一个窗口中 以便有更多的空间

00:01:23.885 --> 00:01:29.195
和 call 一样 apply 会直接在函数中调用

00:01:29.194 --> 00:01:32.019
第一个参数一样

00:01:32.019 --> 00:01:37.744
即要绑定到的对象 这里是 cat

00:01:37.745 --> 00:01:42.680
接着 不再是用逗号分隔将传入 sayHello 函数中的参数

00:01:42.680 --> 00:01:47.178
就像 call 一样

00:01:47.177 --> 00:01:51.105
apply 像数组一样接收所有的参数

00:01:51.105 --> 00:01:52.924
这里是一个参数

00:01:52.924 --> 00:01:55.474
因为 sayHello 只接收一个消息

00:01:55.474 --> 00:01:59.427
我们以数组的形式传入消息

00:01:59.427 --> 00:02:04.078
调用它 看看结果怎样

00:02:04.078 --> 00:02:06.640
Hello, Bailey 就是这个结果

00:02:06.640 --> 00:02:11.289
Call 和 apply 是手动设置 this 值的很好方式

