WEBVTT
Kind: captions
Language: pt-BR

00:00:00.367 --> 00:00:04.267
Vamos criar um array
e designar uma variável a ele.

00:00:08.167 --> 00:00:10.733
Vamos chamar "join"
no array.

00:00:13.833 --> 00:00:18.133
Agora "myArray" tem acesso
ao método "join" daqui.

00:00:19.300 --> 00:00:22.267
Vejamos as propriedades
de "myArray".

00:00:29.433 --> 00:00:30.667
Vamos abrir.

00:00:33.500 --> 00:00:38.000
Elas ficam armazenadas
na propriedade "__proto__".

00:00:38.033 --> 00:00:39.733
Não se preocupe
com isto agora,

00:00:39.767 --> 00:00:43.800
ele só permite acesso
às propriedades do array

00:00:43.833 --> 00:00:47.200
ou do protótipo
deste objeto. Veja só.

00:00:50.767 --> 00:00:52.600
Bem interessante!

00:00:52.633 --> 00:00:55.533
Já utilizamos isto antes
neste curso.

00:00:55.567 --> 00:01:00.067
Acabamos de ver "join"
e já usamos "keys" antes.

00:01:00.833 --> 00:01:04.067
Já utilizamos "push".
São bem úteis!

00:01:04.100 --> 00:01:07.567
Há muitos métodos que podem
ser chamados neste array.

00:01:08.667 --> 00:01:12.100
O importante aqui é lembrar
que este array, "myArray",

00:01:12.133 --> 00:01:15.367
não possui acesso direto
ao método "join".

00:01:15.400 --> 00:01:17.633
Ele vai à cadeia
do protótipo

00:01:17.667 --> 00:01:20.733
e obtém o método
diretamente do array.

00:01:20.767 --> 00:01:23.600
Estou curioso.
Vejamos o array no MDN.

00:01:25.967 --> 00:01:29.200
Abaixo vemos
os mesmos métodos

00:01:29.233 --> 00:01:32.533
aos quais o array individual,
"myArray", tem acesso.

00:01:32.567 --> 00:01:37.600
Muita repetição.
Vimos "keys", "push"

00:01:37.633 --> 00:01:40.000
e já utilizamos
"join" antes.

00:01:41.033 --> 00:01:45.833
Parece que estávamos sempre
utilizando métodos de protótipo.

00:01:45.867 --> 00:01:49.833
Esses são métodos que definimos
no array ou no objeto.

00:01:49.867 --> 00:01:53.533
Em vez disso, os métodos
acessados pelo array individual

00:01:53.567 --> 00:01:56.400
são herdados
do protótipo do array.

00:01:56.433 --> 00:01:57.633
Muito legal!

