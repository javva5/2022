WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.094
这是之前的 dog 对象和 invokeTwice 函数

00:00:04.094 --> 00:00:12.426
总结下 我们尝试调用 invokeTwice 并传入 dog.growOneYear

00:00:12.426 --> 00:00:16.125
但返回的是 undefined

00:00:16.125 --> 00:00:19.850
为了解决这一问题 我们可以使用 bind 方法

00:00:19.850 --> 00:00:24.200
它会返回一个新的函数 并且正确地绑定 this 的值

00:00:24.199 --> 00:00:30.155
bind 是直接在函数中调用的方法 我们来调用它

00:00:30.155 --> 00:00:35.870
向 bind 中传入一个参数

00:00:35.869 --> 00:00:38.689
在 bind 函数被调用时作为目标函数的 this 参数

00:00:38.689 --> 00:00:42.414
目标函数是 growOneYear

00:00:42.414 --> 00:00:46.534
这里 我们不希望 this 变成全局对象或窗口

00:00:46.534 --> 00:00:49.472
在这里调用 invokeTwice 时就是这种情况

00:00:49.472 --> 00:00:52.759
我们实际上希望 this 为 dog

00:00:52.759 --> 00:00:58.649
因为我们希望狗的年龄加一 我们输入 dog

00:00:58.649 --> 00:01:01.464
this 的返回值是一个新的函数

00:01:01.465 --> 00:01:03.560
将其保存到新的变量中

00:01:03.560 --> 00:01:09.189
称之为 myGrow

00:01:09.189 --> 00:01:17.326
现在可以将 myGrow 传入 invokeTwice 中

00:01:17.326 --> 00:01:23.370
invokeTwice 函数刚刚执行的操作是调用了 myGrow 两次

00:01:23.370 --> 00:01:25.335
可以在这里看到

00:01:25.334 --> 00:01:28.544
现在 如果我们访问 dog 的 age 属性

00:01:28.545 --> 00:01:32.415
应该会看到更新的值

00:01:32.415 --> 00:01:35.495
的确更新了 结果为 7

00:01:35.495 --> 00:01:39.640
总结下 bind 是可以直接在函数中调用的方法

00:01:39.640 --> 00:01:45.000
返回该函数的副本 并具有特定的 this 值

