WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.585
这里有一个叫做 invokeTwice 的函数

00:00:03.585 --> 00:00:08.550
它在这里传入一个回调函数 并调用它两次

00:00:08.550 --> 00:00:12.780
此外 这里还有一个非常简单的 dog 对象

00:00:12.779 --> 00:00:14.039
它有两个属性

00:00:14.039 --> 00:00:16.140
age 和 growOneYear

00:00:16.140 --> 00:00:19.240
后者是使 age 属性加一的方法

00:00:19.239 --> 00:00:24.320
我们尝试在 dog 上调用 growOneYear

00:00:24.579 --> 00:00:28.859
看看 dog 的 age 属性

00:00:28.859 --> 00:00:31.875
并看看新的年龄

00:00:31.875 --> 00:00:38.064
现在是 6 岁 之前是 5 岁

00:00:38.064 --> 00:00:42.974
如果将 dog.growOneYear 当做函数

00:00:42.975 --> 00:00:50.344
传入 invokeTwice 中呢？按下 Enter 键

00:00:50.344 --> 00:00:55.710
再次检查下 dog 的 age 属性

00:00:55.710 --> 00:00:59.685
实际上没变化

00:00:59.685 --> 00:01:02.280
狗的年龄依然是 6 岁

00:01:02.280 --> 00:01:05.519
为何 invokeTwice 不可行呢？

00:01:05.519 --> 00:01:10.465
因为 invokeTwice 调用 dog.growOneYear

00:01:10.465 --> 00:01:12.635
但是当做函数来调用它

00:01:12.635 --> 00:01:15.371
因此 this 设成了全局对象

00:01:15.370 --> 00:01:19.194
而不是 dog 对象

00:01:19.194 --> 00:01:22.009
因为使用回调是很常见的现象

00:01:22.010 --> 00:01:25.000
因此 我们需要一种保存 this 引用的方式

