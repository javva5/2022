WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.085
Now that we have a basic idea of what a promise looks like and what's going on there,

00:00:05.085 --> 00:00:09.930
it's time to get to one of the big benefits of using promises chaining.

00:00:09.930 --> 00:00:12.540
One of the awesome things about promises is

00:00:12.540 --> 00:00:15.780
how easy it is to create a sequence of events.

00:00:15.780 --> 00:00:18.360
Here is the code example from the last section,

00:00:18.360 --> 00:00:20.085
but with some new things added,

00:00:20.085 --> 00:00:24.720
I've added a few more then clauses to form what's called a promise chain.

00:00:24.720 --> 00:00:26.550
If we run this code,

00:00:26.550 --> 00:00:30.045
we can see each letter alerted to the screen in order.

00:00:30.045 --> 00:00:33.435
The first then clause handles a success response.

00:00:33.435 --> 00:00:36.045
But usually if the response is successful,

00:00:36.045 --> 00:00:40.605
we want to do something with the result or maybe many things with that result.

00:00:40.605 --> 00:00:45.050
All of that logic for handling the success result data will happen in

00:00:45.050 --> 00:00:50.420
the then clauses and we can chain as many of these clauses in a row as we want.

00:00:50.420 --> 00:00:56.870
This example shows that then clauses run in order and only run when the promise resolves.

00:00:56.870 --> 00:01:01.175
But otherwise, it's not a helpful example because there's no data.

00:01:01.175 --> 00:01:05.640
So let's add that. Here's an example with data added.

00:01:05.640 --> 00:01:09.230
When we force a promise to resolve using the result method,

00:01:09.230 --> 00:01:14.555
we have the option to pass in data to mock the result of a real promise success.

00:01:14.555 --> 00:01:16.955
In this case, I'm just passing in

00:01:16.955 --> 00:01:20.660
an array of the letter sequence we used in the previous example.

00:01:20.660 --> 00:01:25.330
This data is passed to the first then clause as an argument.

00:01:25.330 --> 00:01:28.865
The first then clause prints out the first letter.

00:01:28.865 --> 00:01:32.030
Remember that array shift is a mutating method.

00:01:32.030 --> 00:01:36.040
It edits the original array by removing the first item and returning it.

00:01:36.040 --> 00:01:39.610
So here I'm removing the first letter and console logging it.

00:01:39.610 --> 00:01:43.130
Then I'm returning a shorter array.

00:01:43.130 --> 00:01:48.455
Look, the shorter array ends up as the argument to the next then clause.

00:01:48.455 --> 00:01:50.515
This is important to remember,

00:01:50.515 --> 00:01:53.380
whatever is returned from a then clause

00:01:53.380 --> 00:01:56.590
becomes the argument to the next clause in the chain.

00:01:56.590 --> 00:01:59.650
Which is incredibly handy because it means we can edit

00:01:59.650 --> 00:02:03.125
and change the shape of data as we pass it down the chain.

00:02:03.125 --> 00:02:06.715
One more concept to cover and one more code example.

00:02:06.715 --> 00:02:09.835
This is how we handle errors in promise chains.

00:02:09.835 --> 00:02:12.100
When I run this code example,

00:02:12.100 --> 00:02:17.170
you see that if the promise chain encounters an error at any point in the chain,

00:02:17.170 --> 00:02:20.725
it stops the promise chain and runs the catch clause.

00:02:20.725 --> 00:02:24.080
We will cover how to use this to our advantage later on.

00:02:24.080 --> 00:02:29.055
Another little bonus if you haven't seen it before is this throw new Error syntax.

00:02:29.055 --> 00:02:33.265
Sometimes it's nice to be able to create an error and pass it a message.

00:02:33.265 --> 00:02:37.010
It comes in handy often for me when I'm writing JavaScript programs.

00:02:37.010 --> 00:02:38.730
That was a lot.

00:02:38.730 --> 00:02:40.965
So here's a two second recap.

00:02:40.965 --> 00:02:43.665
We can chain then clauses.

00:02:43.665 --> 00:02:48.485
They always run in order and we can make as many as we want.

00:02:48.485 --> 00:02:53.815
Whatever is returned by a then clause becomes the argument to the next one.

00:02:53.815 --> 00:02:56.750
If there is an error anywhere in the chain,

00:02:56.750 --> 00:03:00.270
the chain is broken and the catch clause runs.

