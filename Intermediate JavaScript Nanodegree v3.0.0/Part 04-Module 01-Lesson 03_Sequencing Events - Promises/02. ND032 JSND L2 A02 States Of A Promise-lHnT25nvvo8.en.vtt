WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.075
Now, let's talk about what promises do.

00:00:03.075 --> 00:00:06.870
I love libraries, so I'm going to use them as an example.

00:00:06.870 --> 00:00:11.745
If I go to a library and ask a librarian for a specific title or volume,

00:00:11.745 --> 00:00:16.740
I begin a contract where the librarian has agreed to answer my question.

00:00:16.740 --> 00:00:19.980
In a way, there is a promise that I as

00:00:19.980 --> 00:00:23.535
the customer will get an answer to my question about the book.

00:00:23.535 --> 00:00:25.440
By asking my question,

00:00:25.440 --> 00:00:27.615
I initiated a promise.

00:00:27.615 --> 00:00:32.520
An important thing to note though is that when I ask if the book is available,

00:00:32.520 --> 00:00:36.210
I don't immediately get a book or even an answer.

00:00:36.210 --> 00:00:38.935
While the librarian is looking up the book,

00:00:38.935 --> 00:00:40.510
I am just waiting,

00:00:40.510 --> 00:00:44.270
and all I have is the promise that I'll get an answer about the book.

00:00:44.270 --> 00:00:48.080
In this way, the promise itself is not the answer I want,

00:00:48.080 --> 00:00:51.790
but you might call it a placeholder for an answer that will come later.

00:00:51.790 --> 00:00:55.940
There are really only two possible responses to my request,

00:00:55.940 --> 00:00:59.915
either the library has the book or they don't.

00:00:59.915 --> 00:01:02.615
There might be various details to either case,

00:01:02.615 --> 00:01:04.415
but when it really boils down to it,

00:01:04.415 --> 00:01:06.160
those are the options.

00:01:06.160 --> 00:01:10.625
Now, let's tie this scenario into the syntax you saw earlier.

00:01:10.625 --> 00:01:14.450
Now, let's take a look at the syntax you saw before the video.

00:01:14.450 --> 00:01:17.915
First, we have a new promise initiation,

00:01:17.915 --> 00:01:21.185
this was me asking the librarian for the book.

00:01:21.185 --> 00:01:24.215
When you ask for data or any other resource,

00:01:24.215 --> 00:01:26.900
it can always boil down to a pass or fail.

00:01:26.900 --> 00:01:28.280
Like with my book,

00:01:28.280 --> 00:01:30.970
either the library had it or they didn't.

00:01:30.970 --> 00:01:35.540
In this code, we're not actually reaching out to an API or requesting anything,

00:01:35.540 --> 00:01:38.735
we're just running these resolve or reject methods.

00:01:38.735 --> 00:01:41.755
You don't have to worry too much about what they do right now,

00:01:41.755 --> 00:01:46.960
enough to say that they force the promise to complete with either a success or a failure.

00:01:46.960 --> 00:01:50.570
The success or failure outcomes are handled

00:01:50.570 --> 00:01:54.365
by these then and catch clauses you see after the promise.

00:01:54.365 --> 00:01:59.720
You see that if I run this promise with the resolve statement commented in,

00:01:59.720 --> 00:02:05.075
the then statement runs because then handles the success response.

00:02:05.075 --> 00:02:08.135
If I comment in the reject method though,

00:02:08.135 --> 00:02:11.105
you can see that the catch statement runs instead of the

00:02:11.105 --> 00:02:15.365
then because catch handles a failure response or error,

00:02:15.365 --> 00:02:16.840
because in this example,

00:02:16.840 --> 00:02:19.595
the promise does not take any time to complete,

00:02:19.595 --> 00:02:21.860
we don't observe the pending state,

00:02:21.860 --> 00:02:26.765
but we could simulate it by creating a timeout or something in the body of this promise.

00:02:26.765 --> 00:02:29.255
When the promise is no longer pending,

00:02:29.255 --> 00:02:31.849
meaning it has been either resolved or rejected,

00:02:31.849 --> 00:02:35.255
it is settled or you might hear fulfilled as well.

00:02:35.255 --> 00:02:38.330
The settled or fulfilled state does not take any time,

00:02:38.330 --> 00:02:41.230
it happens immediately with a resolve or reject,

00:02:41.230 --> 00:02:44.650
it's just a generic way of saying the promise was completed,

00:02:44.650 --> 00:02:47.300
and those are the basics of a promise.

00:02:47.300 --> 00:02:50.540
Not too bad, right? Now, let's take a look at

00:02:50.540 --> 00:02:54.080
the library example with promise states added in.

00:02:54.080 --> 00:02:55.925
By asking for a book,

00:02:55.925 --> 00:02:58.130
I initiated a promise.

00:02:58.130 --> 00:03:02.095
While the librarian looks for the book and I am waiting,

00:03:02.095 --> 00:03:04.290
that promise is pending.

00:03:04.290 --> 00:03:07.100
When the librarian is done looking for the book,

00:03:07.100 --> 00:03:08.915
the promise is settled.

00:03:08.915 --> 00:03:11.435
If the librarian found my book,

00:03:11.435 --> 00:03:13.040
the promise is resolved,

00:03:13.040 --> 00:03:15.395
and if the librarian couldn't find my book,

00:03:15.395 --> 00:03:17.230
the promise is rejected.

00:03:17.230 --> 00:03:20.070
One last thing, I want to touch on,

00:03:20.070 --> 00:03:22.785
how are promises asynchronous?

00:03:22.785 --> 00:03:25.280
There was a key part of this video that should

00:03:25.280 --> 00:03:27.710
have triggered your non-blocking spidey sense,

00:03:27.710 --> 00:03:30.665
it was at the very beginning in the library analogy.

00:03:30.665 --> 00:03:34.925
I made a request for something that was not immediately available,

00:03:34.925 --> 00:03:36.785
and I was given a promise.

00:03:36.785 --> 00:03:39.770
Until that promise resolved or rejected,

00:03:39.770 --> 00:03:41.945
I was just waiting.

00:03:41.945 --> 00:03:46.950
That waiting is the signal that this can and should be a non-blocking action,

00:03:46.950 --> 00:03:48.845
and that is exactly what happens.

00:03:48.845 --> 00:03:50.360
When a promise is pending,

00:03:50.360 --> 00:03:52.475
the program will go on and complete

00:03:52.475 --> 00:03:56.910
other steps until a resolve or reject response comes back.

