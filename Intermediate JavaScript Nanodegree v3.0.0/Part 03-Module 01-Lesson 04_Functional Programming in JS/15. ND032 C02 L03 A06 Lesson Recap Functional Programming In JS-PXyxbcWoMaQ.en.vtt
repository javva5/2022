WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.995
We've done a lot in this lesson.

00:00:01.995 --> 00:00:06.075
We can now create elements with JavaScript and render them to a page.

00:00:06.075 --> 00:00:09.050
But was it functional. Let's take a look.

00:00:09.050 --> 00:00:11.774
As far as functional things in our application,

00:00:11.774 --> 00:00:16.020
we had reusable components that were made of pure functions.

00:00:16.020 --> 00:00:18.600
We were also able to pass the store as

00:00:18.600 --> 00:00:22.500
an argument through our app instead of referencing it directly.

00:00:22.500 --> 00:00:25.140
But there was a lot that wasn't functional too.

00:00:25.140 --> 00:00:31.710
We had to find the DOM with getElementByID and we had to fill it with innerHTML.

00:00:31.710 --> 00:00:34.275
We also had to update state using

00:00:34.275 --> 00:00:38.425
Object.assign that breaks the functional idea of immutability.

00:00:38.425 --> 00:00:43.565
So we found that working in a functional style with the DOM is well, impossible.

00:00:43.565 --> 00:00:45.380
But then what's the point?

00:00:45.380 --> 00:00:48.710
Why even bother with all this functional programming for the web?

00:00:48.710 --> 00:00:51.400
We should just give up and use jQuery.

00:00:51.400 --> 00:00:53.120
But that's not the case.

00:00:53.120 --> 00:00:56.120
The real answer, which react has proven out very well,

00:00:56.120 --> 00:01:00.005
is that we can still benefit from the advantages of a functional style,

00:01:00.005 --> 00:01:02.830
even if we can't use it 100 percent of the time.

00:01:02.830 --> 00:01:07.910
By relegating our non-functional processes to a small self-contained part of our app,

00:01:07.910 --> 00:01:10.970
we can write in a functional style the rest of the time and get

00:01:10.970 --> 00:01:14.770
the confidence and clarity it offers in the places it matters most.

00:01:14.770 --> 00:01:18.390
Our components, application data, and layout.

