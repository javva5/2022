WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.430
Here's an example of a functional mixin.

00:00:02.430 --> 00:00:04.810
We have a function that takes in a single object,

00:00:04.810 --> 00:00:07.080
has local variable isCold,

00:00:07.080 --> 00:00:12.660
and also returns the return value of Object.assign with a target object that's blank,

00:00:12.660 --> 00:00:15.360
a source object that you pass in,

00:00:15.360 --> 00:00:19.165
as well as another object with two methods, melt and isCold.

00:00:19.165 --> 00:00:21.780
Again, just to make sure we're on the same page,

00:00:21.780 --> 00:00:25.215
let's go ahead and invoke this function and save it to a variable.

00:00:25.215 --> 00:00:26.470
Let's call it iceCream.

00:00:26.470 --> 00:00:28.900
For the single argument that it takes in,

00:00:28.900 --> 00:00:30.610
it just pass in a blank object.

00:00:30.610 --> 00:00:33.430
So, if we check out what iceCream looks like,

00:00:33.980 --> 00:00:36.560
it should just have two methods,

00:00:36.560 --> 00:00:38.600
melt and isCold, which

00:00:38.600 --> 00:00:41.770
exactly what we should expect from the IceCreamFactory functional mixin.

00:00:41.770 --> 00:00:44.715
Now, let's go ahead and write another functional mixin,

00:00:44.715 --> 00:00:47.645
but this time let's call it ConeFactory.

00:00:47.645 --> 00:00:49.555
Again, just for this example,

00:00:49.555 --> 00:00:52.115
we'll keep the format pretty similar to IceCreamFactory.

00:00:52.115 --> 00:00:55.010
We'll pass in a single object and on top of that,

00:00:55.010 --> 00:00:57.395
we'll also have a single local variable on it.

00:00:57.395 --> 00:00:59.645
Let's call it, isDry.

00:00:59.645 --> 00:01:02.930
I'll set that to true because nobody likes a soggy IceCreamCone,

00:01:02.930 --> 00:01:05.020
well, at least I don't.

00:01:05.020 --> 00:01:10.560
Just like IceCreamFactory, let's also return the return value of Object.assign.

00:01:10.560 --> 00:01:12.170
We'll have the target object be

00:01:12.170 --> 00:01:17.725
a blank object and we'll have the first source object be the object that we pass in.

00:01:17.725 --> 00:01:20.490
Again, we'll have this one have to methods as well.

00:01:20.490 --> 00:01:22.695
We'll call the first one, soggy.

00:01:22.695 --> 00:01:24.725
What this soggy method will do,

00:01:24.725 --> 00:01:28.390
will just change the value of the isDry local variable over here So,

00:01:28.390 --> 00:01:33.670
rather than true, let's go ahead and reassign isDry to false.

00:01:34.580 --> 00:01:41.275
What we want to do is have another method that simply returns the value of isDry.

00:01:41.275 --> 00:01:43.975
We can just call this property isDry.

00:01:43.975 --> 00:01:46.855
Great. So, I'm going to hit Enter.

00:01:46.855 --> 00:01:50.000
Now, let me actually go ahead and clear my console,

00:01:50.000 --> 00:01:51.985
just so I have a little bit more space.

00:01:51.985 --> 00:01:54.120
So, just as we mentioned,

00:01:54.120 --> 00:01:57.900
one of the great things about a functional mixin is that its composable.

00:01:57.900 --> 00:02:00.500
We can actually use them as individual pieces of code

00:02:00.500 --> 00:02:03.330
that add specific properties like an assembly line.

00:02:03.330 --> 00:02:05.880
Now, that we have are two functions defined,

00:02:05.880 --> 00:02:07.850
we can do something pretty interesting.

00:02:07.850 --> 00:02:11.165
Let's go ahead and make a new variable and call it iceCreamCone.

00:02:11.165 --> 00:02:14.240
What this will be, is a return value of

00:02:14.240 --> 00:02:18.295
one function passed in as an argument into another function.

00:02:18.295 --> 00:02:19.660
So, in other words,

00:02:19.660 --> 00:02:22.040
we actually pass return value of

00:02:22.040 --> 00:02:27.600
cone factory which is an object as the argument into IceCreamFactory.

00:02:27.600 --> 00:02:29.559
Again, over here for IceCreamFactory,

00:02:29.559 --> 00:02:31.245
the object that we pass in,

00:02:31.245 --> 00:02:32.960
is simply just going to be the return value of

00:02:32.960 --> 00:02:37.375
cone factory and will pass into cone factory an empty object.

00:02:37.375 --> 00:02:40.520
If we track what iceCreamCone looks like,

00:02:40.870 --> 00:02:44.570
we see that it's a new object with four methods at it,

00:02:44.570 --> 00:02:47.405
soggy, isDry, melt, and isCold.

00:02:47.405 --> 00:02:49.970
So, essentially what we did over here,

00:02:49.970 --> 00:02:53.525
was that since we know that functional mixins are composable,

00:02:53.525 --> 00:02:56.510
we can actually create a cone using the cone factory and

00:02:56.510 --> 00:03:00.470
extend it from the functions from the IceCreamFactory.

