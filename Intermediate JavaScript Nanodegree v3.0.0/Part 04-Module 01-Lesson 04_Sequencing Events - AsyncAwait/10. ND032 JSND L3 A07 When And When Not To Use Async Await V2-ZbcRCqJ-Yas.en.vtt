WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.910
When async/await was added to JavaScript,

00:00:02.910 --> 00:00:04.605
it was very exciting.

00:00:04.605 --> 00:00:08.325
This was a feature that had already seen success after being added to

00:00:08.325 --> 00:00:12.300
other languages and was much looked forward to in the JavaScript community.

00:00:12.300 --> 00:00:14.295
With some of that excitement though,

00:00:14.295 --> 00:00:18.450
you began to see the async/await syntax popping up everywhere,

00:00:18.450 --> 00:00:22.590
and in some cases popping up even where it maybe shouldn't.

00:00:22.590 --> 00:00:26.935
So how can you know when you should or shouldn't use async/await?

00:00:26.935 --> 00:00:30.155
We've already touched on this a little in previous sections,

00:00:30.155 --> 00:00:32.780
but let's take a look at some of the facts we already know

00:00:32.780 --> 00:00:36.230
about this syntax and draw some conclusions.

00:00:36.230 --> 00:00:39.530
Async/await is a great idea if you need

00:00:39.530 --> 00:00:43.205
the results from multiple promises to be used together.

00:00:43.205 --> 00:00:46.480
Like the math example we saw at the beginning of the lesson,

00:00:46.480 --> 00:00:49.280
there was no way to get around waiting for both of

00:00:49.280 --> 00:00:52.415
the values to be ready in order to do math on them.

00:00:52.415 --> 00:00:56.375
This is a clear sign that async/await is the syntax to choose.

00:00:56.375 --> 00:00:58.460
If you need to perform a lot of logic

00:00:58.460 --> 00:01:01.820
sequentially and each step relies on a previous step,

00:01:01.820 --> 00:01:05.650
this is also a sign that async/await is the correct style.

00:01:05.650 --> 00:01:09.710
Lastly, the logic that would have gone into a then()/ catch(),

00:01:09.710 --> 00:01:13.985
might be written more concisely or cleanly in a regular function.

00:01:13.985 --> 00:01:18.880
This one goes back to your personal preference for or against then Jane's.

00:01:18.880 --> 00:01:23.405
But you can try it both ways and see which syntax you think is cleaner.

00:01:23.405 --> 00:01:26.405
On the other hand, you should take a moment to think

00:01:26.405 --> 00:01:29.680
before using async/await if any of these are true.

00:01:29.680 --> 00:01:34.070
First, think about if the function needs to use await.

00:01:34.070 --> 00:01:38.345
We add async before a function to be able to use the word await

00:01:38.345 --> 00:01:43.325
before promises and other async functions to handle them in asynchronous fashion.

00:01:43.325 --> 00:01:46.400
It stands to reason then that if your function does

00:01:46.400 --> 00:01:49.535
not have any asynchronous actions to await,

00:01:49.535 --> 00:01:52.550
you shouldn't be throwing the async word on there.

00:01:52.550 --> 00:01:55.925
Second, if you want a function to return a promise,

00:01:55.925 --> 00:02:00.380
create a promise with the promise syntax we saw in the last lesson.

00:02:00.380 --> 00:02:04.460
Using the async word to force a function to return a promise,

00:02:04.460 --> 00:02:08.080
is in my mind at least an anti-pattern that should be avoided.

00:02:08.080 --> 00:02:11.990
Last, this is more of a word of caution instead of a rule.

00:02:11.990 --> 00:02:16.895
But before going wild with the async paintbrush and asyncing all the things,

00:02:16.895 --> 00:02:20.075
stop to consider, what happens when you put

00:02:20.075 --> 00:02:24.215
async in front of a function that had previously not been async?

00:02:24.215 --> 00:02:29.870
Yes, it will now return a promise where maybe it used to return a value.

00:02:29.870 --> 00:02:32.195
If you haven't accounted for this difference,

00:02:32.195 --> 00:02:35.800
you could cause chaos in your programs by turning things async.

00:02:35.800 --> 00:02:41.105
In general, you can use async/await anywhere you would use promises and it will work.

00:02:41.105 --> 00:02:45.275
But taking a minute to ask yourself what syntax is best for the job,

00:02:45.275 --> 00:02:47.880
could save you a lot of trouble.

