WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.700
In this challenge, you were tasked with wrapping

00:00:02.700 --> 00:00:05.990
logic that existed into try-catch blocks.

00:00:05.990 --> 00:00:09.660
There are lots of different solutions you could have found to these challenges,

00:00:09.660 --> 00:00:13.290
but here I'll give some of mine just so that you can see an example.

00:00:13.290 --> 00:00:16.065
For instance, for this first challenge,

00:00:16.065 --> 00:00:18.570
my solution looked something like this.

00:00:18.570 --> 00:00:22.530
I've taken the bulk of the code and wrapped it in the try

00:00:22.530 --> 00:00:27.110
and then created some error handling around that functionality,

00:00:27.110 --> 00:00:30.500
where I'm sending an error to the console as well as

00:00:30.500 --> 00:00:32.870
a console log message that could also act

00:00:32.870 --> 00:00:35.859
as an alert for the user if that were necessary.

00:00:35.859 --> 00:00:38.210
You can see that when I run this code and look

00:00:38.210 --> 00:00:40.430
for the critically endangered animals which do

00:00:40.430 --> 00:00:45.050
exist in this list that I get back the list that I expected.

00:00:45.050 --> 00:00:50.150
But if instead I tried to look for extinct animals which don't exist in this list,

00:00:50.150 --> 00:00:51.935
then when I run this code,

00:00:51.935 --> 00:00:56.075
you can see that I get the error printed just like I wanted,

00:00:56.075 --> 00:00:59.815
and then I also get my message at the very end.

00:00:59.815 --> 00:01:04.525
This is one example of how you could wrap this logic in a try-catch block.

00:01:04.525 --> 00:01:08.300
Here's an example solution for the second challenge.

00:01:08.300 --> 00:01:12.560
Here, I've separated this out into a try catch,

00:01:12.560 --> 00:01:17.200
and I've noted which animal there was a problem fetching.

00:01:17.200 --> 00:01:18.815
When I run the code,

00:01:18.815 --> 00:01:22.475
you can see that I get each animal with the correct message

00:01:22.475 --> 00:01:27.160
based on whether they do exist in the list or if they do not.

00:01:27.160 --> 00:01:29.240
For the last part of this challenge,

00:01:29.240 --> 00:01:33.170
I decided to use the finally method as well as the try and catch.

00:01:33.170 --> 00:01:36.535
Here I put the bulk of the logic into the try statement.

00:01:36.535 --> 00:01:39.305
But whether the animal is found or not,

00:01:39.305 --> 00:01:42.815
we still want to tell the user which animal they searched for.

00:01:42.815 --> 00:01:45.080
So I decided that that worked well.

00:01:45.080 --> 00:01:46.585
in a finally clause.

00:01:46.585 --> 00:01:49.250
You can see that if we run this code,

00:01:49.250 --> 00:01:54.440
I get mouse was searched even though mouse does not exist in our list of animals.

00:01:54.440 --> 00:01:58.730
Hopefully all of these challenges just gave you a better sense for what things

00:01:58.730 --> 00:02:03.140
would belong in a try versus in a catch versus in a finally statement.

00:02:03.140 --> 00:02:08.130
You'll get the chance to see more of these later on in the Async/Await lesson

