{
  "data": {
    "lesson": {
      "id": 960486,
      "key": "03cc6759-68e0-4a8b-9b30-119653103fab",
      "title": "Functional JS Syntax",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Experience writing functional programming with JavaScript & ES6 syntax",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/03cc6759-68e0-4a8b-9b30-119653103fab/960486/1594154498720/Functional+JS+Syntax+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/03cc6759-68e0-4a8b-9b30-119653103fab/960486/1594154495882/Functional+JS+Syntax+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 960475,
          "key": "7e256789-500d-4d44-b4c4-19963317cb8a",
          "title": "Functional JS Syntax Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e256789-500d-4d44-b4c4-19963317cb8a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960440,
              "key": "6b313db0-1a59-4019-b598-799f7390c8c2",
              "title": "ND032 C02 L02 A01 Intro To Functional JS Syntax",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Bj4FoLCSdmk",
                "china_cdn_id": "Bj4FoLCSdmk.mp4"
              }
            },
            {
              "id": 960437,
              "key": "5fd441e3-d8e2-4d74-bd3a-e76261b1c688",
              "title": "Summary & Outline",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Outline\n\nES6 introduced a lot of new syntax, and much of the syntax was intentionally added to support writing JavaScript in a Functional style. In this lesson you will learn about the following changes in syntax and specifically how they help us write functional programs: \n- Array Methods\n- Variables\n- Object Methods",
              "instructor_notes": ""
            },
            {
              "id": 960464,
              "key": "b21c17c1-c295-4eb0-b06d-862e216ab228",
              "title": "Course Overview",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/January/5e0e3a86_l2-3-courseoverview/l2-3-courseoverview.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b21c17c1-c295-4eb0-b06d-862e216ab228",
              "caption": "We will continue on to applying the foundations of FP we just learned to JavaScript.",
              "alt": "Course Overview Diagram",
              "width": 612,
              "height": 201,
              "instructor_notes": null
            },
            {
              "id": 960450,
              "key": "8d528338-ee1b-4a96-a46d-58c419b96bf7",
              "title": "JS basic research",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8d528338-ee1b-4a96-a46d-58c419b96bf7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To the docs! Who better to be an authority on what kind of language JavaScript is than ECMA? Read this section of the JavaScript docs [https://www.ecma-international.org/ecma-262/5.1/] to answer the following question. \r\rWhat kind of programming language is JavaScript? ",
                "matchers": [
                  {
                    "expression": "/object oriented/\n"
                  }
                ]
              }
            },
            {
              "id": 1043510,
              "key": "965722dd-22a0-420d-9eec-82daa19fd8ff",
              "title": "JS Basic Research",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "965722dd-22a0-420d-9eec-82daa19fd8ff",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To the docs! Who better to be an authority on what kind of language JavaScript is than ECMA? Read this section of the JavaScript docs [https://www.ecma-international.org/ecma-262/5.1/] to answer the following question. \r\rWhat kind of programming language is JavaScript? ",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Object Oriented",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Functional",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Imperative",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Scripting",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 960484,
          "key": "5af884b4-d55c-46d2-9548-2c414572ad4b",
          "title": "Array Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5af884b4-d55c-46d2-9548-2c414572ad4b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960438,
              "key": "3629acef-82b6-4b91-b0a6-ae99e32c8956",
              "title": "ND032 C02 L02 A02 ES6 Array Methods For Functional Programming",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mis4K-51RvE",
                "china_cdn_id": "mis4K-51RvE.mp4"
              }
            },
            {
              "id": 960451,
              "key": "ea722352-0570-436a-9220-721e193a5ad1",
              "title": "Array Methods - Iterators",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's start with what was most likely one of the first things you learned to do in JavaScript -- `for` loops. `for` loops are great, we seem all the time, but - they aren’t functional. Take a moment and think - what about a `for` loop wouldn’t be functional?",
              "instructor_notes": ""
            },
            {
              "id": 960439,
              "key": "fcfc9721-a201-4640-9b4f-3647049da37e",
              "title": "What isn't functional about for loops?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fcfc9721-a201-4640-9b4f-3647049da37e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these are reasons that JavaScript `for` loops are not functional?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "For loops continuously update a variable, therefore breaking the immutable rule.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "For loops do not take arguments, therefore they rely on side effects.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "For loops are not functions.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 960446,
              "key": "25ef6a52-e676-4180-ac2c-50b758a49f36",
              "title": "Array methods",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Functional programming only allows us to use pure functions to do work, so functional programs use recursion rather than loops. A truly functional language won’t even have the functionality of `for` loops built into the language! In the same way, do...while loops, for..in, and all the other similar looping constructs don’t have a place in Functional programming. So, how do we automatically repeat actions in functional JS? Thankfully, ES6 came packed with functions for doing just that. Get ready for some serious array practice!",
              "instructor_notes": ""
            },
            {
              "id": 960458,
              "key": "0a4c5475-6589-4b5c-9076-e370da41d568",
              "title": "Array Methods Overview",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/January/5e0e3a86_l2-9-arraymethodsoverview/l2-9-arraymethodsoverview.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0a4c5475-6589-4b5c-9076-e370da41d568",
              "caption": "An Overview of the Array Methods used in Functional Programming",
              "alt": "ES6 Array Methods",
              "width": 960,
              "height": 540,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 960477,
          "key": "a5df32a2-1138-471c-86a0-1053d1c99bd5",
          "title": "The Map Method",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5df32a2-1138-471c-86a0-1053d1c99bd5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960447,
              "key": "278ac563-14d5-46ba-ab40-2f0bc7f16a61",
              "title": "ND032 C02 L02 A03 ES6 Map",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ItLJRQJJfhs",
                "china_cdn_id": "ItLJRQJJfhs.mp4"
              }
            },
            {
              "id": 966180,
              "key": "9d71a298-5f7b-4daf-8c3f-b55c0c5c584a",
              "title": "Code Review",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Code Review\n\n### Array Map - Basic\n``` javascript\nconst captains = ['Picard', 'Adama', 'Reynolds', 'Beeblebrox']\n\n// create new array\nconst titles = captains.map(cap => `Captain ${cap}`)\n\n// equivalent to\nconst titles = captains.map(cap => {\n    return `Captain ${cap}`\n})\n\nconsole.log('Resulting Array: ', titles)\n// expected output: Resulting Array: ['Captain Picard', 'Captain Adama', 'Captain Reynolds', 'Captain Beeblebrox']\nconsole.log('Original Array:', captains)\n// is unchanged, expected output: Original Array: ['Picard', 'Adama', 'Reynolds', 'Beeblebrox']\n```\n\n## Array Maps - Doubling\n``` javascript\nconst nums = [1, 2, 3, 4, 5]\n\n// Internal callback\n// ----------------------------------------------------------------------\nconst doubles = nums.map(x => x * 2)\n\nconsole.log(doubles)\n// expected output: Array [2, 4, 6, 8, 10]\n\n// External callback\n// ----------------------------------------------------------------------\nconst doubler = function(x) {\n    return x * 2\n}\n\nconst doubles2 = nums.map(x => {\n    return doubler\n})\n\nconsole.log(doubles2)\n// expected output: Array [2, 4, 6, 8, 10]\n```",
              "instructor_notes": ""
            },
            {
              "id": 966230,
              "key": "9ae131ab-2c1c-4cfe-b278-fcd90b92ba44",
              "title": "Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Instructions\nNext, you will practice what you learned about the Map Method in the following exercise. If you need a reminder on the instructions head over to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\nThere will be 5 exercises for you to practice using the Map Method. \n\n### Local Machine\nThe next exercises can be found at `.../exercises/functional_js_syntax/array_map.js`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966870,
          "key": "d3198107-bcce-46a4-94e3-33a2487e530d",
          "title": "Exercise: Map Method",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d3198107-bcce-46a4-94e3-33a2487e530d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966887,
              "key": "de063b95-2f54-4720-a322-661109da1c92",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966870xGENERIClsewdzl5",
              "pool_id": "webterminal",
              "view_id": "generic-cbobr",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/array_map.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 966238,
          "key": "a7cec6a3-ebec-4d11-9901-5709637d450a",
          "title": "Advanced Map Method",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a7cec6a3-ebec-4d11-9901-5709637d450a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960436,
              "key": "8fb3df2c-8f79-4c6a-ab08-7443cf9c345a",
              "title": "Advanced Map",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Advanced Map\nOne of the things that can be hard to wrap your mind around with the `map` method is what it is doing behind the scenes. So we’re going to walk through it step by step. \n\nYou give the `map` method a function to run on every item in the array - but you never call that function. Instead, **the `map` method calls your function** and the important thing to remember is what arguments it is going to pass to your function. It is easy to assume that the `map` method only passes one argument - the value of the current item in the array - but in fact it passes **three**. These are the three arguments, listed in order:\n\n1. Value of the current item in the array.\n2. Index of the current item in the array.\n3. Copy of the entire original array.",
              "instructor_notes": ""
            },
            {
              "id": 966234,
              "key": "1faf4325-5a88-4ce5-8a05-7800e66efc8d",
              "title": "Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructions\nThe next workspace will let you explore with some of these concepts. Once again if you need more detailed instructions you can go back to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\nThere will be 1 exercise on how you could apply the map method in a real life scenario. \n\n### Local Machine\nThis exercise can be found in `.../exercises/functional_js_syntax/array_adv_map.js` ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966865,
          "key": "5afea8d6-4509-493c-9719-630b79c0e39f",
          "title": "Exercise: Advanced Map Method",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5afea8d6-4509-493c-9719-630b79c0e39f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966895,
              "key": "8ba5565c-e55d-4269-98d9-b58dc21d69a8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966865xGENERIChmbqssl3",
              "pool_id": "webterminal",
              "view_id": "generic-d751q",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/array_adv_map.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 966239,
          "key": "6377a7f6-3a08-4659-8e1a-fc3d243a0901",
          "title": "Map Method Review",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6377a7f6-3a08-4659-8e1a-fc3d243a0901",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966232,
              "key": "919db16b-0021-4fb6-9dcb-30de4d3ccc09",
              "title": "Map Exercise Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Map Practice - Exercise Solution\n\n``` javascript\n// 1. Write a map function to reverse this array:\nconst start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nconst end = start.map(x => abs(x - 11))\nconsole.log(end)\n// expected output: Array [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n// ----------------------------------------------------------\n// 2. Write a map function to print the Job: Name:\nconst shipMates = [[\"Mal\", \"Captain\"], [\"Wash\", \"Pilot\"], [\"Zoey\", \"1st Mate\"], [\"Jayne\", \"Public Relations\"]]\n\nconst result = shipMates.map(arr => arr.reverse().join(': '))\nconsole.log(result)\n\n// expected output: Array [\"Captain: Mal\", etc...]\n\n// ----------------------------------------------------------\n// 3. Write a map function that prints the name: even|odd\nconst awayTeam = [\"Picard\", \"Riker\", \"Troy\", \"Data\"]\n\nconst result = awayTeam.map((name, i) => `${name}: ${i % 2 === 0 ? 'even' : 'odd'}`)\nconsole.log(result)\n// expected output: Array: [\"Picard: even\", \"Riker: odd\", etc...]\n\n\n// ----------------------------------------------------------\n3. Create a multidimensional array of each item and its index in the original Array\n\nconst sciFiShows = ['Manedlorian', 'Enterprise', 'Firefly', 'Battlestar Galactica']\n\nconst result = sciFiShows.map((show, index) => [show, index])\nconsole.log(result)\n// expected output: Array [['Manedlorian', 0], ['Enterprise', 1], ['Firefly', 2], ['Battlestar Galactica', 3]]\n\n// ----------------------------------------------------------\n// 4. For each item in this array, create a multidimensional array containing the entire original array\n\nconst numbers = [1, 2, 3, 4]\n\nconst result = numbers.map((num, index, wholeArray) => wholeArray)\nconsole.log(result)\n// expected output: Array [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\n```",
              "instructor_notes": ""
            },
            {
              "id": 966225,
              "key": "ca6a9604-798b-4504-b651-10cda8f687a0",
              "title": "Advanced Map Exercise Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Advanced Map Practice - Exercise Solution\n``` javascript\n// One common thing we use `map` for in real life is to reformat objects to have a shape that is better for our purposes. For instance, we only care about the name and first three characters of the id for the races below. Use `map` to grab those values and create a new array with them.\n\nvar index = [\n    {key: 1, sector: 10, t_score: 18, id: '1236n7e8', value: 'Klingon'},\n    {key: 4, sector: 145, t_score: 12, id: '293847hs8', value: 'Minbari'},\n    {key: 8, sector: 214, t_score: 5, id: '283hy8347', value: 'Cylon'},\n    {key: 3, sector: 8346, t_score: 10, id: 'n9837ks857', value: 'Jawa'},\n]\n\nconst result = index.map((race) => {\n    return { name: race.value, idFirstThree: race.id.substring(0,3)}\n})\n```",
              "instructor_notes": ""
            },
            {
              "id": 966229,
              "key": "b952d5a2-d90a-4963-acc4-9278bf3dd3a8",
              "title": "Map Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Map Summary\nNow that you have had some hands-on practice with `map` method, let's move onto the next array method, Filter. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 960476,
          "key": "9c77f0e0-50c1-4c3f-818e-390bc8fe77b1",
          "title": "The Filter Method",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c77f0e0-50c1-4c3f-818e-390bc8fe77b1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960454,
              "key": "49f1f1fd-689b-4c02-9bab-cfa0eb5c8291",
              "title": "ES6 Filter",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Filter Method\nYou will see immediate similarities between the map method and our next ES6 array method: filter. The syntax and mechanics of the two methods are almost exactly the same, but the `filter` method acts much like a filter in real life. Passing anything through a filter, we leave behind the things we don’t want and get a finished result of only what we do want. \n\nThe `filter` method is a separator, we give it a function with the logic to distinguish the items we want, and filter runs items in the array through that function. In the end, it creates a new array that contains only the elements that our function allowed. So the ONLY difference between filter and map is that map performs a function on every item in an array, and filter uses a true or false conditional on every item in the array to decide if that value should be kept or discarded. This means that one key differentiator of the filter method is its callback method must return either true or false. If it returns true, the value will be added to the result array; if it returns false, that value is discarded.\n\n### Code Example\nFilter is easiest to learn when you play around with it. Below, you can see how a filter is applied to the `values` list. This function is looking to see if each value in the array resolves to ‘true’ or not. So the ‘filter’ function we are running looks like this: (`v == true`), where ‘v’ is each value in turn. Only array items where this condition is ‘true’ will be included in the new array ‘result’.\n\n``` javascript\nconst values = ['true', true, 'yes', 'no', 1, 0, 'false', false];\n\nconst result = values.filter(v => v == true);\n\nconsole.log(result);\n// expected output: Array [true, 1]\n```\n\nYou’ll get to see and practice using `filter` in the next workspace. You can also check out [Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), which has great information on all of these array methods.",
              "instructor_notes": ""
            },
            {
              "id": 966873,
              "key": "35cf02c6-d89a-404e-8fef-77af7da89925",
              "title": "Exercise Instruction",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructions\nNext, you will practice what you learned about the Filter Method in the following exercise. If you need a reminder on the instructions head over to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\nThere will be 2 exercises to practice what you learned in this concept and 1 exercise on how you could apply the filter method in a real life scenario.\n\n### Local Machine\nThe next exercises can be found at `.../exercises/functional_js_syntax/array_filter.js`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966866,
          "key": "181176ab-e1a4-49d1-8826-facf4487b9fc",
          "title": "Exercise: Filter Method",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "181176ab-e1a4-49d1-8826-facf4487b9fc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966897,
              "key": "bfc59009-1e97-4060-99f5-693e3e9793e7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966866xGENERICb3kgxf0p",
              "pool_id": "webterminal",
              "view_id": "generic-ygno0",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/array_filter.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 966240,
          "key": "1e4a5a97-471f-45f6-92c4-a64ece8249a6",
          "title": "Filter Method Review",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1e4a5a97-471f-45f6-92c4-a64ece8249a6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966233,
              "key": "b1a76854-3305-4d40-88d4-9193dbcd71b5",
              "title": "Exercise Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Filter Practice - Exercise Solution\n\n``` javascript\n// 1. Find all the words with more than 7 characters\nconst words = ['tardis', 'grok', 'frak', 'blaster', 'klingon', 'shepherd']\n\nconst result1 = words.filter(value => value.length > 7);\nconsole.log(result1);\n// expected output: Array ['shepherd']\n\n// ----------------------------------------------------------\n// 2. Find all even values\nconst nums = [12, 13, 14, 15, 16, 17]\n\nconst result2 = nums.filter(value => value%2 === 0);\nconsole.log(result2);\n// expected output: Array [12, 14, 16]\n\n// ----------------------------------------------------------\n// REAL LIFE EXAMPLE\n// We often use filter to quickly pull all the items that share a status or other characteristic. For instance, create a list of all the active bounty hunters from the array below:\n\nconst hunters = [\n    {\n        name: 'Greedo',\n        universe: 'Star Wars',\n        status: 'active',\n    },\n    {\n        name: 'Boba Fett',\n        universe: 'Star Wars',\n        status: 'inactive',\n    },\n    {\n        name: 'Asajj Ventress',\n        universe: 'Star Wars',\n        status: 'unknown',\n    },\n    {\n        name: 'Zam Wesell',\n        universe: 'Star Wars',\n        status: 'inactive',\n    },\n    {\n        name: 'Jango Fett',\n        universe: 'Star Wars',\n        status: 'active',\n    },\n]\n\nconst result = hunters.filter(hunter => hunter.status === 'active');\nconsole.log(result);\n\n// expected output: Array [\n//     {\n//         name: 'Greedo',\n//         universe: 'Star Wars',\n//         status: 'active',\n//     },\n//     {\n//         name: 'Jango Fett',\n//         universe: 'Star Wars',\n//         status: 'active',\n//     },\n// ]\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 960483,
          "key": "db8b4199-0dd5-4266-91c3-d50ab098d509",
          "title": "The Reduce Method",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "db8b4199-0dd5-4266-91c3-d50ab098d509",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960442,
              "key": "0459b7f8-e65b-4b4a-8ed2-92f13d6caec0",
              "title": "ES6 Reduce",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Reduce Method\n\nThe `map` and `filter` methods have a lot in common, they both:\n- Run a function (callback given by the developer) on every item in an array.\n- Pass three arguments to the function (item value, item index, whole array).\n- Return a new array.\n\nThe `reduce` method has some slight differences. From the name you might be able to guess that this method boils our array down to a **single value**.\n\nFor example, if you have an array of products, each with a price, you could use `reduce` to sum the price values of each item and return a single total cost. Reduce has the special ability to keep track of a value that is updated as it iterates over each item in the array. To get the total cost from an array of items with a price value, you would write a function that adds an item's price to the running total and `reduce` will run that function on each item in the array until it runs out of items and the total is found. \n\nTo do this, `reduce` only passes the callback two arguments, the total so far - or accumulator, and the current item. Another way that it differs from the first two array methods is that it *does not* necessarily return an array. In the case of the example above, `reduce` would return a single integer of the sum of all prices.\n\n### Code Example\nBelow, you can see how reduce is applied to the `sales` list. Reduce goes through the list `sales` and adds the individual value to a running total which is what will ultimately be returned by reduce. The final output of reduce on sales will be `147.49`. \n``` javascript\nconst sales = [120.00, 19.99, 3.50, 4.00];\n\nconst total = sales.reduce((runningTotal, currentValue) => {\n    console.log(runningTotal, currentValue)\n    return runningTotal + currentValue\n})\n\n// cycle 1: 120 19.99\n// cycle 2: 139.99 3.5\n// cycle 3: 143.49 4\n\n// expected output: 147.49\n\n// If you can follow the code above - great job! No one masters the reduce method overnight, but being able to follow the code is the first step. Below are two examples of alternate syntax that you might also see out in the wild. Can you follow these?\n\n//  SAME AS:\nconst reducer = (runningTotal, currentValue) => runningTotal + currentValue;\nconsole.log(sales.reduce(reducer));\n\n// Look! You can even run map, filter, and reduce on array literals!\n// SAME AS:\n[120.00, 19.99, 3.50, 4.00].reduce((runningTotal, currentValue) => {\n    return runningTotal + currentValue\n})\n```",
              "instructor_notes": ""
            },
            {
              "id": 966868,
              "key": "917e50a4-0613-4f14-9826-a3737b225601",
              "title": "Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Instructions\nNext, you will practice using the reduce method in the following exercise. If you need a reminder on the instructions head over to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\nThere will be 2 exercises to practice what you learned in this concept and 1 exercise on how you could apply the reduce method in a real life scenario.\n\n### Local Machine\rThis next exercise can be found in `.../exercises/functional_js_syntax/array_reduce.js`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966867,
          "key": "9727fe7f-3c01-4a4d-9a6f-2e1df818c5f9",
          "title": "Exercise: Reduce Method",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9727fe7f-3c01-4a4d-9a6f-2e1df818c5f9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966898,
              "key": "39ad6db0-603b-46fd-854e-84922208e3b4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966867xGENERICtf6xqlhg",
              "pool_id": "webterminal",
              "view_id": "generic-7am5p",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/array_reduce.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 966241,
          "key": "c917ea60-16ed-448f-846a-dc4438602ab8",
          "title": "Reduce Review",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c917ea60-16ed-448f-846a-dc4438602ab8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966228,
              "key": "3c95d54f-1e98-4682-8c91-2969a1d0106c",
              "title": "Exercise Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Reduce Practice - Exercise Solution\n\n``` javascript\n// 1. Take this disjointed sentence and turn it into a single string\nconst text = ['The ships', 'hung in the sky,', 'much the way', 'that bricks don`t']\n\nconst reducer = (sentence, phrase) => sentence + ' ' + phrase;\nconsole.log(text.reduce(reducer));\n\n// expected output: \"The ships hung in the sky, much the way that bricks don't\"\n\n// Explanation: In the reducer function above, ‘sentence’ is the accumulator variable, and is updated at each iteration of the reduce method. The ‘phrase’ argument refers to an item in the array. In this simple example, we take each string in the array and append it to the accumulator to create the full quote. \n\n// ----------------------------------------------------------\n\n// 2. Return the winning team\nconst scores = [\n    {\n        team: 'A',\n        score: 20\n    },\n    {\n        team: 'B',\n        score: 17\n    },\n    {\n        team: 'C',\n        score: 23\n    },\n    {\n        team: 'D',\n        score: 13\n    }\n]\n\nconst high = scores.reduce((highValue, currentValue) => {\n   if (currentValue.score > highValue.score)\n     return currentValue;\n   else\n     return highValue;\n})\n\nconsole.log(high.team)\n// expected output: \"C\"\n\n// Explanation: In this example, highValue is the accumulator, and currentValue refers to an item in the array. This is a slightly more complicated example than the first exercise because we want to conditionally decide whether to update the accumulator or not. In this case, we only want to keep a running tally of the highest score, discarding any value unless it beats the accumulated high score. \n\n// ----------------------------------------------------------\n//    REAL LIFE EXAMPLE\n// Reduce can sometimes save us a lot of time -- if we remember to use it.\n// Instead of writing a complicated map or filter method and then calling the\n// name of the ship out of the returned array, Return the name of the fastest\n// star ship\n\nconst ships = [\n    {\n        name: 'Serenity',\n        speed: '4.2G',\n    },\n    {\n        name: 'Cylon Raider',\n        speed: '7.5G',\n    },\n    {\n        name: 'Swordfish II',\n        speed: '50G',\n    },\n    {\n        name: 'Tie Fighters',\n        speed: '4100G',\n    }\n]\n\nconst result = ships.reduce((previous, current) => {\n    const speed = parseInt(current.speed.slice(0, -1))\n    const previousSpeed = parseInt(previous.speed.slice(0, -1))\n    if (speed > previousSpeed) {\n        return current\n    }\n    return previous\n})\n\nconsole.log(result.name)\n// Expected output: Tie Fighters\n```",
              "instructor_notes": ""
            },
            {
              "id": 960474,
              "key": "4f084222-ecd5-4fe4-904c-bf5d2e67dc6f",
              "title": "ND032 C02 L02 A04 Array Methods Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-0kb8Ceu5GM",
                "china_cdn_id": "-0kb8Ceu5GM.mp4"
              }
            },
            {
              "id": 960435,
              "key": "fd1920b1-0c04-449b-9172-25bf300fe5ef",
              "title": "Array Methods Summary & Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nMap - The map method iterates over every item in the array it is called on, and performs one action on each item. The action logic is held in a callback function. The map method returns a new array that is the same length as the original array, but with the items updated according to the callback function logic.\n\nFilter - The filter method iterates over every item in the array it is called on, and runs each item through a pass or fail checking logic. The logic is held in a callback function which must return either true or false. The filter method returns a new array that is shorter than the original array (or potentially the same length, if all values passed successfully through the callback), but the values that pass through will be unchanged.\n\nReduce - The reduce method iterates over every item in the array it is called on, and keeps one value (for instance, the sum of all prices). Each item in the array is forgotten, and the end result is a single value. The uses of reduce vary greatly depending on your need, and it is typically the hardest one of the three array methods to master because though its logic is not complicated, its use cases can be very creative.\n\nThat concludes our whirlwind tour of the most commonly used array methods! Practicing these will help you in your day to day work, and making them second nature will really help in interviews and coding challenges.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 960479,
          "key": "f5388f4f-1768-42d9-94b9-36b75f0d1ef5",
          "title": "Array Methods for Selection",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f5388f4f-1768-42d9-94b9-36b75f0d1ef5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960443,
              "key": "35711717-0042-4dd2-affa-4e850ffed0c5",
              "title": "Array Flat",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Array Methods\n\n### Flat\nSometimes we have to deal with arrays within arrays - also called multidimensional arrays. The bigger and more nested multidimensional arrays get, the harder they become to wrap your head around, and accessing information can be a headache. `flat` is a tool that allows you to undo array nesting to exactly the level you want. \n\n##### Code Example\nIn the following code, flat is applied to arrays: `nestedArr` and `moreNested`. The first instance with `nestedArr`, flat takes away the higher level of nesting. But with `moreNested` we can see when flat takes in an integer parameter, it will flatten 2 levels of nesting. This returns an array without any nesting.\n``` javascript \nvar nestedArr = [1, 2, [3, 4, [5, 6]]];\nnestedArr.flat();\nconsole.log(nestedArr)\n// expected output: [1, 2, 3, 4, [5, 6]]\n\nvar moreNested = [1, 2, [3, 4, [5, 6]]];\nmoreNested.flat(2);\nconsole.log(moreNested)\n// expected output: [1, 2, 3, 4, 5, 6]\n```",
              "instructor_notes": ""
            },
            {
              "id": 960441,
              "key": "4fba1a49-dbb2-482e-9281-4031232a3887",
              "title": "Array Find",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Find\nLocating unique values in arrays is another indispensable ability. JavaScript `find` and Includes methods perform similar actions, but their use cases differ. Here are their Mozilla definitions side by side:\n\n|                                                           Find Method                                                           |                                                        Includes Method                                                        |\n|:-------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------:|\n|`find` returns the value of the first element in the provided array that satisfies the provided testing function.  |`includes` determines whether an array contains a certain value among its entries, returning true or false as appropriate. |\n\r`find` is most useful when you are not looking for a specific value. It is best to use `find` when you want to see if any item in array meets a criteria. In this way, `find` is a little bit like `filter`, in that they both run every item in array through a function to determine if the item passes the function’s requirement. But, `find` is a little bit simpler in that it only passes a single argument (the current value) and returns a single value from the array (the first one to pass the function’s test). \n\n##### Code Example\nThe code below shows that if no value in the array is found to meet the criteria, `undefined` will be the result. Also, if there are multiple items that match the criteria, it does not change the output.\n\n``` javascript\nconst bestBars = [\n    'Mos Eisley Cantina',\n    'Clark`s Bar',\n    '10 Forward',\n    'The Restaurant at the End of the Universe',\n    'The Prancing Pony',\n    '10 Forward',\n]\n\nconst test1 = bestBars.find(x => x === 'Quark`s Bar')\nconst test2 = bestBars.find(x => x === '10 Forward')\n\nconsole.log(test1) //expected output: undefined\nconsole.log(test2) // expected output: 10 Forward\n```",
              "instructor_notes": ""
            },
            {
              "id": 960444,
              "key": "64030ad5-fcbf-47aa-ab50-c3d90a922845",
              "title": "Array Includes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Include\n`includes` is most useful when are looking for the existence of a specific value. All you have to do is provide the value you are looking for, and `includes` will return `true` if it finds it and `false` if it does not. \n\nIt is good to note that neither `find` nor `includes` is a good tool to use if you need to know **how many times** a value is found in an array. To do that, you would have to use `map` or `filter`.\n\n##### Code Example\nIn the following code, you can see that includes only returns a `true` or `false` value. **Includes can also be used on strings.**\n``` javascript\nconst bestBars = [\n    'Mos Eisley Cantina',\n    'Clark`s Bar',\n    '10 Forward',\n    'The Restaurant at the End of the Universe',\n    'The Prancing Pony',\n    '10 Forward',\n]\n\nconst test1 = bestBars.includes('Quark`s Bar')\nconst test2 = bestBars.includes('The Prancing Pony')\n\nconsole.log(test1) // expected output: false\nconsole.log(test2) // expected output: true\n```",
              "instructor_notes": ""
            },
            {
              "id": 966872,
              "key": "e6ee81f4-52ed-470c-8004-9581a18fa96e",
              "title": "Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Instructions\nNext, you will practice using the array methods you learned about above (flat, find, array) in the following exercise. If you need a reminder on the instructions head over to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\nThere will be 1 exercise for flat and find array methods except there will be 2 for the include method. \n\n### Local Machine\rThis next exercise can be found in `.../exercises/functional_js_syntax/array_flat_find_include.js`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966879,
          "key": "c766d958-78b1-4f16-bd73-e5b401d7928a",
          "title": "Exercise: Array Methods (Flat, Find, Include)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c766d958-78b1-4f16-bd73-e5b401d7928a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966899,
              "key": "bc64c779-b53c-401f-acc9-2c073ba7c9bb",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966879xGENERICvy6i3cit",
              "pool_id": "webterminal",
              "view_id": "generic-7t79o",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/array_flat_find_include.js"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 960481,
          "key": "43a140f7-900a-4583-a3ae-681f28fbdbb1",
          "title": "Array Method Problem Set",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "43a140f7-900a-4583-a3ae-681f28fbdbb1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966227,
              "key": "22e3110b-affd-443c-9c50-eefff401899b",
              "title": "Exercise Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Array Practice - Exercise Solution\n\n``` javascript\n// ----------------------------------------------------------\n// FLAT EXERCISES\n// ----------------------------------------------------------\n// This short list of some marvel characters is arbitrarily nested. Experiment with the effect of flattening to various depths.\n\nconst characters = [\n    ['Starlord', 'Gamora', 'Groot'],\n    ['Dr. Strange', ['Captain America', 'Bucky Barnes'], ['Thor', 'Hulk', ['Loki']], 'Thanos']\n    ['Iron Man', 'Ultron'],\n    ['Spider Man', ['Venom']],\n    ['Professor X', 'Wolverine', 'Quicksilver', ['Magneto']]\n]\n\nconst results = characters.flat()\nconsole.log(results)\n\n// ----------------------------------------------------------\n// Best use cases for FIND are when you want to cast a wider net, because you get to create your own criteria that can be either very specific or more generic.\n// 1. Determine whether any of the following have a value that contains the characters 'ABC'\n\nconst ids = [\n    'ADHKE',\n    'ANFKM',\n    'QIMVU',\n    'PQMFU',\n    'ABCKO',\n    'IUABC'\n]\n\nconst abc = ids.find(x => x.includes('ABC'))\nconsole.log(abc) // expected output: ABCKO\n// IUABC also includes 'ABC' but the find method won't change the output for any additional occurances of finding 'ABC'.\n\n\n// ----------------------------------------------------------\n// 2. It is best to use INCLUDES when the value itself does not matter, simply its presence. Imagine the scenario that you need to check a user's id against a list of admin id's.\n\nconst currentUserId = '29nv283bfc0szn16723'\n\nconst admins = [\n    '02398cn7syap0dmbnv0',\n    '2389sakvjhw8e7f09fv',\n    '09mxvb82kzjd6v1sfdg',\n    '9a76zxmsdnv1u622345',\n    '29nv283bfc0szn16723',\n    '029834zmnv9jhgfu2ab',\n    '12mnz09v87bas78fb12',\n    '098Xc8x76m3nb4aposi'\n]\n\nconst result = admins.includes(currentUserId)\nconsole.log(result)\n\n// ----------------------------------------------------------\n// 3. Checking between lists. Another thing that you might need to do in real life is check items between two arrays. Create a new array C containing any common values between A and B. This becomes especially helpful when the values are hard to distinguish visually\n\nconst A = [\n    '02398cn7syap0dmbnv0',\n    '2389sakvjhw8e7f09fv',\n    '09mxvb82kzjd6v1sfdg',\n    '9a76zxmsdnv1u622345',\n    '29nv283bfc0szn16723',\n    '029834zmnv9jhgfu2ab',\n    '12mnz09v87bas78fb12',\n    '098Xc8x76m3nb4aposi'\n]\n\nconst B = [\n    '13xnse8aanv87Hdnfv8',\n    '2389sakvjhw8e7f09fv',\n    '12mn0vnZkadfh237LPd',\n    '1209MNBd8723nvkwejs',\n    '298374naskdj273ubsl',\n    '098LKJnsvijevkwejf6'\n]\n\n// Solution:\r// There are many potential solutions to this problem, but here is one example\n\nconst C = A.filter(item => {\n   console.log(B.includes(item))\n   return B.includes(item)\n    \n})\n\nconsole.log(C)\n```",
              "instructor_notes": ""
            },
            {
              "id": 960472,
              "key": "07a49b72-e84c-403e-8237-fc943f5f04d4",
              "title": "Array methods  Problem Set",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "07a49b72-e84c-403e-8237-fc943f5f04d4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you were given a large array of cities, where each city is an object with many properties, which array method would you use to create a list of cities with populations of over 1 million?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "`Map`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "`Filter`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "`Reduce`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 966181,
              "key": "086e923c-ef16-4d1a-af1e-3f694d1283c5",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "086e923c-ef16-4d1a-af1e-3f694d1283c5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the array method to the correct true statement. "
                },
                "concepts_label": "Methods",
                "answers_label": "Description",
                "concepts": [
                  {
                    "text": "`map`",
                    "correct_answer": {
                      "id": "a1578015645822",
                      "text": "Returns an array the same length as the original."
                    }
                  },
                  {
                    "text": "`filter`",
                    "correct_answer": {
                      "id": "a1578015679947",
                      "text": "Returns an array that is a subset of the original."
                    }
                  },
                  {
                    "text": "`reduce`",
                    "correct_answer": {
                      "id": "a1578015681500",
                      "text": "Returns a single value that might not be an array."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1578015730346",
                    "text": "Returns an array that is the same length as, or longer than, the original array."
                  },
                  {
                    "id": "a1578015645822",
                    "text": "Returns an array the same length as the original."
                  },
                  {
                    "id": "a1578015733139",
                    "text": "Returns only true or false."
                  },
                  {
                    "id": "a1578015679947",
                    "text": "Returns an array that is a subset of the original."
                  },
                  {
                    "id": "a1578015681500",
                    "text": "Returns a single value that might not be an array."
                  }
                ]
              }
            },
            {
              "id": 960461,
              "key": "f22caa1a-43b8-4ddf-877d-5d5195482690",
              "title": "Array methods  Problem Set",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f22caa1a-43b8-4ddf-877d-5d5195482690",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which would you use to determine if your name was present as a value in an array of strings?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "`Find`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "`Includes`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "`Map`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "`Filter`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 960455,
              "key": "935c32c3-02c6-4c98-be79-5f04f37e090b",
              "title": "Array methods  Problem Set",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "935c32c3-02c6-4c98-be79-5f04f37e090b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Go to the Mozilla array documentation",
                "Research two new array methods."
              ],
              "positive_feedback": "Cool! I hope you were able to learn a couple more array methods, and that the Mozilla docs are a fantastic resource.",
              "video_feedback": null,
              "description": "There are more specifics about each of the array methods we have learned, including edge cases and great examples on the Mozilla website. Go to their array docs here and choose two array methods you haven’t used before or don’t feel comfortable with for further research."
            },
            {
              "id": 960469,
              "key": "ad5c4f82-2760-4efb-b87f-f81a70977d24",
              "title": "Concept summary & Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\nI hope those array methods haven’t driven you loopy, because we’re moving on ES6 variables in the next section. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 960480,
          "key": "248ccd1e-4026-4c1d-9892-d6a0a275bbee",
          "title": "Variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "248ccd1e-4026-4c1d-9892-d6a0a275bbee",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960453,
              "key": "0942194f-f73b-4eef-8c30-3f7318c2f4d3",
              "title": "ND032 C02 L02 A05 ES6 Variables Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qwUMdNKa2dA",
                "china_cdn_id": "qwUMdNKa2dA.mp4"
              }
            },
            {
              "id": 960445,
              "key": "b616b026-d50d-4ab5-8e00-2ecf04253840",
              "title": "Let",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Variables\n### let\n`let` is like `var` in that a value can be edited after it has been declared, but the scoping rules are a bit different between the two.  ",
              "instructor_notes": ""
            },
            {
              "id": 960465,
              "key": "f1231f17-8085-4f2e-a235-a7e4e00105a3",
              "title": "Const",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### const\n`const` is what we are going to focus on in this course, and right now, we are just going to look at how `const` does not go far enough to really be considered functional.  In the following example, take a close look at how the consts ‘currentBook’ and ‘bookDetails’ behave differently. We can’t edit ‘currentBook’ - as expected - but we CAN edit ‘bookDetails’. Feel free to run and edit the code below to get a feel for what you can and can’t do. \n\n```\nconst currentBook = 'The Time Machine'\n\nconst bookDetails = {\n   title: 'The Time Machine',\n   author: 'H. G. Wells',\n   totalPages: 84,\n   currentPage: 42\n}\n\nconst library = ['Dune', 'Nineteen Eighty-Four', 'Ender`s Game', 'Hyperion', 'Fahrenheit 451']\n\ncurrentBook = 'Stranger in a Strange Land'\n// results in error, can't edit const value\n\nbookDetails = {\n   title: 'I, Robot',\n   author: 'Isaac Asimov',\n   totalPages: 253,\n   currentPage: 21\n}\n// results in error, bookDetails is read-only\n\nbookDetails.currentPage = 75\n// this works! We can update values within a const object\n\nlibrary = ['Dune', 'Nineteen Eighty-Four']\n// results in error, can't redeclare library\n\nlibrary.concat('The Hitchiker`s Guide to the Galaxy')\n// this works! We can update items in the array or add to it\n// Note that concat is the best non-mutative way to add items to an array\r```",
              "instructor_notes": ""
            },
            {
              "id": 966182,
              "key": "5c75a86b-2347-4e2a-afd0-542690dd8698",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5c75a86b-2347-4e2a-afd0-542690dd8698",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the variable to its correct use case. "
                },
                "concepts_label": "Variable",
                "answers_label": "Use Case",
                "concepts": [
                  {
                    "text": "Use `var`",
                    "correct_answer": {
                      "id": "a1578015830615",
                      "text": "When you are required to use pre-ES5 syntax."
                    }
                  },
                  {
                    "text": "Use `const`",
                    "correct_answer": {
                      "id": "a1578015859984",
                      "text": "As your default variable."
                    }
                  },
                  {
                    "text": "Use `let`",
                    "correct_answer": {
                      "id": "a1578015860783",
                      "text": "Whenever you know, you will need to update the stored value."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1578015860783",
                    "text": "Whenever you know, you will need to update the stored value."
                  },
                  {
                    "id": "a1578015868906",
                    "text": "When you are storing a simple data type like String."
                  },
                  {
                    "id": "a1578015830615",
                    "text": "When you are required to use pre-ES5 syntax."
                  },
                  {
                    "id": "a1578015862750",
                    "text": "...never!"
                  },
                  {
                    "id": "a1578015868135",
                    "text": "When you know a value will not need to change often."
                  },
                  {
                    "id": "a1578015859984",
                    "text": "As your default variable."
                  }
                ]
              }
            },
            {
              "id": 966183,
              "key": "32354535-9d2f-4bc9-b3a6-4d1d60d1cccf",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "32354535-9d2f-4bc9-b3a6-4d1d60d1cccf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Try to match the following variable descriptions with what keyword you would use to declare it. "
                },
                "concepts_label": "Value",
                "answers_label": "Variable Type",
                "concepts": [
                  {
                    "text": "API_KEY",
                    "correct_answer": {
                      "id": "a1578015938843",
                      "text": "`const`"
                    }
                  },
                  {
                    "text": "current_item",
                    "correct_answer": {
                      "id": "a1578015968040",
                      "text": "`let`"
                    }
                  },
                  {
                    "text": "MODE",
                    "correct_answer": {
                      "id": "a1578015969026",
                      "text": "`const`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1578015969026",
                    "text": "`const`"
                  },
                  {
                    "id": "a1578015968040",
                    "text": "`let`"
                  },
                  {
                    "id": "a1578015938843",
                    "text": "`const`"
                  },
                  {
                    "id": "a1578015970584",
                    "text": "`var`"
                  }
                ]
              }
            },
            {
              "id": 960460,
              "key": "f17335a5-0a96-4aa0-8dcc-a209e4c95260",
              "title": "ES6 variables overview",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f17335a5-0a96-4aa0-8dcc-a209e4c95260",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at this code to determine what keyword should be used to declare the variable:\r\n``` javascript\n____ text = ''\n\nif (mode === 'test') {\n    text = 'Running in dev mode'\n} else {\n    text = 'Running in dev mode'\n}\n```\n\rIf you aren’t sure, you can test it with your inspect element console. ",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "`const`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "`let`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "`var`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 960463,
              "key": "8e56bf1d-070f-4f33-937a-b62139b5bdaa",
              "title": "ES6 variables overview",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Variables Summary \nBecause JavaScript is not strictly a Functional programming language, we do not have a perfect way to ensure no variable values are mutated, but `const` is the best we can do … for now.\n\nIf you were interested in learning more about the issues with `var`, here are some good articles:\n- [Hackernoon](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70)\n- [dev.to](https://dev.to/johnwolfe820/should-you-never-truly-use-var-bdi)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 960485,
          "key": "5e68c9e6-668e-4fc5-a123-dba6c9445bab",
          "title": "ES6 Object Methods & Freeze",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5e68c9e6-668e-4fc5-a123-dba6c9445bab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960473,
              "key": "74ebf60f-abab-4473-b918-bf4b168907d2",
              "title": "ES6 Object Methods for Functional Programming",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Objects\nCan objects be functional? It might seem strange to have a section on objects in a course on functional programs, but indeed it is important to be able to deal with complex structures of data in any paradigm.",
              "instructor_notes": ""
            },
            {
              "id": 960466,
              "key": "34de2a7f-6fef-4b68-862f-39012ba53a80",
              "title": "ND032 C02 L02 A06 How Can We Use Object Methods In Functional Programming",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3gASpzUfpE8",
                "china_cdn_id": "3gASpzUfpE8.mp4"
              }
            },
            {
              "id": 960468,
              "key": "001c3016-f345-4954-aa88-7dc0d128ca4b",
              "title": "Object.freeze",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Object Methods\n\n## Code Review - Object Freeze\n``` javascript\n// ----------------------------------------------------------\n// OBJECT FREEZE EXAMPLES\n// ----------------------------------------------------------\n\nconst currentShow = {\n    title: 'Dr. Who',\n    seasons: 11,\n    currentSeason: 4\n}\n\n// as a const, we can do this:\ncurrentShow.currentSeason = 5\n// expected output: { title: 'Dr. Who', seasons: 11, currentSeasons: 5 }\n\n// but if we freeze the object\nObject.freeze(currentShow);\n\ncurrentShow.currentSeason = 6;\n// this would actually cause an error\n\nconsole.log(currentShow)\n// expected output: {title: 'Dr. Who', seasons: 11, currentSeasons: 5 }\n// now that it is frozen we can not update the current season of the current show\n```\n\n### Freeze\nObject Freeze is one way to deal with the shortcomings of const to ensure that objects cannot be changed. This is the Mozilla definition object freeze:  <br>\n> A frozen object can no longer be changed.” A frozen object can have no properties added to it, removed from it, or its values edited. It effectively makes an immutable object. \n",
              "instructor_notes": ""
            },
            {
              "id": 966875,
              "key": "5d38a0ce-a665-461a-a35b-4b8a15665b0e",
              "title": "Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Instructions\nNext, you will practice using the object method - freeze in the following exercise. If you need a reminder on the instructions head over to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\n### Local Machine\rThis next exercise can be found in `.../exercises/functional_js_syntax/object_freeze.js`",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966876,
          "key": "42ce2183-db16-4257-b9c8-48783bbdb1b5",
          "title": "Exercise: Object Method - Freeze",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42ce2183-db16-4257-b9c8-48783bbdb1b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966902,
              "key": "b87520c5-c064-43b2-bbb1-8aeacebcc0c9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966876xGENERICkelzanji",
              "pool_id": "webterminal",
              "view_id": "generic-xcp8x",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/object_freeze.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 966235,
          "key": "e7ad79b0-1830-4129-a519-162c4c5d88e1",
          "title": "Object Method - Keys",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e7ad79b0-1830-4129-a519-162c4c5d88e1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960459,
              "key": "a3d9f27a-0dda-48e1-b100-c40c28ef813a",
              "title": "Method Object.keys",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Keys\nThis method returns an array of strings of all an object’s property names. This is unusual because most methods we run on objects are more interested in the values. \r\rBe aware though, this won’t always get the results you think. Along with the properties you are aware of in an object, this might also return other properties belonging to the prototype.\n\n##### Example Code\nThe following code shows how to use the Object.keys method when applied \n``` javascript\nconst character = {\n    id: '12mn18udcbv9823',\n    name: 'Chewbacca',\n    race: 'Wookie',\n    planet: 'Kashyyyk',\n    job: 'First Mate'\n};\n\nconsole.log(Object.keys(character));\n// expected output: Array [\"id\",\"name\",\"race\",\"planet\",\"job\"]\n```",
              "instructor_notes": ""
            },
            {
              "id": 966878,
              "key": "b6c440e5-aedc-47b6-a490-3a4fc58e1b46",
              "title": "Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Instructions\nNext, you will practice using the object method - keys in the following exercise. If you need a reminder on the instructions head over to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\n### Local Machine\rThis next exercise can be found in `.../exercises/functional_js_syntax/object_keys.js`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966871,
          "key": "cbbc4b3d-6e70-430f-bd4a-31280cdd6761",
          "title": "Exercise: Object Method - Keys",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cbbc4b3d-6e70-430f-bd4a-31280cdd6761",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966903,
              "key": "6f6625ae-3b74-47d2-b6a7-6122c290b30a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966871xGENERICdw707dnu",
              "pool_id": "webterminal",
              "view_id": "generic-1d2q2",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/object_keys.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 966236,
          "key": "2411d15e-4ffc-484c-be65-7ac7276eb0a7",
          "title": "Object Method - Assign",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2411d15e-4ffc-484c-be65-7ac7276eb0a7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960467,
              "key": "fade67d7-24ed-4780-9187-8db740ce1035",
              "title": "Object Assign",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The object assign method copies the properties from a source object to a target object. All properties in the source object that aren’t in the target will be created on the target, and any property both objects share, the values will be updated to match the source object. Here is the [object assign Mozilla page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign). This method is most useful when you want to combine two objects or update one object when it is edited. \n\n## Code Example\n\n``` javascript\nlet state = {\n    name: 'Wash',\n    ship: {\n        name: 'Serenity',\n        class: 'Firefly'\n    }\n    role: 'Pilot',\n    favoriteThing: { \n        item: \"Toy\", \n        details: {\n                type: 'Toy Tyrannosaurus Rex'\n        }\n    }\n}\n\nconst newState = {\n    name: 'Mal',\n    role: 'Captain',\n    favoriteThing: {\n        item: \"Not complicated\"\n    },\n    history: [\"Browncoat sergeant\"]\n}\n\nstate = Object.assign(state, newState);\n// Object.assign(state, newState)\n\nconsole.log(state)\n// expected output:\n// { name: 'Mal',  ship: { name: 'Serenity', class: 'Firefly' },\n//  role: 'Captain',\n//  favoriteThing: { item: 'Not complicated' },\n//  history: [ 'Browncoat sergeant' ] }\n```",
              "instructor_notes": ""
            },
            {
              "id": 966869,
              "key": "0c6c7c3a-c467-46a8-81c1-1625cecbc6b2",
              "title": "Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Instructions\nNext, you will practice using the object method - assign in the following exercise. If you need a reminder on the instructions head over to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\n### Local Machine\rThis next exercise can be found in`.../exercises/functional_js_syntax/object_assign.js`",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966874,
          "key": "0b5e10b1-01a6-4b6a-b115-63d5cfb264b3",
          "title": "Exercise: Object Method - Assign",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0b5e10b1-01a6-4b6a-b115-63d5cfb264b3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966905,
              "key": "23200634-c94c-44e8-aaa1-a85084d7b970",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966874xGENERIC1allcs2n",
              "pool_id": "webterminal",
              "view_id": "generic-90xi3",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/object_assign.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 960482,
          "key": "26ace831-2e88-4b9e-9ef3-adabfc8f0614",
          "title": "Object Methods Problem Set",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "26ace831-2e88-4b9e-9ef3-adabfc8f0614",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966226,
              "key": "5fa40dcf-c3cf-4882-b135-30c528d4a74d",
              "title": "Exercise Solutions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Solution - Object Methods (Freeze, Key, Assign)\n\n\n```\n// ----------------------------------------------------------\n// OBJECT FREEZE EXERCISE\n// Create your own object and freeze it!\n// Below is an example of a solution to the exercise.\n// --------------------------------------------------------\n\n// much like the example you saw in the video create an object\n\nconst person = {\n    name: 'Synthia',\n    age: 12\n}\nconsole.log(person)\n// expected output: {name: 'Synthia', age: 12}\n\nperson.age = 13\nconsole.log(person)\n// expected output: {name: 'Synthia', age: 13}\n\nObject.freeze(person)\n\nperson.age = 14\nconsole.log(person)\n// expected output: {name: 'Synthia', age: 13}\n\n// ----------------------------------------------------------\n// OBJECT KEYS EXERCISES\n// Use Object.keys with the map method to print \"This character has a(n) [property-name]\" for each property. \n// ----------------------------------------------------------\n// GIVEN\nconst character = {\n    id: '12mn18udcbv9823',\n    name: 'Chewbacca',\n    race: 'Wookie',\n    planet: 'Kashyyyk',\n    job: 'First Mate'\n}\n\n// SOLUTION CODE\nconst keys = Object.keys(character)\n\nkeys.map(key => {\n    console.log(This character has a(n) ${key})\n    return This character has a(n) ${key}\n})\n\n// Expected Output: \n// This character has a(n) id.\n// This character has a(n) name.\n// This character has a(n) race.\n// This character has a(n) planet.\n// This character has a(n) job.\n// [ 'This character has a(n) id',  'This character has a(n) name',  'This character has a(n) race', 'This character has a(n) planet', 'This character has a(n) job' ]\n\n// ----------------------------------------------------------\n// OBJECT ASSIGN EXERCISES\n// Merge another character into this state. Keep at least one value and change at least one value. Below is an example of a solution to the exercise.\n// ----------------------------------------------------------\n\nlet state = {\n    name: 'Wash',\n    ship: {\n        name: 'Serenity',\n        class: 'Firefly'\n    },\n    role: 'Pilot',\n    favoriteThing: {\n        item: \"Toy\",\n        details: {\n            type: 'Toy Tyrannosaurus Rex'\n        }\n    }\n}\n\nconst incomingState = {\n    name: 'Mal',\n    role: 'Captain',\n    favoriteThing: {\n        item: \"Not complicated\"\n    },\n    history: [\"Browncoat sergeant\"]\n}\n\nstate = Object.assign(state, incomingState);\n// expected output: \n// state = { \n//     name: \"Mal\", \n//     ship: { \n//         name: \"Serenity\", \n//         class: \"Firefly\" \n//     }, \n//     role: \"Captain\", \n//     favoriteThing: { \n//         item: \"Not complicated\" \n//     }, \n//     history: [\"Browncoat sergeant\"] \n// }\n```",
              "instructor_notes": ""
            },
            {
              "id": 960452,
              "key": "8b7e1845-9d16-4686-b246-afb60c8b47fe",
              "title": "Object methods questions",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8b7e1845-9d16-4686-b246-afb60c8b47fe",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the object methods we learned would not be considered Functional?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "`Object.freeze()`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "`Object.keys()`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "`Object.assign()`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1043511,
              "key": "aee8b8c7-3dfe-450c-9b51-4a776032aeff",
              "title": "Object methods questions",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "aee8b8c7-3dfe-450c-9b51-4a776032aeff",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which object method might you use in a component that creates a form field for each property of an object? Write your answer as `Object._____()`",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "seal",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "entries",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "keys",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "freeze",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "assign",
                    "is_correct": false
                  },
                  {
                    "id": "rbk6",
                    "text": "values",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 960457,
              "key": "389d25c9-f91d-46ea-9885-ae55625d1b92",
              "title": "Object methods questions",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "389d25c9-f91d-46ea-9885-ae55625d1b92",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which object method might you use in a component that creates a form field for each property of an object? Write your answer as `Object._____()`",
                "matchers": [
                  {
                    "expression": "/Object.keys()/"
                  }
                ]
              }
            },
            {
              "id": 960471,
              "key": "f0f3bcc2-dd41-4540-bd3d-6d3bd09a9f96",
              "title": "Object Method Research",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f0f3bcc2-dd41-4540-bd3d-6d3bd09a9f96",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Go to the Mozilla object page [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object).",
                "Explore two object methods"
              ],
              "positive_feedback": "Way to go, Mozilla is a great resource if you ever need to look these up again. Remember, developers don’t have to memorize all the syntax of a language. Knowing how to find the syntax you need quickly is often the most important skill.",
              "video_feedback": null,
              "description": "Go to the Mozilla object page [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) and look at the other object methods. Explore two more object methods."
            },
            {
              "id": 960462,
              "key": "d75ef3aa-c762-43d8-b532-24ab96156f0e",
              "title": "Object methods summary & Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Object Summary\nThere are a lot more object methods in JavaScript, if you want to explore the rest of them you can go to this Mozilla [doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966237,
          "key": "8c03ffc4-679b-49c9-beff-e418c091cc1e",
          "title": "Exercise: Putting it All Together",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8c03ffc4-679b-49c9-beff-e418c091cc1e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966231,
              "key": "b65bfe14-2c03-4a33-92aa-a82723db3e6b",
              "title": "Exercise Intro",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Instructions\nFinally, it is time to put all these different methods together into a functional program. If you need a reminder on the instructions head over to *Introduction to Functional Programming* exercises to get a reminder on those instructions.\n\n### Local Machine\rThis next exercise can be found in`.../exercises/functional_js_syntax/combined_practice.js`",
              "instructor_notes": ""
            },
            {
              "id": 966907,
              "key": "6f536f65-c4be-4020-a2aa-efc7364c7c2e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r950324c966237xGENERIC6tkisz17",
              "pool_id": "webterminal",
              "view_id": "generic-xzrmo",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "node -v",
                    "openFiles": [
                      "/home/workspace/combined_practice.js"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 960478,
          "key": "e4ff5658-aea4-42b4-9579-9d22f864eab6",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e4ff5658-aea4-42b4-9579-9d22f864eab6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960456,
              "key": "b0d8bed3-0037-46da-9688-733938e90708",
              "title": "ND032 C02 L02 A07 Lesson REcap Functional JS Syntax",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gY0fPEJirPE",
                "china_cdn_id": "gY0fPEJirPE.mp4"
              }
            },
            {
              "id": 960449,
              "key": "b77baa67-ec79-41eb-8674-5ac0f5f37d62",
              "title": "Lesson Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\nWe’ve completed the syntax section! Now that you’ve got all those array and object methods fresh in your mind, we can move on to building real functional programs with them in the next lesson. ",
              "instructor_notes": ""
            },
            {
              "id": 966877,
              "key": "63dcc496-09b9-49f8-9b57-47030526e7e8",
              "title": "Exercise Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise Solution - Combined Practice\n\n```\nconst characters = [\n  {\n    name: 'Marvin the Paranoid Android',\n    role: 'First Mate',\n    universe: 'Hitchhikers Guide to the Galaxy',\n    weapon: 'severe depression',\n    power_level: 1000\n  },\n  {\n    name: 'Jabba the Hut',\n    role: 'villain',\n    universe: 'Star Wars',\n    weapon: 'henchmen',\n    power_level:  200\n  },\n  {\n    name: 'Zoë Alleyne Washburne',\n    role: 'First Mate',\n    universe: 'Firefly',\n    weapon: 'Winchester Model 1892 rifle',\n    power_level: 160\n  },\n  {\n    name: 'Peter Venkman',\n    role: 'Ghostbuster',\n    universe: 'Ghostbusters',\n    weapon: 'proton pack',\n    power_level: 120\n  },\n  {\n    name: 'Kathryn Janeway',\n    role: 'Captain',\n    universe: 'Star Trek',\n    weapon: 'Wit',\n    power_level: 140\n  },\n  {\n    name: 'Dr. Daniel Jackson',\n    role: 'Archeologist',\n    universe: 'Stargate',\n    weapon: 'Zat gun',\n    power_level: 120\n  },\n  {\n    name: 'Q',\n    role: 'God/Eternal',\n    universe: 'Star Trek',\n    weapon: 'Whatever he wants',\n    power_level: 1000\n  },\n  {\n    name: 'Boba Fett',\n    role: 'Bounty Hunter',\n    universe: 'Star Wars',\n    weapon: 'EE-3 carbine rifle',\n    power_level: 400\n  },\n  {\n    name: 'Yoda',\n    role: 'Jedi Master',\n    universe: 'Star Wars',\n    weapon: 'The Force',\n    power_level: 900\n  },\n  {\n    name: 'Mal Reynolds',\n    role: 'Captain',\n    universe: 'Firefly',\n    weapon: 'pistol',\n    power_level: 160\n  },\n  {\n    name: 'Spock',\n    role: 'First Mate',\n    universe: 'Star Trek',\n    weapon: 'Logic',\n    power_level: 170\n  },\n  {\n    name: 'R2-D2',\n    role: 'Ship`s Robot',\n    universe: 'Star Wars',\n    weapon: 'Data Probe',\n    power_level: 250\n  },\n  {\n    name: 'Lore',\n    role: 'Villain',\n    universe: 'Star Trek',\n    weapon: 'Intellect',\n    power_level: 800\n  },\n]\n\n// ----------------------------------------------------------\n// COMBINED PRACTICE 1\n// ----------------------------------------------------------\n\n// Create an array containing only the names of Captains from all universes.\n\n// expected output: ['Mal Reynolds', 'Kathryn Janeway']\n\n// solution:\nconst captainNames = characters.filter(c => c.role == 'Captain').map(c => c.name)\n\n\n// ----------------------------------------------------------\n// COMBINED PRACTICE 2\n// ----------------------------------------------------------\n\n// Group all characters by universe in a multidimensional array\n\n// expected output:\n\n// [ [ { name: 'Marvin the Paranoid Android',\n//       role: 'First Mate',\n//       universe: 'Hitchhikers Guide to the Galaxy',\n//       weapon: 'severe depression',\n//       power_level: 1000 } ],\n//   [ { name: 'Jabba the Hut',\n//       role: 'villain',\n//       universe: 'Star Wars',\n//       weapon: 'henchmen',\n//       power_level: 200 },\n//     { name: 'Boba Fett',\n//       role: 'Bounty Hunter',\n//       universe: 'Star Wars',\n//       weapon: 'EE-3 carbine rifle',\n//       power_level: 400 },\n//     { name: 'Yoda',\n//       role: 'Jedi Master',\n//       universe: 'Star Wars',\n//       weapon: 'The Force',\n//       power_level: 900 },\n//     { name: 'R2-D2',\n//       role: 'Ship`s Robot',\n//       universe: 'Star Wars',\n//       weapon: 'Data Probe',\n//       power_level: 250 } ],\n//   [ { name: 'Zoë Alleyne Washburne',\n//       role: 'First Mate',\n//       universe: 'Firefly',\n//       weapon: 'Winchester Model 1892 rifle',\n//       power_level: 160 },\n//     { name: 'Mal Reynolds',\n//       role: 'Captain',\n//       universe: 'Firefly',\n//       weapon: 'pistol',\n//       power_level: 160 } ],\n//   [ { name: 'Peter Venkman',\n//       role: 'Ghostbuster',\n//       universe: 'Ghostbusters',\n//       weapon: 'proton pack',\n//       power_level: 120 } ],\n//   [ { name: 'Kathryn Janeway',\n//       role: 'Captain',\n//       universe: 'Star Trek',\n//       weapon: 'Wit',\n//       power_level: 140 },\n//     { name: 'Q',\n//       role: 'God/Eternal',\n//       universe: 'Star Trek',\n//       weapon: 'Whatever he wants',\n//       power_level: 1000 },\n//     { name: 'Spock',\n//       role: 'First Mate',\n//       universe: 'Star Trek',\n//       weapon: 'Logic',\n//       power_level: 170 },\n//     { name: 'Lore',\n//       role: 'Villain',\n//       universe: 'Star Trek',\n//       weapon: 'Intellect',\n//       power_level: 800 } ],\n//   [ { name: 'Dr. Daniel Jackson',\n//       role: 'Archeologist',\n//       universe: 'Stargate',\n//       weapon: 'Zat gun',\n//       power_level: 120 } ] ]\n\n// solution: \n\nconst groupedCharacters = characters\n    .reduce((acc, curr, i, arr) => {\n        acc[curr.universe] = acc[curr.universe] === undefined ? [] : acc[curr.universe]\n        acc[curr.universe].push(curr)\n\n        if (i + 1 == arr.length) {\n            return Object.values(acc)\n        }\n\n        return acc\n }, {})\n\n// ----------------------------------------------------------\n// COMBINED PRACTICE 3\n// ----------------------------------------------------------\n\n// Create an array containing characters' names who are the only character listed in their universe.\n\n// expected output: [ Marvin the Paranoid Android, Peter Venkman, Dr. Daniel Jackson ]\n\n// solution:\nconst groupByUniverse = (acc, curr, i, arr) => {\n    acc[curr.universe] = acc[curr.universe] === undefined ? [] : acc[curr.universe]\n    acc[curr.universe].push(curr)\n\n    if (i + 1 == arr.length) {\n        return Object.entries(acc)\n            .filter(([_, characters]) => characters.length === 1)\n            .map(([_, characters]) => characters[0])\n    }\n\n    return acc\n}\n\nconst soloCharacters = characters\n    .reduce(groupByUniverse, {})\n    .map(character => character.name)\n    .join(', ')\n\nconsole.log('soloCharacters:', soloCharacters)\n\n// ----------------------------------------------------------\n// COMBINED PRACTICE 4\n// ----------------------------------------------------------\n\n// What is the average power level across all characters?\n\n// expected output: 68.71319452795147\n\n\n// solution:\nconst avgPowerLvl = characters\n    .map(c => c.power_level)\n    .reduce((acc, curr, i) => (acc += curr) / i)\n\nconsole.log('avgPowerLvl:', avgPowerLvl)\n```",
              "instructor_notes": ""
            },
            {
              "id": 960470,
              "key": "d61c97eb-17a7-4786-948d-01a239bcd915",
              "title": "Resources",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\nHere are the resources collected from this lesson:\r\n- [Mozilla Array docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n- [Mozilla Variable docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements)\r- [Mozilla Object docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\n- [Why to not use ‘var’ 1](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70)\n- [Why to not use ‘var’ 2](https://dev.to/johnwolfe820/should-you-never-truly-use-var-bdi)",
              "instructor_notes": ""
            },
            {
              "id": 960448,
              "key": "76f73d74-3bb0-453d-a5e9-0c14fb3cc9c9",
              "title": "Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Glossary\n- **Functional Programming** - More academic, Lambda Calculus rules\n- **Functional style** (or **Functional Inspired**) - where we take cues from Functional Programming, and apply them to practically in languages not traditionally recognized as Functional.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    }
  ]
}