WEBVTT
Kind: captions
Language: en

00:00:00.110 --> 00:00:03.780
That was a lot of heavy stuff and there's more to come.

00:00:03.780 --> 00:00:05.670
But for now, let's get some code under

00:00:05.670 --> 00:00:08.100
our fingers and concentrate on what these three paradigms

00:00:08.100 --> 00:00:12.960
look like in practice by writing the same program in three paradigms.

00:00:12.960 --> 00:00:16.275
The first paradigm we'll look at is the imperative one.

00:00:16.275 --> 00:00:19.185
In this program, we have a name and an hour,

00:00:19.185 --> 00:00:22.590
and the greeting variable starts out as empty and then it's

00:00:22.590 --> 00:00:26.745
added to based off of the hour if statement.

00:00:26.745 --> 00:00:31.875
Now to me, that's always a mark that we're working in imperative program because we get

00:00:31.875 --> 00:00:35.550
our final result by taking the updated

00:00:35.550 --> 00:00:40.410
greeting variable and concatenating it with the name and some extra punctuation.

00:00:40.410 --> 00:00:42.265
If we run this code,

00:00:42.265 --> 00:00:45.790
you can see that we get an output of Hello Captain Kirk.

00:00:45.790 --> 00:00:49.355
The next paradigm we'll take a look at is the functional.

00:00:49.355 --> 00:00:51.620
Let's see what one of those programs looks like.

00:00:51.620 --> 00:00:56.450
Here again, we have our same program but written in the functional paradigm.

00:00:56.450 --> 00:00:58.340
If I run this code,

00:00:58.340 --> 00:01:02.990
you can see that we get exactly the same response as the first imperative program,

00:01:02.990 --> 00:01:05.650
but this code already looks a little bit different.

00:01:05.650 --> 00:01:08.190
We have multiple functions here,

00:01:08.190 --> 00:01:13.730
and the greet function is actually returning a function that returns our value.

00:01:13.730 --> 00:01:17.790
But don't get intimidated if this syntax isn't familiar to you,

00:01:17.790 --> 00:01:21.890
we'll go on to look at it in more detail in the rest of the course.

00:01:21.890 --> 00:01:25.850
The important things to note right now are that our result comes

00:01:25.850 --> 00:01:29.685
from calling multiple functions on some inputs.

00:01:29.685 --> 00:01:32.445
We never update any variables.

00:01:32.445 --> 00:01:35.940
The last paradigm we'll look at is object-oriented.

00:01:35.940 --> 00:01:38.480
The object-oriented code might already look a

00:01:38.480 --> 00:01:41.150
little more familiar to you then the functional did.

00:01:41.150 --> 00:01:46.830
We have a class of person with the methods that allow us to create our greeting,

00:01:46.830 --> 00:01:51.680
and then we have the property of name that holds the state of our program.

00:01:51.680 --> 00:01:53.690
Those are the two main things of

00:01:53.690 --> 00:01:59.770
a object-oriented program that classes hold both functionality and state.

00:01:59.770 --> 00:02:03.950
Here, if we create a new instance of class person as Kirk,

00:02:03.950 --> 00:02:07.370
we can then call the greet method on Kirk and we'll

00:02:07.370 --> 00:02:10.820
get the same output as we did with the others.

00:02:10.820 --> 00:02:17.450
Now you can see that our imperative returns the same as our functional and again,

00:02:17.450 --> 00:02:19.505
the same as our object-oriented.

00:02:19.505 --> 00:02:21.710
Hopefully, this quick walk-through gave you

00:02:21.710 --> 00:02:25.085
a better picture of the practical differences between these paradigms.

00:02:25.085 --> 00:02:29.310
In the next section, you'll be able to practice these paradigms yourself.

