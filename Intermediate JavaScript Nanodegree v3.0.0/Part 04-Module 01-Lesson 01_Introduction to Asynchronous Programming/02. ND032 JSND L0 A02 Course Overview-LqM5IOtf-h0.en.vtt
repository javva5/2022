WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.310
Welcome to asynchronous JavaScript.

00:00:02.310 --> 00:00:04.590
Let's see what this course has in store for us.

00:00:04.590 --> 00:00:08.325
Asynchronous programming is a big topic that might feel overwhelming.

00:00:08.325 --> 00:00:11.610
But the goal of this course is that you would be able to work with and

00:00:11.610 --> 00:00:15.165
understand existing asynchronous programs and their logic flows,

00:00:15.165 --> 00:00:18.525
and that you would feel comfortable writing asynchronous programs

00:00:18.525 --> 00:00:22.140
using modern JavaScript syntax and employing best practices.

00:00:22.140 --> 00:00:25.920
We'll cover some places where asynchronous flows can get tricky,

00:00:25.920 --> 00:00:29.625
so that you're aware of potential issues in your asynchronous code.

00:00:29.625 --> 00:00:34.275
We will also go over common interview questions related to asynchronous programming,

00:00:34.275 --> 00:00:37.335
so that you are ready for mid-level JavaScript interviews.

00:00:37.335 --> 00:00:40.295
This course will cover callbacks, promises,

00:00:40.295 --> 00:00:43.940
and async/await syntax for creating asynchronous programs,

00:00:43.940 --> 00:00:46.430
and end with a project where you will use

00:00:46.430 --> 00:00:50.410
your new asynchronous programming skills to build an interactive racing game.

00:00:50.410 --> 00:00:53.030
Here's a breakdown of the course by lesson.

00:00:53.030 --> 00:00:54.905
In this course overview lesson,

00:00:54.905 --> 00:00:58.745
we will go over the requirements and things you need to know before starting the course,

00:00:58.745 --> 00:01:02.465
as well as to give you some resources that might be helpful as you get started.

00:01:02.465 --> 00:01:05.315
We will also cover a conceptual introduction to

00:01:05.315 --> 00:01:07.910
asynchronous thinking and what it's all about,

00:01:07.910 --> 00:01:10.580
and go over some of the benefits you will see in your career and

00:01:10.580 --> 00:01:13.655
coding abilities from learning about asynchronous programming.

00:01:13.655 --> 00:01:16.415
In the synchronous concepts and callbacks lesson,

00:01:16.415 --> 00:01:18.110
we will focus on the basics.

00:01:18.110 --> 00:01:22.310
We'll get started by talking about synchronous programs in terms of threads,

00:01:22.310 --> 00:01:24.310
and blocking and non-blocking code.

00:01:24.310 --> 00:01:27.335
We'll also go over some commonly misunderstood terms

00:01:27.335 --> 00:01:29.675
around the topic of asynchronous programming.

00:01:29.675 --> 00:01:31.235
For the last half of the lesson,

00:01:31.235 --> 00:01:35.605
we'll talk about callbacks and how they can be leveraged to create asynchronous programs.

00:01:35.605 --> 00:01:36.950
Once we've done all that,

00:01:36.950 --> 00:01:41.180
it will leave you in a great place for getting started with the next lesson, promises.

00:01:41.180 --> 00:01:44.345
Promises are where we'll spend the bulk of this course,

00:01:44.345 --> 00:01:48.620
since they are the most common form of handling asynchronousity in modern JavaScript.

00:01:48.620 --> 00:01:53.065
We'll start off by getting a feel for the syntax and practice some new keywords.

00:01:53.065 --> 00:01:56.975
Then we'll see some of the power of promises with promise training.

00:01:56.975 --> 00:02:00.095
Once we're familiar with the syntax and have some practice,

00:02:00.095 --> 00:02:03.050
we'll talk about the need for promises and how they solved some of

00:02:03.050 --> 00:02:07.015
the developer experience issues with callbacks in asynchronous programs.

00:02:07.015 --> 00:02:11.120
We will also cover the practical application of promises with fetch,

00:02:11.120 --> 00:02:14.560
the modern promise based syntax for Ajax requests.

00:02:14.560 --> 00:02:19.790
We will discuss error handling in promise chains and best practices when working

00:02:19.790 --> 00:02:22.025
with promises before finishing up the lesson

00:02:22.025 --> 00:02:24.785
with an intro to more advanced promise syntax.

00:02:24.785 --> 00:02:26.870
The final lesson of this course will be

00:02:26.870 --> 00:02:30.769
an introduction to the async/await syntax introduced in ES6.

00:02:30.769 --> 00:02:34.190
In reality, this is just some convenient syntax packed around

00:02:34.190 --> 00:02:38.915
promises that can help us reason about asynchronous functions in a synchronous way.

00:02:38.915 --> 00:02:44.180
In this lesson, we will go over some more synchronous JavaScript syntax with try/catch,

00:02:44.180 --> 00:02:45.950
before taking a look at the syntax

00:02:45.950 --> 00:02:49.505
of async/await and how you can use it with promise chains.

00:02:49.505 --> 00:02:53.570
We will also have some discussion about when you should and shouldn't use

00:02:53.570 --> 00:02:55.415
async/await and end the lesson with

00:02:55.415 --> 00:02:58.810
error handling and best practices when using async/await.

00:02:58.810 --> 00:03:01.100
We will wrap up this course with a fun and

00:03:01.100 --> 00:03:04.490
interactive project that will challenge you to understand and complete

00:03:04.490 --> 00:03:08.000
some asynchronous flows in an interactive game where a user will

00:03:08.000 --> 00:03:12.110
race against other simulated racers across various race tracks.

00:03:12.110 --> 00:03:14.160
With that, you'll have completed

00:03:14.160 --> 00:03:16.160
the asynchronous JavaScript course and be

00:03:16.160 --> 00:03:19.650
ready to start writing your own asynchronous programs.

