{
  "data": {
    "lesson": {
      "id": 669129,
      "key": "75276e41-b4b7-462c-881b-bf465f28485b",
      "title": "Object-Oriented Design Patterns",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Discover object-oriented design patterns that can be used to create an object -- all without involving its prototype. What's more: you'll also learn how to implement private properties in objects.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/75276e41-b4b7-462c-881b-bf465f28485b/669129/1545053747670/Object-Oriented+Design+Patterns+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/75276e41-b4b7-462c-881b-bf465f28485b/669129/1545053744655/Object-Oriented+Design+Patterns+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 669047,
          "key": "a6879718-6809-409e-bcbc-a193e5d0bf6e",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a6879718-6809-409e-bcbc-a193e5d0bf6e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669143,
              "key": "94283476-684a-4bc2-804b-b143ff3bfa13",
              "title": "L4 01 Lesson Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_56fnu24pio",
                "china_cdn_id": "_56fnu24pio.mp4"
              }
            }
          ]
        },
        {
          "id": 669064,
          "key": "94af4197-eb48-449a-be9f-f76cb4782ef4",
          "title": "Mixins / Extending Object Functionality with Mixins",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "94af4197-eb48-449a-be9f-f76cb4782ef4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669048,
              "key": "c30810f7-050a-4dbb-b674-6e256d71eb0b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## An Object is Prototype-linked to a Single Object\n\nRecall that an object's `.prototype` property points to just _one_ object. This is because JavaScript only supports single inheritance. If there is an object A and an object B, object C can only be prototype-linked to either A _or_ B. ",
              "instructor_notes": ""
            },
            {
              "id": 669207,
              "key": "4f537f5f-0988-4751-9a61-ce8aa8905f1a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b3a8d8e_singlez/singlez.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4f537f5f-0988-4751-9a61-ce8aa8905f1a",
              "caption": "_The `cat` object is prototype-linked to a single object: `animal`_",
              "alt": "",
              "width": 521,
              "height": 141,
              "instructor_notes": null
            },
            {
              "id": 669050,
              "key": "b29c0de0-5a9e-4ebf-bd6f-83060062bba0",
              "title": "Object extension",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b29c0de0-5a9e-4ebf-bd6f-83060062bba0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about the following? Select all that apply:\n\n```js\nconst aircraft = {\n  flies: true\n};\n\nconst helicopter = Object.create(aircraft);\n\nconsole.log(helicopter.flies);\n// true\n```",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "The `helicopter` object has no properties of its own",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "`helicopter` is prototype-linked to `aircraft`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "`helicopter` can actually be prototype-linked to several different objects",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "`console.log(helicopter.flies);` should be `undefined`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 676178,
              "key": "4d26af90-835c-4fff-8326-cbab6d63d7f2",
              "title": "L4 05 Multiple Inheritance  Mixin Intro V5",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OMorcZPV6dw",
                "china_cdn_id": "OMorcZPV6dw.mp4"
              }
            },
            {
              "id": 669052,
              "key": "0029b1c8-a315-41b9-a10e-89f7b6cc60f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Mixins\n\nIf a JavaScript object can only be prototype-linked to a single object, how can we go about extending properties and methods from _multiple_ different sources? A **mixin** allows us to just that!\n\nA mixin is a technique that takes the properties and methods from one object and copies them over to another object. In other words: a mixin is an technique that provides some useful functionality, but is not meant to be added to the prototype chain.",
              "instructor_notes": ""
            },
            {
              "id": 669054,
              "key": "abff912f-d9f2-4fab-849d-8445c4577549",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 🍦All Good Comes from Ice Cream 🍦\n\n> Did you know that the term _mixin_ is actually [inspired by ice cream](https://en.wikipedia.org/wiki/Mixin#History)? The concept of a basic flavor being _mixed in_ with several different extra items (e.g. nuts, fudge, cookies, sprinkles, etc.) was later adopted by computer scientists in object-oriented programming. What a tasty revelation!",
              "instructor_notes": ""
            },
            {
              "id": 669055,
              "key": "bd2194a7-791b-4887-832b-c4cf3676869b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Object.assign()\n\nThe simplest way to implement the mixin pattern is to use `Object.assign()`. `Object.assign()` is a method that copies an object's own (non-inherited) properties from one or more _source_ objects into a _target_ object, then returns the updated target object. In other words, `Object.assign()` adds to the target object by _merging_ in the source object(s). Consider the following:\n\n```js\nlet target = {};\n\nlet source = { number: 7 };\n\nObject.assign(target, source);\n\nconsole.log(target);\n// { number: 7 }\n```\n\nThe first argument passed in, `target`, is the destination that receives the properties copied from the source object, `source`. Note that `Object.assign()` does _not_ create and return a _new_ object; it directly modifies then returns the same target object that was passed in! As such, values of existing properties will be overwritten, while properties that don't exist in the source object will remain intact:\n\n```js\nlet target = { letter: 'a', number: 11 };\n\nlet source = { number: 7 };\n\nObject.assign(target, source);\n\nconsole.log(target);\n// { letter: 'a', number: 7 }\n```\n\nIn the above example, the value of `target`'s `number` property was overwritten, while its `letter` property was ignored.\n\n### Multiple Source Objects\n\n`Object.assign()` can even take in multiple different source objects. Let's create a `platypus` object by mixing in properties from other animals:\n\n```js\nconst duck = {\n  hasBill: true\n};\nconst beaver = {\n  hasTail: true\n};\nconst otter = {\n  hasFur: true,\n  feet: 'webbed'\n};\n\nconst platypus = Object.assign({}, duck, beaver, otter);\n\nconsole.log(platypus);\n// { hasBill: true, hasTail: true, hasFur: true, feet: 'webbed' }\n```\n\nGreat! After merging an empty target object (i.e., an object without properties of its own) with the properties from `duck`, `beaver`, and `otter`, the target object is returned with all four properties. It is important to note that the `platypus` object is _not_ prototype-linked to the three other objects! That is, `platypus` doesn't exist in any of the three source objects' prototype chains, and vice versa:\n\n```js\nplatypus.constructor;\n// Object()\n\nplatypus.isPrototypeOf(duck);\n// false\n\nduck.isPrototypeOf(platypus);\n// false\n\nplatypus.isPrototypeOf(beaver);\n// false\n\nbeaver.isPrototypeOf(duck);\n// false\n\nplatypus.isPrototypeOf(otter);\n// false\n\notter.isPrototypeOf(platypus);\n// false\n```\n\nLet's take a look at all this in action below!",
              "instructor_notes": ""
            },
            {
              "id": 669145,
              "key": "e46149e0-0296-49bd-9dce-4758a31e371e",
              "title": "10 - SC - Object.Assign()",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "icLF3wuGyHI",
                "china_cdn_id": "icLF3wuGyHI.mp4"
              }
            },
            {
              "id": 669057,
              "key": "37ff05eb-7110-4e2c-85c1-2ebbb9a00ece",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the link to the commit](https://github.com/udacity/OOJS-screencasts/blob/master/L4-object-oriented-design-patterns/10-object.assign.js)",
              "instructor_notes": ""
            },
            {
              "id": 669058,
              "key": "17312017-5ed3-47bb-9a75-5cbaca67a786",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ⚠️ Object.assign() Compatibility ⚠️\n\n`Object.assign()` is a great way to copy properties own properties into a given object. Keep in mind that since it was introduced to the official specification in ES2015 (ES6), you may need to review [browser compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility) to make sure it'll work in your environment.",
              "instructor_notes": ""
            },
            {
              "id": 669059,
              "key": "245d1e67-6a73-4bea-bc5d-39e17e41c581",
              "title": "Target object",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "245d1e67-6a73-4bea-bc5d-39e17e41c581",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Let's modify the above code a bit. What is true after the following? \n\n```js\nconst duck = {\n  hasBill: true\n};\nconst beaver = {\n  hasTail: true\n};\nconst otter = {\n  hasFur: true,\n  feet: 'webbed'\n};\n\nconst platypus = Object.assign(duck, beaver, otter);\n```\n\nSelect all that apply:",
                "answers": [
                  {
                    "id": "rbk5",
                    "text": "The console will throw an error because there is no target object passed into `Object.assign()`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk6",
                    "text": "`platypus` is an object with four properties",
                    "is_correct": true
                  },
                  {
                    "id": "rbk7",
                    "text": "`duck` becomes an object with four properties",
                    "is_correct": true
                  },
                  {
                    "id": "rbk8",
                    "text": "`Object.assign()` will automatically insert an empty target object as the first argument",
                    "is_correct": false
                  },
                  {
                    "id": "rbk9",
                    "text": "`platypus === duck`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 669060,
              "key": "40f7c1fd-922d-42f9-96d5-5190beef5d19",
              "title": "Quiz: Mixins",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "40f7c1fd-922d-42f9-96d5-5190beef5d19",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about multiple inheritance or mixins? Select all that apply:",
                "answers": [
                  {
                    "id": "rbk10",
                    "text": "Using a mixin is ideal when you want to set up multiple branches in the prototype chain",
                    "is_correct": false
                  },
                  {
                    "id": "rbk11",
                    "text": "Using a mixin allows a JavaScript class to have more than one superclass",
                    "is_correct": false
                  },
                  {
                    "id": "rbk12",
                    "text": "A mixin supplies properties and/or methods that can be shared",
                    "is_correct": true
                  },
                  {
                    "id": "rbk13",
                    "text": "We can leverage `Object.assign()` to \"mix in\" properties  and methods from a number of objects into a composite object",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 669062,
              "key": "38eed993-7909-404e-ac78-723488fc0f85",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nA mixin is a technique that copies data and functionality from a source object (or source objects) to a target object. We can use ES6's `Object.assign()` to return a target object with properties from one or more source objects \"mixed into\" that target object.\n\nIn the next section, we'll take a look at factory functions and functional mixins -- how they're built, and how we can use them to create objects without the use of the `new` operator!",
              "instructor_notes": ""
            },
            {
              "id": 669063,
              "key": "2b7c19e3-8d51-4972-bd64-a8630fde5f44",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Further Research\n\n* [Object.assign()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) on MDN",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 669079,
          "key": "d4411e32-2bcf-4485-98a0-aa2f05b2bb10",
          "title": "Functional Mixins",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d4411e32-2bcf-4485-98a0-aa2f05b2bb10",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669067,
              "key": "eb6b0ec9-d000-4bde-b471-689e65c8c56e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Remember Constructor Functions?\n\nWe previously used a **constructor function** to create a new object:\n\n```js\nfunction City(name, population) {\n  this.name = name;\n  this.population = population;\n\n  this.identify = function () {\n    console.log(`${this.name}'s population is ${this.population}.`);\n  };\n}\n```\n\nTo instantiate, we invoke the function with the `new` operator: \n\n```js\nconst sanFrancisco = new City('San Francisco', 870000);\n\nconsole.log(sanFrancisco);\n// {\n//   name: 'San Francisco',\n//   population: 870000,\n//   identify: function () {\n//     console.log(`${this.name}'s population is ${this.population}.`);\n//   };\n// }\n```\n\nWe can use the same constructor to create multiple objects:\n\n```js\nconst mountainView = new City('Mountain View', 78000);\n\nconsole.log(mountainView);\n// {\n//   name: 'Mountain View',\n//   population: 78000,\n//   identify: function () {\n//     console.log(`${this.name}'s population is ${this.population}.`);\n//   };\n// }\n```\n\nAgain, note that we used the `new` keyword each time to create a new object. Let's now shift gears a bit to **factory functions** which produce object instances _without_ the use of the `new` operator!",
              "instructor_notes": ""
            },
            {
              "id": 669068,
              "key": "a0147566-9100-4df1-b7f0-5c8a71acc0a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Factory Functions\n\nA factory function is a function that returns an object, but isn't itself a class or constructor. As such, we invoke a factory function as a normal function without using the `new` operator. Using a factory function, we can easily create object instances without the complexity of classes and constructors!\n\nCheck out the following `Basketball()` factory function:\n\n```js\nfunction Basketball(color) {\n  return {\n    color: color,\n    numDots: 35000\n  };\n}\n```\n\nWhat's important to note here is that `Basketball()` returns an object directly. This is different from a constructor function which returns its object automatically.\n\nLet's invoke `Basketball()` and check out its output:\n\n```js\nconst orangeBasketball = Basketball('orange');\n\nconsole.log(orangeBasketball);\n// { color: 'orange', numDots: 35000 }\n```\n\nA factory function has its name because, just like a chair factory can produce chair after chair after chair, a factory function can be used over and over to create any number of objects:\n\n```js\nconst myBB = Basketball('blue and green');\nconst yourBB = Basketball('purple');\nconst bouncy = Basketball('neon pink');\n```\n\nGreat! Invoking the factory function allows us to compose a single object -- all without the use of the `new` operator. Before we take a look at a more complex example, let's summarize the differences between a factory function and a constructor function:",
              "instructor_notes": ""
            },
            {
              "id": 669218,
              "key": "de45812b-b1a7-457d-9a0c-ff43f75ffa13",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b3a918f_screen-shot-2018-07-02-at-1.56.13-pm/screen-shot-2018-07-02-at-1.56.13-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/de45812b-b1a7-457d-9a0c-ff43f75ffa13",
              "caption": "_Comparing and contrasting factory functions and constructor functions_",
              "alt": "",
              "width": 1288,
              "height": 478,
              "instructor_notes": null
            },
            {
              "id": 669161,
              "key": "80639313-ef7d-400d-ba15-155ab7d98bfe",
              "title": "22 - SC -- Factory Functions With Closure",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4LonUWj8FPY",
                "china_cdn_id": "4LonUWj8FPY.mp4"
              }
            },
            {
              "id": 669071,
              "key": "60f15b04-f5c4-49eb-b26d-3ba46ad8f4eb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the link to the commit](https://github.com/udacity/OOJS-screencasts/blob/master/L4-object-oriented-design-patterns/22-factory-functions-with-closure.js)",
              "instructor_notes": ""
            },
            {
              "id": 669072,
              "key": "669b9972-685c-4d60-947f-7cb9b9820394",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Functional Mixins\n\nIn the previous section, we used **mixins** to add features into a composite object. We also just leveraged **factory functions** to create objects without using the `new` operator or messing with prototypal inheritance. Let's combine what we've learned from mixins and factory functions and take things a step further with **functional mixins**!\n\nA functional mixin is a composable factory function that receives a _mixin_as an argument, copies properties and methods from that mixin, and returns a new object. Check out the following example: `CoffeeMaker()`:\n\n```js\nfunction CoffeeMaker(object) {\n  let needsRefill = false;\n\n  return Object.assign({}, object, {\n    pourAll: function () {\n      needsRefill = true;\n    },\n    isEmpty: function () {\n      return needsRefill;\n    }\n  });\n}\n```\n\nNote that unlike a standard factory function, which takes in individual property _values_ as arguments -- the functional mixin actually takes in an object itself! Whichever object is passed in to the function, is merged with other objects passed into `Object.assign()`. \n\nLet's pass the following `percolator` object into `CoffeeMaker()` and view the results:\n\n```js\nconst mixedCoffeeMaker = CoffeeMaker({ style: 'percolator' });\n```\n\nThe returned `mixedCoffeeMaker` object now looks like:\n\n```js\n{\n  style: 'percolator',\n  pourAll: function () {\n    needsRefill = true;\n  },\n  isEmpty: function () {\n    return needsRefill;\n  }\n}\n```\n\nNow, one of the great things about functional mixins is that they are _composable_; we can use them as individual pieces of code that add specific properties like an assembly line. Let's take a closer look!",
              "instructor_notes": ""
            },
            {
              "id": 669162,
              "key": "ea4e7525-089b-4aa3-93fc-5f135068eb2b",
              "title": "25 - SC - Functional Mixins",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "It42ufgUqXk",
                "china_cdn_id": "It42ufgUqXk.mp4"
              }
            },
            {
              "id": 669074,
              "key": "c74ca537-8154-4248-a20a-4863af879473",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the link to the commit](https://github.com/udacity/OOJS-screencasts/blob/master/L4-object-oriented-design-patterns/25-functional-mixins.js)",
              "instructor_notes": ""
            },
            {
              "id": 669075,
              "key": "8401c6ec-18c4-4450-9242-d21cb214aa23",
              "title": "Quiz: Factory Functions and Mixins",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8401c6ec-18c4-4450-9242-d21cb214aa23",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about factory functions or mixins? Select all that apply:",
                "answers": [
                  {
                    "id": "rbk14",
                    "text": "A mixin is always meant to be inherited and extended by sub-objects via its prototype",
                    "is_correct": false
                  },
                  {
                    "id": "rbk15",
                    "text": "Factory functions must always close over local variables",
                    "is_correct": false
                  },
                  {
                    "id": "rbk16",
                    "text": "Just like a constructor function, a factory function can be called multiple times to create an object",
                    "is_correct": true
                  },
                  {
                    "id": "rbk17",
                    "text": "A factory function is normally called with the `new` operator",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 669077,
              "key": "657baed7-e308-4844-bd9f-200a8da70bbf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nA factory function creates objects. It is invoked as normal function, _not_ with the `new` operator. Functional mixins take things a bit further by accepting a mixin as an argument, copies properties and methods from the mixin, and returns a new object.",
              "instructor_notes": ""
            },
            {
              "id": 669078,
              "key": "2905dd97-e6d0-4f79-aeab-c23707d1cfdc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Further Research\n\n* [JavaScript Factory Functions vs Constructor Functions vs Classes](https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e) by Eric Elliott\n* [Factory Function Pattern In-Depth](https://medium.com/@pyrolistical/factory-functions-pattern-in-depth-356d14801c91) by Ronald Chen",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 669097,
          "key": "50d77c45-73f6-41a9-b6bf-88ccde54db81",
          "title": "The Module Pattern",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "50d77c45-73f6-41a9-b6bf-88ccde54db81",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669080,
              "key": "b79fc703-5dcb-4d45-b755-0a36e0961efa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Private Properties: Literal\n\nBy default, most things things are publicly accessible in JavaScript. We can use closure to make certain parts of an app private, but what if we want to prevent access to a property directly? That is, how would we make a property or method _private_ so it's inaccessible from the outside world? To lend a bit more context, check out a plain object literal handles privacy:\n\n```js\nlet developer = {\n  name: 'Veronika',\n  getName: function () {\n    return this.name;\n  }\n};\n```\n\nWe can access the string value `'Veronika'` with the `getName` method, as well as directly by accessing the `developer` object's `name` property: \n\n```js\ndeveloper.getName();\n// 'Veronika'\n\ndeveloper.name;\n// 'Veronika'\n```\n\nHowever, what happens when we reassign the object's `name` property?\n\n```js\ndeveloper.name = 'Not Veronika';\n\ndeveloper.getName();\n// 'Not Veronika'\n\ndeveloper.name;\n// 'Not Veronika'\n```\n\nThis sort of open access makes developers uncomfortable. Since we can directly access and mutate an object's properties, we would like a way to implement private properties. ",
              "instructor_notes": ""
            },
            {
              "id": 669081,
              "key": "84f3c4b4-085e-4e35-bde8-077ab5a0fce2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡Privacy with Underscores? 💡\n\n> You may have seen object properties and method names prefixed with an underscore (`_`), especially in library code. While an underscore is added by the code's author to distinguish privacy, it is privacy by _convention_ only. JavaScript does not give special functionality or meaning to properties prefixed with an underscore!",
              "instructor_notes": ""
            },
            {
              "id": 669082,
              "key": "d03cee70-066a-4d2e-8fae-6047de450b85",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Private Properties: Function\n\nLet's look into another option: using a _function_. What if we create a basic function that just _returns an object_? Does this give the object an adequate level of protection? \n\nLet's look a bit more closely. Check out the following `instantiateDeveloper()` function:\n\n```js\nfunction instantiateDeveloper() {\n  return {\n    name: 'Veronika',\n    getName: function () {\n      return this.name;\n    }\n  };\n}\n```\n\nNothing too surprising -- just a basic function that returns an object with two properties: `name` and `getName`. Let's go ahead and invoke the function and get the returned object. We'll assign the returned object to a variable, `developer`:\n\n```js\nlet developer = instantiateDeveloper();\n```\n\nAs it turns out, the string `'Veronika'` is still accessible, because the two aforementioned properties still exist in the object being returned from `instantiateDeveloper()`:\n\n```js\ndeveloper.getName;\n// 'Veronika'\n\ndeveloper.name;\n// 'Veronika'\n```\n\nAlong with direct access, we can mutate and reassign the value of the `name` property as well:\n\n```js\ndeveloper.name = 'Not Veronika';\n\ndeveloper.name;\n// 'Not Veronika'\n```\n\nWrapping an object within a function doesn't seem too effective either. So, how can we go about making an object's properties private?",
              "instructor_notes": ""
            },
            {
              "id": 669083,
              "key": "dc49450f-293f-4ac7-a8c7-3e63e22bb2cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## No Private Properties\n\nSince JavaScript has _no_ concept of private properties out-of-the-box, there is no special syntax or keyword we can use to protect certain properties from being accessed.\n\nHowever, there is hope! Recall from earlier lessons that we can use **scope** and **closures** to create a private state. Let's look at a quick refresher:\n\n```js\nfunction myCounter() {\n  let count = 0;\n\n  return function () {\n    count += 1;\n    return count;\n  };\n}\n\nlet counter = myCounter();\n```\n\nNote that the `myCounter()` function closes over the `count` variable. The value of `count` increments as the function is called:\n\n```js\ncounter();\r// 1\r\rcounter();\r// 2\n```\n\nHowever, there is no way that any method outside the closure itself can access `count`:\n\n```js\ncounter.count; \n// undefined\n\ncount; \n// undefined\n```\n\nSo, closure provides a way to create private data. How can we leverage these same techniques -- with scope and closures -- to create private properties and methods in an object?",
              "instructor_notes": ""
            },
            {
              "id": 669164,
              "key": "00696dd4-b669-493d-a01f-7105a4b227ec",
              "title": "L4 35 Intro Modules",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VUH_3LlwW64",
                "china_cdn_id": "VUH_3LlwW64.mp4"
              }
            },
            {
              "id": 669085,
              "key": "05b6697d-56d5-45de-b167-737184052d31",
              "title": "Quiz: Scope (review)",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "05b6697d-56d5-45de-b167-737184052d31",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Before we jump into how the Module Pattern leverages scope and closures, let's make sure we're on the same page regarding **scope**. Consider the following:\n\n```js\nconst myName = 'Richard';\n\nfunction introduceMyself() {\n  const you = 'student';\n\n  function introduce(message) {\n    // Which variables can be used here?\n  }\n\n  return introduce('Hello');\n}\n```\n\nWhich variables does the nested `introduce()` function have access to? Select all that apply:",
                "answers": [
                  {
                    "id": "rbk18",
                    "text": "`myName`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk19",
                    "text": "`you`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk20",
                    "text": "`message`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk21",
                    "text": "None",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 669087,
              "key": "ea86aa01-2580-4b3a-a59a-bf40bdc729e6",
              "title": "Quiz: IIFE (review)",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ea86aa01-2580-4b3a-a59a-bf40bdc729e6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Consider the following:\n\n```js\nlet sodiumChloride = (function(){\n  let chemicalFormula = 'NaCl';\n  let molarMass = 58.44;\n\n  return {\n    getProperties: function(){\n      console.log(`Formula: ${chemicalFormula}`);\n      console.log(`Molar Mass: ${molarMass} g/mol`);\n    }\n  };\n})();\n```\n\nWhen `sodiumChloride.getProperties();` is executed, what is logged to the console?",
                "answers": [
                  {
                    "id": "rbk22",
                    "text": "An object with a single `getProperties` method",
                    "is_correct": false
                  },
                  {
                    "id": "rbk23",
                    "text": "An object with two properties: `Formula` and `Molar Mass`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk24",
                    "text": "Two strings: `'Formula: NaCl'` and `'Molar Mass: 58.44 g/mol'`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk25",
                    "text": "Nothing. The entire snippet is not valid JavaScript.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 669088,
              "key": "d3a164e0-c75a-4664-bc49-68d1623064a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡Need Review? 💡\n\n> The Module Pattern leverages many of the powerful features of JavaScript, such as scope, closures, and immediately-invoked function expressions (IIFE). If any of this material feels largely unfamiliar, or if you simply want a review to freshen things up, check out Lesson 2: Functions at Runtime.",
              "instructor_notes": ""
            },
            {
              "id": 669169,
              "key": "35b65f76-34f0-45ba-924f-35ea01369cc6",
              "title": "40 - SC - Module Pattern Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hWU3sQdxc64",
                "china_cdn_id": "hWU3sQdxc64.mp4"
              }
            },
            {
              "id": 669090,
              "key": "19b48174-111e-437b-8bf3-28a24aee0fc4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the link to the commit](https://github.com/udacity/OOJS-screencasts/blob/master/L4-object-oriented-design-patterns/40-module-pattern-demo.js)",
              "instructor_notes": ""
            },
            {
              "id": 669092,
              "key": "100128d3-0c74-450f-b59b-b0434272b183",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Module Pattern: Recap\n\nBefore moving on to the next section, let's make sure we're on the same page regarding the Module Pattern. We'll be improving upon it in the very next section! Consider the following:\n\n```js\nlet diana = (function () {\n  let secretIdentity = 'Diana Prince';\n\n  return {\n    introduce: function () {\n      console.log(`Hi! I am ${secretIdentity}`);\n    }\n  };\n})();\n```\n\nRecall that one of the key ingredients here is the IIFE! Not only does it prevent pollution of the global scope (which hinders the chance of variable name collisions) -- the IIFE helps prevent access to the `secretIdentity` variable.\n\n```js\nconsole.log(diana.secretIdentity);\n\n// undefined\n```\n\nAnd because the returned object's `introduce()` method retains access to its parent function's scope, we are given a public interface to interact with `secretIdentity`:\n\n```js\ndiana.introduce();\n\n// 'Hi! I am Diana Prince'\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 669093,
              "key": "cb50ebe7-69ff-4e34-8637-2d8fa298b480",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Other Benefits of the Module Pattern\n\nThe Module Pattern is commonly used to create private properties in JavaScript, but there are quite a few other benefits of incorporating the Module Pattern in code that you write as well. For one: organization. Modules are a larger unit of organization than, say, functions or objects. This helps partition code and provide structure as an application scales.\n\nKeep in mind, however, that you generally use the Module Pattern when you just want one \"version\" of an object. If you're looking to instantiate unique objects that follow a certain blueprint, you can always still write and invoke a constructor function!",
              "instructor_notes": ""
            },
            {
              "id": 669094,
              "key": "c53908c7-080e-48c2-8b25-7e8fe1ff0ced",
              "title": "Module Pattern Facts",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c53908c7-080e-48c2-8b25-7e8fe1ff0ced",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about the Module Pattern? Select all that apply:",
                "answers": [
                  {
                    "id": "rbk26",
                    "text": "The Module Pattern uses closures to create private properties",
                    "is_correct": true
                  },
                  {
                    "id": "rbk27",
                    "text": "Rather than a local variable, a function can simply use a global variable to fulfill the Module Pattern",
                    "is_correct": false
                  },
                  {
                    "id": "rbk28",
                    "text": "Private properties are provided in JavaScript by default, so the Module Pattern is largely unnecessary",
                    "is_correct": false
                  },
                  {
                    "id": "rbk29",
                    "text": "The Module Pattern requires the use of IIFE's",
                    "is_correct": true
                  },
                  {
                    "id": "rbk30",
                    "text": "Unlike calling a constructor function, implementing the Module Pattern returns just one version of an object",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 669095,
              "key": "9f33d021-2b1c-48b8-a01c-a0852fdc1ac9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nSince JavaScript doesn't have private variables, properties, or methods built-in, we can leverage the Module Pattern to enforce such privacy. At its core, the Module Pattern leverages scope, closures, and (commonly) IIFE's to not only hide data from external access, but to also provide a public interface for such data.\n\nIn the next section, we'll check out another variation: the **Revealing Module Pattern**.",
              "instructor_notes": ""
            },
            {
              "id": 669096,
              "key": "74e7047b-a957-4a8f-bd97-36d5f1135c3e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Further Research\n\n* Addy Osmani's [The Module Pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript) (JavaScript Design Patterns)\n* Todd Motto's [Mastering the Module Pattern](https://toddmotto.com/mastering-the-module-pattern/#private-methods)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 669108,
          "key": "3183f60e-d9f6-4453-a704-ac16cfffd775",
          "title": "The Revealing Module Pattern",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3183f60e-d9f6-4453-a704-ac16cfffd775",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669170,
              "key": "7f059586-8bdd-4308-9888-7b837e1f81c5",
              "title": "L4 50 Revealing Module Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "06Xw_DxfYjY",
                "china_cdn_id": "06Xw_DxfYjY.mp4"
              }
            },
            {
              "id": 669182,
              "key": "951784fb-de30-4799-a76e-f5892ca3ef3c",
              "title": "51 - SC - Structure And Syntax",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WNX-hEfrAOU",
                "china_cdn_id": "WNX-hEfrAOU.mp4"
              }
            },
            {
              "id": 669102,
              "key": "bd574e6c-9198-4e83-bd40-ad373f43b18c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Here's the link to the commit](https://github.com/udacity/OOJS-screencasts/blob/master/L4-object-oriented-design-patterns/51-structure-and-syntax.js)",
              "instructor_notes": ""
            },
            {
              "id": 669103,
              "key": "03a4d9d4-c890-4d9a-92df-58e2553cb80f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Revealing Module Pattern\n\nThe underlying philosophy of the Revealing Module Pattern is that, while we still maintain encapsulation (as in the Module Pattern), we also _reveal_ certain properties (and methods). The key ingredients to the Revealing Module Pattern are:\n\n1. An IIFE (wrapper)\n2. The module content (variables, methods, objects, etc.)\n3. A returned object literal\n\n## Another Example\n\nTo bring it all home, let's check out a more complex example:\n\n```js\nlet person = (function () {\n  let privateAge = 0;\n  let privateName = 'Andrew';\n\n  function privateAgeOneYear() {\n    privateAge += 1;\n    console.log(`One year has passed! Current age is ${privateAge}`);\n  }\n\n  function displayName() {\n    console.log(`Name: ${privateName}`);\n  }\n\n  function ageOneYear() {\n    privateAgeOneYear();\n  }\n\n  return {\n    name: displayName,\n    age: ageOneYear\n  };\n})();\n```\n\nIn the above snippet, the IIFE has some private data: `privateAge`, `privateName`, and `privateAgeOneYear()`. The returned object is stored in `person` and provides a public interface through which we can access this data!\n\nLet's first check out what the returned `person` looks like:\n\n```js\n{\n    name: displayName,\n    age: ageOneYear\n};\n```\n\nNote that the `name()` method reveals the otherwise private `displayName()` function:\n\n```js\nconsole.log(person.name());\n\n// 'My name is Andrew'\n```\n\nHowever, what happens if we try to access and mutate `privateName`?\n\n```js\nperson.privateName = 'Richard';\n\nconsole.log(person.name());\n// 'My name is Andrew'\n```\n\n`person.name()` still produces the string `My name is Andrew`! Why don't we see the string `'Richard'` in the returned string?\n\nPay close attention to what the first line of code is actually doing: it simply adds a `privateName` property to the `person` object. It has no effect on the `privateName` variable that exists inside the IIFE itself! If we look at the `person.name()` function, it is using the `privateName` variable that exists inside the IIFE. So even if we add a `person.privateName` property, the `person.name()` method doesn't ever try to access it.\n\nNote that accessing `displayName()` directly won't be effective, either! This should come as now surprise, since `displayName()` is just a function defined inside the IIFE (i.e., `displayName()` is _not_ a property in the returned object).\n\n```js\nconsole.log(person.displayName());\n\n// undefined\n```\n\nLikewise, the Revealing Module Pattern also gives us access to the captured `privateAge` variable, via the returned object literal's `age()` method:\n\n```js\nconsole.log(person.age());\n\n// 'One year has passed! Current age is 1'\n\nconsole.log(person.age());\n\n// ''One year has passed! Current age is 2'\n```",
              "instructor_notes": ""
            },
            {
              "id": 669104,
              "key": "95cd0cf1-2940-4ffc-ab83-aaf9fd2c2450",
              "title": "Revealing Module Pattern Facts",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "95cd0cf1-2940-4ffc-ab83-aaf9fd2c2450",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which concepts make up the Revealing Module Pattern? Select all that apply:",
                "answers": [
                  {
                    "id": "rbk31",
                    "text": "Constructor functions",
                    "is_correct": false
                  },
                  {
                    "id": "rbk32",
                    "text": "IIFE",
                    "is_correct": true
                  },
                  {
                    "id": "rbk33",
                    "text": "`Object.assign();`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk34",
                    "text": "Local variables/functions",
                    "is_correct": true
                  },
                  {
                    "id": "rbk35",
                    "text": "Returned object literal with keys that point to data intended to be revealed",
                    "is_correct": true
                  },
                  {
                    "id": "rbk36",
                    "text": "Mixins",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 669105,
              "key": "0a9023e8-91d0-47b1-a3da-2fe1325bad3f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Benefits of the Revealing Module Pattern\n\nWhen writing your modules, there are a few key advantages of using the Revealing Module Pattern. For one, there is clarity at the end of the module (i.e., the `return` statement) as to which variables or methods may be accessed publicly. Modules may grow large, and this eases readability for other developers who read your code.\n\nAlong with clear intent of public or private data, the Revealing Module Pattern lends itself to consistent syntax as well. In contrast, the normal Module Pattern may contain variables and functions spread throughout the entire function body.\n\nWhile you can't go wrong with either approach to create private properties in your code, be sure to take the time and choose which makes the most sense for your project!",
              "instructor_notes": ""
            },
            {
              "id": 669106,
              "key": "0e51c07b-f9b8-46f7-ae8c-92ed4702f0ba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nThe Revealing Module Pattern is a slight variation on the Module Pattern. IIFE's, local variables/functions, and a returned object literal with revealed data make up the structure and syntax of the Revealing Module Pattern. While it still maintains encapsulation of data, certain variables and functions are returned in an object literal.\n\nIn the next section, we'll take a look at object-oriented JavaScript in the real-world, especially in popular library code and frameworks.",
              "instructor_notes": ""
            },
            {
              "id": 669107,
              "key": "14b7e2f0-8da2-4d59-a2cc-79a4ed96a10a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Further Research\n\n* Addy Osmani's [The Revealing Module Pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript) (JavaScript Design Patterns)\n* Christian Heilmann's [Again with the Module Pattern – reveal something to the world](https://christianheilmann.com/2007/08/22/again-with-the-module-pattern-reveal-something-to-the-world/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 669126,
          "key": "b27e4f34-b320-4448-8b23-a600aa23c207",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b27e4f34-b320-4448-8b23-a600aa23c207",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669191,
              "key": "35552784-a18f-4387-96f1-245cffcd7c9e",
              "title": "L4 73 Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EEbAYNruSGA",
                "china_cdn_id": "EEbAYNruSGA.mp4"
              }
            },
            {
              "id": 689226,
              "key": "fc56987d-a729-4f20-8b74-6ed274704cbe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Further Research\n\n* [JavaScript Design Patterns for Humans](https://github.com/sohamkamani/javascript-design-patterns-for-humans)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 669128,
          "key": "73d21573-d63d-49fd-8d3f-125685e897dc",
          "title": "Course Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "73d21573-d63d-49fd-8d3f-125685e897dc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 669192,
              "key": "f3601d49-c105-4f07-a4c4-fd2f7ce18345",
              "title": "L4 74 Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ra8-pKC6Qkk",
                "china_cdn_id": "ra8-pKC6Qkk.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}