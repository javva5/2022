{
  "data": {
    "lesson": {
      "id": 966783,
      "key": "67c4cbad-0f84-4c13-aaee-a3fbd9ac6ca6",
      "title": "Project: Dinosaurs",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": null,
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": null,
      "project": {
        "key": "d1ab09ec-7059-4d97-96d7-c964dbf4b34f",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 30240,
        "semantic_type": "Project",
        "title": "Dinosaurs",
        "description": "Please submit your solution using the Github link or as a ZIP file.\n\nYour project should meet all the rubric requirements to pass the project. The link is provided here: [Project Rubric](https://review.udacity.com/#!/rubrics/2786/view).\n\nYou can download the starter code for the [project on Github](https://github.com/udacity/Javascript).",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2786",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 966785,
          "key": "62634e68-5858-40be-a594-85dc472a4d1f",
          "title": "Project Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "62634e68-5858-40be-a594-85dc472a4d1f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966786,
              "key": "a5319065-726d-44b7-823b-b03a5e739be0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Summary\n\n\nThis project aims to give you real-world scenarios of working with object-oriented javascript. The functionality you will be using serves two purposes: to improve your experience building objects with javascript as well as taking advantage of user interaction with the DOM. This project is a stepping stone in your journey which takes advantage of many of the topics you learned in this course. \n\nFor this project, refactor and test as much as possible while you are building. For every piece of functionality you add, you should likely spend as much time in testing and refactoring your code. If it takes you 3 hours to figure out the logic, it should likely take you another 3 hours determining that you wrote the [best code possible](http://udacity.github.io/frontend-nanodegree-styleguide/javascript.html). As your skills improve, this process will feel more natural. Make sure to remove any debugging code from your final submission. \n\n### What you will Build:\n\nYou will be building an infographic that is derived from data that is provided, as well as user input data. Object-oriented javascript is great for working with complex data, but it’s not of much use without an interface to interact with. You will be pulling in information from a form and using it to complete an array of objects that will then be appended back to the DOM. \n\nThis may not sound like a lot, but there are a fair amount of moving pieces that rely on each other to work. You’ll need to plan out the logic of what you are trying to accomplish before you begin developing. If you find this process to be quick, there’s a list of additional functionality that you can add that all strive to improve the users’ experience. \n\nFor the project, you will generate a 3x3 grid of tiles (9 in total) with the human in the center tile. Each title will contain the species, an image, and a fact. For the human tile, you will display the name of the human rather than species and no fact is necessary for the human. When the user clicks to generate the infographic from the form, the grid will appear and the form will be hidden. The facts displayed should be random per dinosaur with an opportunity of displaying at least 6 different types of facts (3 should be from the methods you create). One of the titles should be for a pigeon in which the tile should always display, “All birds are  dinosaurs.”\n\n### What will I learn?\n\nThe infographic presents an opportunity to work with objects and the DOM on a larger project.\n\nThe following are just some of the questions that you’ll experience along the way:\n\n- What’s the ideal workflow?\n- What design pattern should I use?\n- Do I use a constructor function, factory function or something else?\n- How many JavaScript functions do I need?\n- Should my function be this many lines of code?\n- Is readability or performance more important?\n\nThere’s no single correct answer to each question. While building this project, working with peers, and getting feedback from the project reviewer -- you will naturally develop your own answers to these questions!\n\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966787,
          "key": "88538c81-8657-4f73-8625-9ff339135adc",
          "title": "Project Rubric",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "88538c81-8657-4f73-8625-9ff339135adc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966788,
              "key": "b7db8bab-6f8f-414a-ae6c-0b08166ab0b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Rubric\n\nYour project will be evaluated by a Udacity code reviewer according to the Dino Infographic [rubric](https://review.udacity.com/#!/rubrics/2786/view). Please review for detailed project requirements.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966789,
          "key": "ca57b7f4-795a-44cc-90ff-7655d8bf364c",
          "title": "Get the Starter Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ca57b7f4-795a-44cc-90ff-7655d8bf364c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966790,
              "key": "0793ad6d-2228-4919-b70f-3d68b466f6aa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Get the Starter Code\n\nIf you'd like to start from scratch without any files aside from images, you are encouraged to do so! You learn the most by developing on your own! But, it can be a bit challenging having to start from scratch, so we do provide a starter project (i.e., a \"skeleton\") to use.\n\nYou can download this starter code through the [project on Github](https://github.com/udacity/Javascript).\n\nThe starter code has a static, non-interactive version of the project so you can get a jump-start on development! Including:\n\n- Index.html - Containing the html and links to appropriate files. \n- app.css - containing the styling of the project.\n- app.js - Where you will complete the bulk of your project.\n- dino.json - The information you will need for the dinosaurs to get your project going. ** Units in starter are lbs and inches. You may change as needed.\n- /images - Folder containing the images used for the project. \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966791,
          "key": "601d730e-0f3b-4c5e-b689-5144d6c98b6a",
          "title": "Object-Oriented Javascript",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "601d730e-0f3b-4c5e-b689-5144d6c98b6a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966792,
              "key": "7b565252-19e6-4054-b00a-1b87f851584f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Object-Oriented Javascript\n\nGreat! You now have the starter code. Before moving forward, make sure you are comfortable with the content from [Object-Oriented Javascript](https://classroom.udacity.com/courses/ud711). Ask yourself:\n\n- What is an [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) and how do you access and modify its properties?\n- What is an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)?\n- How can you efficiently [create objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects)?\n- What is the meaning of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)?\n- What is [prototypal inheritance](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)?\n- What is the [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document)?\n- What are [events](https://developer.mozilla.org/en-US/docs/Web/API/Event)?\n- How do you use [getElementbyId()](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) to select a DOM element by its id?\n- How do you use the [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) property? What does it return, and why would it be useful?\n- Every element has an [innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) property that represents the markup of the element's content. How can you leverage this property to get and set content?",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966793,
          "key": "bf675071-ea0c-41df-b916-24f00b09d166",
          "title": "Development Strategy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bf675071-ea0c-41df-b916-24f00b09d166",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966794,
              "key": "1c0bd55b-ce43-4e74-b40c-831781be3607",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Development Strategy\n\nFor this project, you will be writing most of your code in **app.js**. Note that it's very important that you plan your project before you start writing any code! Break your project down into small pieces of work and strategize your approach to each one. With these bite-sized amounts, it'll be easier to debug and fix any issues that appear.\n\nFeel free to implement your own design workflow, but if you get stuck -- here is a walkthrough to get you up and running!\n\n1. **Clone the starter package from the [GitHub repository](https://github.com/udacity/Javascript)**. Go through the files to review the contents and familiarize yourself with the pieces that have been supplied. Pay specific attention to what the index.html file already contains and what seems to be missing.  No server, task runner, or bundler is required for this project, but if you feel it improves your personal workflow, now would be the time to add them. The ES6 techniques that have been introduced are encouraged, but if you are not using a build tool, there will be no transpiling to ES5; this will not be counted against you for this assignment, but will be worth considering if you choose to display it for your portfolio.\n\n\n2. **Decide how you will work with classes, then build out your classes and objects.**\n - There are several ways to build your objects, as well as multiple design patterns. What will be the most readable for this project?\n - Do you have a need for subclasses? \n - What properties are needed?\n\n\n3. **Get human data from the html form to build your human object. **\nThink about what 3 things you are going to compare to your human. You may need to create more fields, adjust the fields that are there, or remove fields to correspond with the data you will be collecting. \n - Do you need to create any functions to translate the data values to values that can be compared to the dino data. \n - How do the properties compare? Do you need any additional ones? \n - Start thinking about what events are going to need to occur and how you can take advantage of IIFEs.\n\n\n4. **Create at least 3 methods that compare dino data to human data.**\nDepending on how you decided to create your objects and what design pattern you chose, you may encounter issues accessing or working with some of the data. Do you need to create any functions to access/store this data?\n - When was the last time you linted your code? The linter may suggest you move around some of your methods and objects and name functions properly.\n - What sort of conversions are needed for your methods to get accurate output? It’s easiest to use console.log here for testing, but start thinking about how you are going to get this data onto the DOM. \n\n\n5. **Generate tiles and append to the DOM.**  Each Dino title must include at least the species, an image, and a fact. The dino fact displayed should be chosen at random from at least 6 options (including your 3 methods). The Human tile must include the user’s name, and the human graphic--no fact is needed. The bird tile should include the species, image, and fact, “All birds are dinosaurs.”\n - How will you display different information on the tiles dependant on dino, bird, or human?\n - How will you randomize the fact that is being displayed? If needed, here is a [hint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch).\n - How can you create the html for these tiles and get them to display on the dom? There are a lot of options for this some faster, some more secure. Time and experience will help you choose the best option for future projects.\n\n\n6. **Make certain the grid is not being added until you click the button to submit user data. Additionally, remove the form once the user has clicked to generate the infographic.** It is a good idea to remove any calls to console.log at this point. \n\n\n7. **REFACTOR.** At this point, your code should be working properly. Ideally, refactoring happens while you are developing, but as a new developer, you often don’t have the whole picture in your head to be able to do so properly.  Let’s clean the project up. \n - Have you run your code through a linter? We request you still follow Udacity standards when the code is complete, but running it through an [eslinter](https://eslint.org/demo) is going to help you get started in refactoring. \n - Are you using ES6 const and let? \n - Are you taking advantage of ES6 arrow functions and naming them appropriately?\n - Is your code DRY? Are there any pieces that would be better served as a helper function to avoid duplication?\n - How is your code structured? Have you created functions for the main functionality with properly scoped variables? Remember the design patterns you learned for Object Oriented Javascript, would readability improve if you followed those patterns? \n - Are you using the best method for your iterations? \n\n\n8. **Suggested:** Validate the form data to ensure the data is acceptable and complete. Allow the user to generate a new infographic. Move the tile colors from CSS to JS for more control. Randomize the order of the tiles while keeping the human in the middle. Create a hover state on the tiles that displays the rest of the species statistics. Create additional methods for comparing data. [Rewrite the project to use constructor functions, factory functions, the module pattern, and revealing module pattern](https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e). Change out data and images to generate an infographic of your own choosing. Allow the user to select different units for the numbers and update your methods to account for this. Make changes to the CSS, and HTML to make the project your own. \n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966795,
          "key": "f69e4536-7891-4a1a-8e07-e6cafa7aa5eb",
          "title": "Version Control",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f69e4536-7891-4a1a-8e07-e6cafa7aa5eb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966796,
              "key": "a555ca4b-ff9c-4e89-9c73-a16d6d182ee3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Version Control\n\n\nAlthough not a requirement, we recommend using Git from the very beginning. Make sure to commit often and to use well-formatted commit messages that conform to our [Git Style Guide](https://udacity.github.io/git-styleguide/).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966797,
          "key": "210e94a5-ca01-4d13-bb5d-0b51292817ff",
          "title": "Udacity Style Guides",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "210e94a5-ca01-4d13-bb5d-0b51292817ff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966798,
              "key": "c6f4e2b7-8036-4ac5-ad4e-3a0512906fec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Udacity Style Guides\n\nYou should write your code and markup to meet the specifications provided in these style guides:\n - [CSS Style Guide](http://udacity.github.io/frontend-nanodegree-styleguide/css.html)\n - [HTML Style Guide](http://udacity.github.io/frontend-nanodegree-styleguide/index.html)\n - [JavaScript Style Guide](http://udacity.github.io/frontend-nanodegree-styleguide/javascript.html)\n - [Git Style Guide](https://udacity.github.io/git-styleguide/)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 966799,
          "key": "eb7e1dd5-2787-434d-9ce9-2b6da8524f29",
          "title": "Still Not Sure How to Begin?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eb7e1dd5-2787-434d-9ce9-2b6da8524f29",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966800,
              "key": "4761a878-439d-4bd3-a36e-3499e69bcca5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Still Not Sure How to Begin?\n\n\nTo reiterate, be sure that you are comfortable with the content from [Object Oriented JavaScript](https://classroom.udacity.com/courses/ud711).\nAfter all, this entire project is about object-oriented JavaScript! \nA note on plagiarism: Viewing someone else’s code to get a general idea of implementation, then putting it away and starting to write your own code from scratch is okay. \n** Please do not copy someone's code**, in whole or in part. For further details, check out this [guide regarding plagiarism](https://udacity.zendesk.com/hc/en-us/categories/360000151251-Plagiarism).",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}