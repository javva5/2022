WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.650
In the first challenge,

00:00:01.650 --> 00:00:05.220
you were tasked with putting a bunch of console logs in order,

00:00:05.220 --> 00:00:08.115
and waiting certain amounts of time between each one.

00:00:08.115 --> 00:00:11.265
You might have written something like this,

00:00:11.265 --> 00:00:15.180
but you can see that even though this looks to be correct,

00:00:15.180 --> 00:00:19.110
we get a really jumbled order of our letters.

00:00:19.110 --> 00:00:21.945
So let's see why that's happening.

00:00:21.945 --> 00:00:26.300
We console log A first, that happens immediately.

00:00:26.300 --> 00:00:30.545
Then we write a setTimeout for log B,

00:00:30.545 --> 00:00:35.690
which will console log B and for log C. The problem is

00:00:35.690 --> 00:00:38.270
that this is going to be non-blocking

00:00:38.270 --> 00:00:41.795
because the setTimeout is doing work on another thread.

00:00:41.795 --> 00:00:47.890
So this doesn't prevent console log D from happening directly after console log A.

00:00:47.890 --> 00:00:50.405
Just like the barista in the analogy,

00:00:50.405 --> 00:00:53.810
setTimeout means that work is happening somewhere else,

00:00:53.810 --> 00:00:59.050
so our thread is going to move past it and do the next thing that it can do.

00:00:59.050 --> 00:01:05.425
We need to find a way to make this console log part of these setTimeouts.

00:01:05.425 --> 00:01:09.095
There are a lot of options for how you could have solved this,

00:01:09.095 --> 00:01:10.970
but here's one example.

00:01:10.970 --> 00:01:15.320
Instead of console logging D directly after the setTimeouts,

00:01:15.320 --> 00:01:22.595
I included console log D in the last step of log C. Now when we run the code,

00:01:22.595 --> 00:01:25.549
we can see that all of the letters

00:01:25.549 --> 00:01:30.300
are in order and they are happening at the appropriate time.

