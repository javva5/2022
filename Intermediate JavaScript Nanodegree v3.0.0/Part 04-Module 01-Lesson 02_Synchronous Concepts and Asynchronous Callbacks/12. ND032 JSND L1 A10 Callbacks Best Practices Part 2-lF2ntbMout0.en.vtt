WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.615
Here is our same example code from the last section,

00:00:03.615 --> 00:00:06.825
but this time, we're going to add in error handling.

00:00:06.825 --> 00:00:11.785
In this example, we're pretending to reach out to an API with multiple requests.

00:00:11.785 --> 00:00:14.250
But whenever we ask an API for something,

00:00:14.250 --> 00:00:16.980
there's the potential that our request will fail.

00:00:16.980 --> 00:00:18.930
Maybe we have the wrong URL,

00:00:18.930 --> 00:00:21.405
maybe that information no longer exists.

00:00:21.405 --> 00:00:23.205
Whatever the reason for failure,

00:00:23.205 --> 00:00:26.475
we need to make sure that our code can handle that error.

00:00:26.475 --> 00:00:30.360
How do we do that? Well, we are already handling

00:00:30.360 --> 00:00:35.100
a success case and handling the error case will look very similar.

00:00:35.100 --> 00:00:37.679
When we make a request to the API,

00:00:37.679 --> 00:00:42.060
we pass a callback function that will be called when the response is ready.

00:00:42.060 --> 00:00:47.100
But now, we're not going to pass one function for the success response,

00:00:47.100 --> 00:00:53.140
we're going to pass two functions for either the success or failure responses.

00:00:53.140 --> 00:00:58.400
Here, I've added a failure response callback to each step in the chain,

00:00:58.400 --> 00:01:02.065
because we need to be able to handle an error at any point.

00:01:02.065 --> 00:01:05.835
But now, we're passing two functions each time,

00:01:05.835 --> 00:01:09.530
and just imagine if this error handling wasn't just a console log.

00:01:09.530 --> 00:01:13.535
Imagine we were doing four or five lines of logic to handle the error,

00:01:13.535 --> 00:01:17.645
then this nested callback chain would start to look really crazy.

00:01:17.645 --> 00:01:20.165
Here is a better example that fits for

00:01:20.165 --> 00:01:24.295
either the flat or nested versions of your callback chains.

00:01:24.295 --> 00:01:29.555
Instead of writing the error handling function as an anonymous and inline function,

00:01:29.555 --> 00:01:33.860
I've broken it out into an external named function.

00:01:33.860 --> 00:01:38.075
This way, I can add logic without it being overwhelming to look at,

00:01:38.075 --> 00:01:41.555
and It takes some code out of the nested call back chain,

00:01:41.555 --> 00:01:43.445
which is in my mind, a big win.

00:01:43.445 --> 00:01:46.100
You'll see this pattern a lot in real life.

00:01:46.100 --> 00:01:49.850
Hopefully it gives you a better picture of how you can handle success and

00:01:49.850 --> 00:01:54.750
error responses from APIs that you reach out to with callback chains.

