WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.900
Here's an example of a fairly typical callback chain.

00:00:03.900 --> 00:00:06.180
You end up chaining callbacks when

00:00:06.180 --> 00:00:10.305
one asynchronous step has to follow another in order to work.

00:00:10.305 --> 00:00:12.495
In this example, I have

00:00:12.495 --> 00:00:16.950
a fake API that is just returning a function after a certain amount of time.

00:00:16.950 --> 00:00:19.080
You don't have to worry about this part,

00:00:19.080 --> 00:00:21.855
we are just interested in the callback chain.

00:00:21.855 --> 00:00:27.000
We want to end up with a list of the favorite animals of a specific user.

00:00:27.000 --> 00:00:30.060
But it's going to take a few steps for us to get there.

00:00:30.060 --> 00:00:33.870
All we have right now is the ID of the current session.

00:00:33.870 --> 00:00:37.695
So we have to ask the API for the session information.

00:00:37.695 --> 00:00:39.465
In the session information,

00:00:39.465 --> 00:00:41.700
we can access the user ID.

00:00:41.700 --> 00:00:45.289
So we take the user ID we got from the session information,

00:00:45.289 --> 00:00:48.385
and ask the API for the user's information.

00:00:48.385 --> 00:00:52.430
In the user's information is the list of their favorite animals.

00:00:52.430 --> 00:00:57.785
The information we wanted required three separate calls to the API,

00:00:57.785 --> 00:00:59.915
and the last two calls to the API,

00:00:59.915 --> 00:01:02.485
relied on answers from the previous calls.

00:01:02.485 --> 00:01:04.760
But you can see that if I run this code,

00:01:04.760 --> 00:01:08.735
I get the correct list of favorite animals for this user.

00:01:08.735 --> 00:01:11.795
It's really easy for chains like this to get confusing,

00:01:11.795 --> 00:01:14.735
so don't worry if you have trouble following that flow.

00:01:14.735 --> 00:01:18.500
But you can see that all of these functions happen in a chain,

00:01:18.500 --> 00:01:23.885
and one calling the other until the most nested one prints the information we want.

00:01:23.885 --> 00:01:28.090
Sometimes it might even be easier to see it this way.

00:01:28.090 --> 00:01:32.105
Fetched session is a function that takes two arguments.

00:01:32.105 --> 00:01:35.360
Sometimes it can be easier to look at it when you take

00:01:35.360 --> 00:01:38.870
out all of the extra stuff in the second argument,

00:01:38.870 --> 00:01:41.935
and look at it just as a normal function call.

00:01:41.935 --> 00:01:46.070
So you can see that these really are being called in a chain.

00:01:46.070 --> 00:01:48.695
This syntax is also very nested.

00:01:48.695 --> 00:01:52.010
In order to avoid the overly nested syntax,

00:01:52.010 --> 00:01:55.400
you might find it easier to read by breaking each of

00:01:55.400 --> 00:01:59.650
these nested functions into a flatter chain of callback calls.

00:01:59.650 --> 00:02:01.260
Let's take a look at this.

00:02:01.260 --> 00:02:05.105
The same code refactored into a flatter format.

00:02:05.105 --> 00:02:09.605
This code does exactly the same thing as the callback chain above,

00:02:09.605 --> 00:02:12.290
but you might find it more friendly to look at.

00:02:12.290 --> 00:02:13.880
As a general rule,

00:02:13.880 --> 00:02:16.640
people find it easier to read a program when

00:02:16.640 --> 00:02:19.640
more code is kept to the left-hand side of the screen,

00:02:19.640 --> 00:02:23.380
meaning, less nested and shorter lines of code.

00:02:23.380 --> 00:02:25.400
This example achieves that,

00:02:25.400 --> 00:02:29.035
but there are still some less than ideal things about it.

00:02:29.035 --> 00:02:31.845
First, it is more code.

00:02:31.845 --> 00:02:34.155
Breaking functions out like this,

00:02:34.155 --> 00:02:37.085
you will write more lines of code than if you nested

00:02:37.085 --> 00:02:41.080
anonymous functions inside each other as the previous example showed.

00:02:41.080 --> 00:02:43.880
There's no good way to make this code more

00:02:43.880 --> 00:02:47.330
concise while also maintaining it's readability.

00:02:47.330 --> 00:02:50.480
Another thing that might be less than ideal about this code,

00:02:50.480 --> 00:02:53.345
is that you have to read it from the bottom up.

00:02:53.345 --> 00:02:55.985
Because each function is calling another,

00:02:55.985 --> 00:02:58.025
the last function to run,

00:02:58.025 --> 00:03:00.595
has to be the first function declared.

00:03:00.595 --> 00:03:03.120
How you feel about that can go either way.

00:03:03.120 --> 00:03:04.205
Some people mind it,

00:03:04.205 --> 00:03:07.360
others don't, but it's something to be aware of.

00:03:07.360 --> 00:03:10.010
Now, you've seen callbacks written two different ways,

00:03:10.010 --> 00:03:13.730
and you can decide which one will be cleaner for your implementation.

00:03:13.730 --> 00:03:17.930
Most of the time, especially if each step has more functionality,

00:03:17.930 --> 00:03:20.605
I would say that the flat style is cleaner.

00:03:20.605 --> 00:03:23.450
But in my experience, I think the nested syntax is

00:03:23.450 --> 00:03:26.300
still more common to see in programs in the world.

00:03:26.300 --> 00:03:28.520
One rule I would absolutely stick to,

00:03:28.520 --> 00:03:30.380
though, when using callback chains,

00:03:30.380 --> 00:03:35.545
is that you should break functionality into external functions early and often.

00:03:35.545 --> 00:03:38.165
Especially, if you're using this nested style,

00:03:38.165 --> 00:03:41.690
there's already a lot of logic crammed into a few lines,

00:03:41.690 --> 00:03:43.415
and adding a few more,

00:03:43.415 --> 00:03:45.875
could make things very messy very easily.

00:03:45.875 --> 00:03:48.080
So when you have the option,

00:03:48.080 --> 00:03:51.080
break functionality out, make a new function,

00:03:51.080 --> 00:03:53.660
and call it from within your callback chain.

00:03:53.660 --> 00:03:58.310
In the end, whether you choose the nested style or the flat style,

00:03:58.310 --> 00:04:01.280
you have options to write your code more cleanly.

00:04:01.280 --> 00:04:06.025
As we know, the readability of our code is one of the most important things about it,

00:04:06.025 --> 00:04:07.565
and in the next section,

00:04:07.565 --> 00:04:12.450
you'll see how error handling comes into play in both of these formats.

